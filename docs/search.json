[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "daR4hs",
    "section": "",
    "text": "Введение\nДанные материалы являются конспектом онлайн курса Г. А. Мороз ‘Введение в анализ данных на R для гуманитарных и социальных наук’",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html",
    "href": "1_introduction_to_r.html",
    "title": "1  Введение в R",
    "section": "",
    "text": "1.1 Установка R и RStudio\nВ данной книге используется исключительно R (R Core Team 2023), так что для занятий понадобятся:\nЧасто можно увидеть или услышать, что R — язык программирования для “статистической обработки данных”. Изначально это, конечно, было правдой, но уже давно R — это полноценный язык программирования, который при помощи своих пакетов позволяет решать огромный спектр задач. В данной книге используется следующая версия R:\nR version 4.4.1 (2024-06-14)\nНекоторые люди не любят устанавливать лишние программы себе на компьютер, несколько вариантов есть и для них:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#установка-r-и-rstudio",
    "href": "1_introduction_to_r.html#установка-r-и-rstudio",
    "title": "1  Введение в R",
    "section": "",
    "text": "R\n\nна Windows\nна Mac\nна Linux, также можно установить из командной строки:\n\n\nsudo apt-get install r-base\n\nRStudio — IDE для R (можно скачать здесь)\nи некоторые пакеты на R\n\n\n\n\n\nRStudio cloud — полная функциональность RStudio с некоторыми ограничениями;\nwebR REPL — ограниченная версия компилятора R, которая работает в вашем браузере и не требует никаких установок на компьютер\nJupyter ноутбуки;\nGoogle Colab (нужно в настройках переключить ядро);\nVS Code — другое IDE, которое также позволяет работать с R;\nв принципе, в IDE нет нужды, можно работать из терминала, после установки, нужно всего лишь набрать R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#знакомство-с-rstudio",
    "href": "1_introduction_to_r.html#знакомство-с-rstudio",
    "title": "1  Введение в R",
    "section": "1.2 Знакомство с RStudio",
    "text": "1.2 Знакомство с RStudio\nRStudio — основной IDE для R. После установки R и RStudio можно открыть RStudio и перед вами предстанет что-то похожее на изображение ниже:\n После нажатия на двойное окошко, чуть левее надписи Environment, откроется окно скрипта.\n\n\n\nПодокна RStudio\n\n\nВсе следующие команды можно:\n\nвводить в окне консоли, и тогда для исполнения следует нажимать клавишу Enter.\nвводить в окне скрипта, и тогда для исполнения следует нажимать клавиши Ctrl/Cmd + Enter или на команду Run на панели окна скрипта. Все, что введено в окне скрипта, можно редактировать как в любом текстовом редакторе, в том числе сохранять Ctrl/Cmd + S.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#r-как-калькулятор",
    "href": "1_introduction_to_r.html#r-как-калькулятор",
    "title": "1  Введение в R",
    "section": "1.3 R как калькулятор",
    "text": "1.3 R как калькулятор\nДавайте начнем с самого простого и попробуем использовать R как простой калькулятор. +, -, *, /, ^ (степень), () и т. д.\n\n40+2\n\n[1] 42\n\n3-2\n\n[1] 1\n\n5*6\n\n[1] 30\n\n99/9\n\n[1] 11\n\n2+4*2\n\n[1] 10\n\n(2+4)*2\n\n[1] 12\n\n2^3\n\n[1] 8\n\n\nОбратите внимание на то, что разделителем целой и дробной частей является точка, кроме того, если целая часть состоит исключительно из 0, то ее можно опустить.\n\n50.3 + .7\n\n[1] 51",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#создание-переменных",
    "href": "1_introduction_to_r.html#создание-переменных",
    "title": "1  Введение в R",
    "section": "1.5 Создание переменных",
    "text": "1.5 Создание переменных\nДля создания переменных следует задать имя переменной и использовать знак присваивания &lt;- (Alt + -).\n\nmy_var &lt;- 55 + 412\n\nОбратите внимание, что результат суммы не выводится. Он сохраняется в переменной и не будет показано, пока мы не вызовем переменную. Кроме того будут работать и другие способы присвоения, хотя эти способы и не рекомендованы в R:\n\nmy_var = 55+12\n5512+412 -&gt; my_var\n\nДля того, чтобы вызвать нужную переменную, достаточно использовать ее имя:\n\nmy_var\n\n[1] 5924\n\nmy_var + 33\n\n[1] 5957\n\n\nЕсли хочется поменять значение переменной, то нужно снова использовать присваивание:\n\nmy_var &lt;- my_var + 42\nmy_var\n\n[1] 5966\n\n\nСпецифицировать при присваивании тип переменной никак не нужно:\n\nmy_var2 &lt;- \"Эфывфы вфыв\"\nmy_var3 &lt;- TRUE\nmy_var4 &lt;- 1212.1212124\n\nВ R есть ограничения на названия переменных (см. подробнее в справке ?make.names):\n\nимя может содержать буквы, числа, точку (.) и нижнее подчеркивание (_);\nимя должно начинаться на букву;\nимя не может совпадать с одним из зарезервированных имен: if, else, repeat, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, NA_character_ (см. подробнее в справке ?Reserved);\nмы рекомендуем использовать только латинские буквы в названии (хотя любые ASCII символы подойдут);\nмы рекомендуем не называть переменные именами других функций в R, например, filter, source и т. п.\nв разных пакетах R Вы увидите разные стратегии называния функций и переменных, но самая распространенная — с использованием нижнего подчеркивания:\n\ni_use_snake_case;\notherPeopleUseCamelCase;\nsome.people.use.periods;\nглавное: не перемешивать разные стили.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#векторы",
    "href": "1_introduction_to_r.html#векторы",
    "title": "1  Введение в R",
    "section": "1.6 Векторы",
    "text": "1.6 Векторы\nВекторы в R — это один из базовых элементов, который позволяет создавать объекты, состоящие из нескольких единиц. Самый простой вектор, который отображает последовательность чисел, можно создать следующим образом:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n10:1\n\n [1] 10  9  8  7  6  5  4  3  2  1\n\n20:-9\n\n [1] 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 -1 -2 -3 -4\n[26] -5 -6 -7 -8 -9\n\n\nПри помощи двоеточия можно создавать последовательности чисел с шагом один. К получившимся объектам можно применять арифметические операции: они будут применяться к каждому элементу вектора:\n\nmy_var &lt;- 13:3\n\nmy_var*2\n\n [1] 26 24 22 20 18 16 14 12 10  8  6\n\nmy_var^3\n\n [1] 2197 1728 1331 1000  729  512  343  216  125   64   27\n\n\nЕсли же нужно создать вектор, которой последовательностью не является, следует использовать функцию c() (от слова combine):\n\nfibonacci_sequence &lt;- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144)\ncyrillic_syllables &lt;- c(\"сяк\", \"учк\", \"щип\", \"арг\", \"фыщ\")\n\nОсновное правило векторов заключается в том, что элементы вектора должны быть одного типа, иначе R будет сам приводить все элементы к единому формату (по-английски это называют coercion):\n\nc(5, 9, 11, TRUE) # TRUE превратится в 1\n\n[1]  5  9 11  1\n\nc(\"в\", \"золотой\", \"клубочек\", \"спрятался\", 1, \"дубочек\") # 1 превратится в строку \"1\"\n\n[1] \"в\"         \"золотой\"   \"клубочек\"  \"спрятался\" \"1\"         \"дубочек\"  \n\n\nКроме того в R есть встроенные векторы:\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nmonth.name\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#индексация-векторов",
    "href": "1_introduction_to_r.html#индексация-векторов",
    "title": "1  Введение в R",
    "section": "1.7 Индексация векторов",
    "text": "1.7 Индексация векторов\nЧтобы вызвать какой-то элемент вектора, нужно написать в квадратных скобках номер требуемого элемента:\n\nletters[13]\n\n[1] \"m\"\n\n\nИндексы тоже могут быть вектором. Один и тот же элемент можно вызвать несколько раз:\n\nletters[c(13, 1, 15, 13)]\n\n[1] \"m\" \"a\" \"o\" \"m\"\n\n\nКроме того, в качестве индекса можно давать какую-то инструкцию. Например, так мы можем вывести все элементы вектора v, которые нацело делятся на три:\n\nv &lt;- 100:1\nv[v %% 3 == 0]\n\n [1] 99 96 93 90 87 84 81 78 75 72 69 66 63 60 57 54 51 48 45 42 39 36 33 30 27\n[26] 24 21 18 15 12  9  6  3\n\n\nЭта конструкция достаточно сложная, так что давайте разберем ее поэтапно. Оператор %% возвращает остаток от деления:\n\nv %% 3\n\n  [1] 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1\n [38] 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0\n [75] 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1 0 2 1\n\n\nОператор == сравнивает каждый элемент вектора с 0 (см. противоположный оператор — !=) и возвращает логический вектор:\n\nv %% 3 == 0\n\n  [1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [13] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [25] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [37] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [49] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [61] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [73] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [85] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n [97] FALSE  TRUE FALSE FALSE\n\n\nПосле применения такой операции, полученный логический вектор (TRUE и FALSE) используется для индексации исходного вектора. В результате возвращаются только те элементы, которым соответствует значение TRUE.\n\nv[v %% 3 == 0]\n\n [1] 99 96 93 90 87 84 81 78 75 72 69 66 63 60 57 54 51 48 45 42 39 36 33 30 27\n[26] 24 21 18 15 12  9  6  3\n\n\nВозможно, внимательный пользователь уже заметил, что индексация в R идет с единицы. При вызове нулевого индекса будет результат нулевой длинны, а если в индексах есть еще другие элементы, нулевой индекс – будет проигнорирован.\n\nletters[0]\n\ncharacter(0)\n\nletters[c(2, 0, 4)]\n\n[1] \"b\" \"d\"\n\n\nИндексирование с минусом выдаст все значения вектора за исключением выбранных:\n\nletters[-3] # вектор без буквы c\n\n [1] \"a\" \"b\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"\n[20] \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nletters[-c(1, 4, 9)] # вектор без букв a, d и i\n\n [1] \"b\" \"c\" \"e\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\"\n[20] \"w\" \"x\" \"y\" \"z\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#функции",
    "href": "1_introduction_to_r.html#функции",
    "title": "1  Введение в R",
    "section": "1.8 Функции",
    "text": "1.8 Функции\nОсновные возможности R скрыты в множестве функций, которые разработчики написали и поместили в пакеты. Функции в R имеют имя (оно ставится до круглых скобок) и аргументы (они перечисляются в круглых скобках по схеме имя аргумента – знак равно – значение). Рассмотрим на примере функции seq():\n\nseq(from = 1, to = 100, by = 13)\n\n[1]  1 14 27 40 53 66 79 92\n\n\nДанная функция имеет имя — seq и три аргумента: from, to и by. Эта функция порождает вектор чисел арифметической последовательности. Важно отметить, что знак равно в данном случае не является операцией присваивания. Имена аргументов у каждой функции содержатся в определенном строго заданном порядке. Имена аргументов можно опускать:\n\nseq(1, 100, 13)\n\n[1]  1 14 27 40 53 66 79 92\n\n\nКроме того, пользователь при желании может подавать аргументы в произвольном порядке (и даже не дописывать названия аргументов), но это возможно только в том случае, если названия аргументов опознаваемо:\n\nseq(from = 1, to = 100, by = 13)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(from = 1, by = 13, to = 100)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(to = 100, from = 1, by = 13)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(by = 13, to = 100, from = 1)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(to = 100, by = 13, from = 1)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(by = 13, to = 100, from = 1)\n\n[1]  1 14 27 40 53 66 79 92\n\nseq(f = 1, t = 100, b = 13)\n\n[1]  1 14 27 40 53 66 79 92\n\n\nКаждый аргумент функции предполагает определенный тип объектов, который подается на вход. Многие функции в R векторизованы, т. е. применимы к векторам. Рассмотрим на примере функции для извлечения корня sqrt():\n\nsqrt(4) # применение к вектору длины 1\n\n[1] 2\n\nsqrt(1:100) # применение к вектору длины 100\n\n  [1]  1.000000  1.414214  1.732051  2.000000  2.236068  2.449490  2.645751\n  [8]  2.828427  3.000000  3.162278  3.316625  3.464102  3.605551  3.741657\n [15]  3.872983  4.000000  4.123106  4.242641  4.358899  4.472136  4.582576\n [22]  4.690416  4.795832  4.898979  5.000000  5.099020  5.196152  5.291503\n [29]  5.385165  5.477226  5.567764  5.656854  5.744563  5.830952  5.916080\n [36]  6.000000  6.082763  6.164414  6.244998  6.324555  6.403124  6.480741\n [43]  6.557439  6.633250  6.708204  6.782330  6.855655  6.928203  7.000000\n [50]  7.071068  7.141428  7.211103  7.280110  7.348469  7.416198  7.483315\n [57]  7.549834  7.615773  7.681146  7.745967  7.810250  7.874008  7.937254\n [64]  8.000000  8.062258  8.124038  8.185353  8.246211  8.306624  8.366600\n [71]  8.426150  8.485281  8.544004  8.602325  8.660254  8.717798  8.774964\n [78]  8.831761  8.888194  8.944272  9.000000  9.055385  9.110434  9.165151\n [85]  9.219544  9.273618  9.327379  9.380832  9.433981  9.486833  9.539392\n [92]  9.591663  9.643651  9.695360  9.746794  9.797959  9.848858  9.899495\n [99]  9.949874 10.000000\n\n\nДавайте посмотрим на ошибку, которую мы получим, если подадим на вход тип данных, который функцией не предполагается:\n\nsqrt(\"asdasd\")\n\nError in sqrt(\"asdasd\"): non-numeric argument to mathematical function\n\n\nВажно отметить, что в реальных данных могут встретиться пропущенные значения (NA), что вызывает NA при применении некоторых функций, так что в них можно встретить аргумент na.rm, например:\n\nmean(c(1:50))\n\n[1] 25.5\n\nmean(c(1:50, NA))\n\n[1] NA\n\nmean(c(1:50, NA), na.rm = TRUE)\n\n[1] 25.5\n\n\nОчень важно, что все функции в R задокументированы, так что список аргументов, их порядок, их значения по умолчанию, примеры использования — все это можно найти в справке, которую можно вызвать, набрав в консоли вопросительный знак и имя функции, например, ?seq, ?mean и т. п.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#датафреймы-и-их-индексация",
    "href": "1_introduction_to_r.html#датафреймы-и-их-индексация",
    "title": "1  Введение в R",
    "section": "1.9 Датафреймы и их индексация",
    "text": "1.9 Датафреймы и их индексация\nДатафрейм — это один из основных объектов в R, в котором обычно импортируют и экспортируют табличные данные. Датафрейм — это собрание векторов одинаковой длинны. Давайте создадим датафрейм:\n\ndf &lt;- data.frame(name = c(\"Анна\", \"Вера\", \"Михаил\"),\n                 age = c(23, 33, 11),\n                 color = c(\"голубой\", \"зеленый\", \"желтый\"))\ndf\n\n    name age   color\n1   Анна  23 голубой\n2   Вера  33 зеленый\n3 Михаил  11  желтый\n\n\nХоть мы и записывали разные векторы датафрейма в строчку, стандартное представление датафрейма перевернутое: каждый вектор – это столбец. Каждый отдельный вектор датафрейма можно вызвать по имени (и индексировать как обычный вектор):\n\ndf$color\n\n[1] \"голубой\" \"зеленый\" \"желтый\" \n\ndf$name[2:3]\n\n[1] \"Вера\"   \"Михаил\"\n\n\nКроме того, к элементам датафрейма можно обращаться при помощи индекса в квадратных скобках, сначала идут строки, потом столбцы.\n\ndf[3,3]\n\n[1] \"желтый\"\n\n\nЕсли какой-то элемент не нужен, то его оставляют пустым, но запятую ставить обязательно:\n\ndf[3,]\n\n    name age  color\n3 Михаил  11 желтый\n\n\nЕще варианты обращения к элементам датафрейма\n\ndf[3,c(1, 3)]\n\n    name  color\n3 Михаил желтый\n\ndf[c(1, 3), c(1, 3)]\n\n    name   color\n1   Анна голубой\n3 Михаил  желтый\n\n\nКроме того, можно вызывать необходимые столбцы по имени прямо внутри квадратных скобок:\n\ndf[, c(\"age\", \"name\")]\n\n  age   name\n1  23   Анна\n2  33   Вера\n3  11 Михаил\n\ndf &lt;- df[, c(\"age\", \"name\", \"color\")]\n\nВ R есть достаточно много встроенных датасетов, вот самые популярные:\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#работа-с-пакетами",
    "href": "1_introduction_to_r.html#работа-с-пакетами",
    "title": "1  Введение в R",
    "section": "1.10 Работа с пакетами",
    "text": "1.10 Работа с пакетами\nВсе богатство R находиться в его огромной инфраструктуре пакетов, которые может разрабатывать кто-угодно: от больших компаний, до частных исследователей. Чтобы их установить, нужно использовать команду install.packages(). Начнем с установки центрального для курса пакета: tidyverse:\n\ninstall.packages(\"tidyverse\")\n\nСледует помнить, что установка пакета не влечет за собой работу всех функций пакета. Пакет еще нужно включить командой library().\n\nПроверим, что все установилось, запустим пакет.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#чтение-и-запись-табличных-данных",
    "href": "1_introduction_to_r.html#чтение-и-запись-табличных-данных",
    "title": "1  Введение в R",
    "section": "1.11 Чтение и запись табличных данных",
    "text": "1.11 Чтение и запись табличных данных\nТабличные данные можно хранить в разных форматах, самые распространенные:\n\nФормат .csv (comma seprated value) с одним из разделителей: запятая, табуляция и т. д.\nТаблицы .xlsx.\n\nЧтение происходит из рабочей директории, которую можно узнать командой getwd() и назначить командой setwd(), например:\n\nsetwd(\"path/to/my/folder\")\n\nПосле того, как изменилась рабочая директория (в RStudio рабочая директория пишется в шапке раздела консоль), становится возможным считывать файлы.\n\ndf &lt;- read_csv(\"orange_circumference.csv\")\n\nВ принципе рабочую директорию можно и не менять а в качестве аргумента подавать полный путь:\n\ndf &lt;- read_csv(\"path/to/my/folder/orange_circumference.csv\")\n\nКроме того, важно отметить, что R позволяет считывать данные и из интернета, например, тот же самый датасет находится по следующей ссылке: https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w1_orange_circumference.csv\n\ndf &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w1_orange_circumference.csv\")\n\nRows: 35 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): Tree, age, circumference\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 35 × 3\n    Tree   age circumference\n   &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1   118            30\n 2     1   484            58\n 3     1   664            87\n 4     1  1004           115\n 5     1  1231           120\n 6     1  1372           142\n 7     1  1582           145\n 8     2   118            33\n 9     2   484            69\n10     2   664           111\n# ℹ 25 more rows\n\n\nОбычно при чтении функцией read_csv() также высвечивается информация о типах столбцов. Это сообщение можно выключить при помощи аргумента show_col_types:\n\ndf &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w1_orange_circumference.csv\", show_col_types = FALSE)\n\nЧтение .xlsx файлов устроено аналогичным образом с тем лишь отличием, что эта функция не позволяет читать файлы из интернета. Если вам нужен файл на пробу, то вот ссылка на датасет, который мы обсуждали выше, в формате .xlsx.\n\nlibrary(readxl)\ndf &lt;- read_xlsx(\"orange_circumference.xlsx\")\n\nСохранение файлов устроено похожим образом, просто выберите одну из функций\n\nwrite_csv() — разделитель запятая\nwrite_tsv() — разделитель табуляция\nwrite_delim() — произвольный разделитель, который задается в аргументе delim\n\n\nwrite_csv(df, \"orange_circumference_g100.csv\")\nwrite_tsv(df, \"orange_circumference_g100.tsv\")\nwrite_delim(df, \"orange_circumference_g100.zsv\", delim = \"0\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html",
    "href": "2_data_transformation.html",
    "title": "2  Трансформация данных",
    "section": "",
    "text": "2.1 tibble\nСовременный вариант датафрейма называется тиббл и отличается от классического тем, как он печатается в консоли и некоторыми дополнительными возможностями. Для его создания нужно в функцию tibble() подать именованные векторы:\ntibble(x = 1:100,\n       y = 100:1,\n       logical = sample(x = c(\"a\", \"b\", \"c\"), size = 100, replace = TRUE))\n\n# A tibble: 100 × 3\n       x     y logical\n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;  \n 1     1   100 a      \n 2     2    99 c      \n 3     3    98 b      \n 4     4    97 c      \n 5     5    96 b      \n 6     6    95 b      \n 7     7    94 a      \n 8     8    93 b      \n 9     9    92 c      \n10    10    91 c      \n# ℹ 90 more rows\nМы будем использовать tibble() для саздание таблиц, но чаще всего мы будем считывать данные при помощи функций read_csv(), read_tsv() и прочих, которые по умолчанию преобразуют таблицу в формат tibble.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функции-семейства-slice",
    "href": "2_data_transformation.html#функции-семейства-slice",
    "title": "2  Трансформация данных",
    "section": "2.3 Функции семейства slice()",
    "text": "2.3 Функции семейства slice()\nДальше мы посмотрим на фрагмент данных из исследования издания N+1 дразнилки “Жадина-говядина”, где исследовались социолингвистические аспекты влияющие на тенденцию к тому или иному продолжению. Переменные word_1, word_2 и word_3 соотвествуют разным вариантам начала, переменная type описывает классификацию, которую варианту дали исследователи, а переменная n отвечает за количество этих вариантов в данных.\n\nzhadina &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_zhadina.csv\")\nzhadina\n\n# A tibble: 26 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  огурец     огурец        11\n 5 жадина-говядина в *опе  шоколадина шоколадина  1117\n 6 жадина-говядина гнилая  шоколадина шоколадина    12\n 7 жадина-говядина дома    шоколадина шоколадина    29\n 8 жадина-говядина зеленый огурец     огурец       343\n 9 жадина-говядина злая    шоколадина шоколадина    10\n10 жадина-говядина кислая  капуста    другое        10\n# ℹ 16 more rows\n\n\nПервые функции tidyverse, которая будет нас интересовать, — это функции семейства slice(). Функция slice() позволяет фильтровать нужные строчки датасета по индексу:\n\nzhadina |&gt; \n  slice(c(6, 25, 3))\n\n# A tibble: 3 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина гнилая   шоколадина шоколадина    12\n2 жадина-говядина турецкий барабан    барабан     3003\n3 жадина-говядина булка    шоколадина шоколадина   250\n\nzhadina |&gt; \n  slice(6:25)\n\n# A tibble: 20 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина гнилая   шоколадина шоколадина    12\n 2 жадина-говядина дома     шоколадина шоколадина    29\n 3 жадина-говядина зеленый  огурец     огурец       343\n 4 жадина-говядина злая     шоколадина шоколадина    10\n 5 жадина-говядина кислая   капуста    другое        10\n 6 жадина-говядина кошка    поросятина другое        42\n 7 жадина-говядина кошка    шоколадина шоколадина    18\n 8 жадина-говядина никто ее не ест     другое        10\n 9 жадина-говядина кусок    шоколадины шоколадина   113\n10 жадина-говядина на пузе  барабан    барабан       14\n11 жадина-говядина немецкий барабан    барабан       12\n12 жадина-говядина *опа     шоколадина шоколадина   299\n13 жадина-говядина простая  шоколадина шоколадина    59\n14 жадина-говядина пустая   шоколадина шоколадина  3774\n15 жадина-говядина соленый  барабан    барабан       11\n16 жадина-говядина соленый  огурец     огурец     26910\n17 жадина-говядина соленый  помидор    другое        17\n18 жадина-говядина сухая    шоколадина шоколадина    16\n19 жадина-говядина тупая    шоколадина шоколадина    50\n20 жадина-говядина турецкий барабан    барабан     3003\n\n\nСтоит обратить внимание, что результат работы функции выводиться в консоль, чтобы сохранить результат работы, следует сделать операцию приписывания одним из следующих способов (первый наиболее распространенный):\n\nnew_zhadina &lt;- zhadina |&gt; \n  slice(6:25)\n\nzhadina |&gt; \n  slice(6:25) -&gt;\n  new_zhadina\n\nКроме того, есть функции slice_head() и slice_tail(), которые выдают первое/последнее наблюдение. Аргумент n позволяет донастроить, сколько первых/последних наблюдений хочется вывести:\n\nzhadina |&gt; \n  slice_head()\n\n# A tibble: 1 × 5\n  word_1          word_2  word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина большая шоколадина шоколадина   941\n\nzhadina |&gt; \n  slice_tail()\n\n# A tibble: 1 × 5\n  word_1          word_2   word_3  type       n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;\n1 жадина-говядина турецкий таракан другое    13\n\nzhadina |&gt; \n  slice_tail(n = 6)\n\n# A tibble: 6 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина соленый  огурец     огурец     26910\n2 жадина-говядина соленый  помидор    другое        17\n3 жадина-говядина сухая    шоколадина шоколадина    16\n4 жадина-говядина тупая    шоколадина шоколадина    50\n5 жадина-говядина турецкий барабан    барабан     3003\n6 жадина-говядина турецкий таракан    другое        13\n\n\nСтоит отметить, что совпадение имени аргумента и названия столбца в нашем датасете (n) никак не влияет на работу функции. Также полезными могут быть функции slice_max() и slice_min(), которые выдают максимальное/минимальное значение переменной. У этой функции тоже есть аргумент n:\n\nzhadina |&gt; \n  slice_max(n)\n\n# A tibble: 1 × 5\n  word_1          word_2  word_3 type       n\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt;\n1 жадина-говядина соленый огурец огурец 26910\n\nzhadina |&gt; \n  slice_min(n)\n\n# A tibble: 3 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина злая     шоколадина шоколадина    10\n2 жадина-говядина кислая   капуста    другое        10\n3 жадина-говядина никто ее не ест     другое        10\n\nzhadina |&gt; \n  slice_max(n, n = 3)\n\n# A tibble: 3 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина соленый  огурец     огурец     26910\n2 жадина-говядина пустая   шоколадина шоколадина  3774\n3 жадина-говядина турецкий барабан    барабан     3003\n\n\nФункция slice_sample() позволяет вывести выборку из некоторого количества строчек (аргумент n) или долю строчек (аргумент prop):\n\nzhadina |&gt; \n  slice_sample(n = 10)\n\n# A tibble: 10 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина кислая   капуста    другое        10\n 2 жадина-говядина кусок    шоколадины шоколадина   113\n 3 жадина-говядина злая     шоколадина шоколадина    10\n 4 жадина-говядина кошка    шоколадина шоколадина    18\n 5 жадина-говядина немецкий барабан    барабан       12\n 6 жадина-говядина соленый  барабан    барабан       11\n 7 жадина-говядина соленый  огурец     огурец     26910\n 8 жадина-говядина кошка    поросятина другое        42\n 9 жадина-говядина зеленый  огурец     огурец       343\n10 жадина-говядина соленый  помидор    другое        17\n\nzhadina |&gt; \n  slice_sample(prop = 0.3)\n\n# A tibble: 7 × 5\n  word_1          word_2  word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина зеленый огурец     огурец       343\n2 жадина-говядина бука    шоколадина шоколадина    44\n3 жадина-говядина кусок   шоколадины шоколадина   113\n4 жадина-говядина на пузе барабан    барабан       14\n5 жадина-говядина пустая  шоколадина шоколадина  3774\n6 жадина-говядина сухая   шоколадина шоколадина    16\n7 жадина-говядина кислая  капуста    другое        10",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функции-семейства-filter",
    "href": "2_data_transformation.html#функции-семейства-filter",
    "title": "2  Трансформация данных",
    "section": "2.5 Функции семейства filter()",
    "text": "2.5 Функции семейства filter()\n\nzhadina |&gt; \n  filter(n &gt; 100)\n\n# A tibble: 9 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина большая  шоколадина шоколадина   941\n2 жадина-говядина булка    шоколадина шоколадина   250\n3 жадина-говядина в *опе   шоколадина шоколадина  1117\n4 жадина-говядина зеленый  огурец     огурец       343\n5 жадина-говядина кусок    шоколадины шоколадина   113\n6 жадина-говядина *опа     шоколадина шоколадина   299\n7 жадина-говядина пустая   шоколадина шоколадина  3774\n8 жадина-говядина соленый  огурец     огурец     26910\n9 жадина-говядина турецкий барабан    барабан     3003\n\nzhadina |&gt; \n  filter(n &lt; 100)\n\n# A tibble: 17 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина бука     шоколадина шоколадина    44\n 2 жадина-говядина в *опе   огурец     огурец        11\n 3 жадина-говядина гнилая   шоколадина шоколадина    12\n 4 жадина-говядина дома     шоколадина шоколадина    29\n 5 жадина-говядина злая     шоколадина шоколадина    10\n 6 жадина-говядина кислая   капуста    другое        10\n 7 жадина-говядина кошка    поросятина другое        42\n 8 жадина-говядина кошка    шоколадина шоколадина    18\n 9 жадина-говядина никто ее не ест     другое        10\n10 жадина-говядина на пузе  барабан    барабан       14\n11 жадина-говядина немецкий барабан    барабан       12\n12 жадина-говядина простая  шоколадина шоколадина    59\n13 жадина-говядина соленый  барабан    барабан       11\n14 жадина-говядина соленый  помидор    другое        17\n15 жадина-говядина сухая    шоколадина шоколадина    16\n16 жадина-говядина тупая    шоколадина шоколадина    50\n17 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(n &lt;= 100) # `&lt;` + `=`\n\n# A tibble: 17 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина бука     шоколадина шоколадина    44\n 2 жадина-говядина в *опе   огурец     огурец        11\n 3 жадина-говядина гнилая   шоколадина шоколадина    12\n 4 жадина-говядина дома     шоколадина шоколадина    29\n 5 жадина-говядина злая     шоколадина шоколадина    10\n 6 жадина-говядина кислая   капуста    другое        10\n 7 жадина-говядина кошка    поросятина другое        42\n 8 жадина-говядина кошка    шоколадина шоколадина    18\n 9 жадина-говядина никто ее не ест     другое        10\n10 жадина-говядина на пузе  барабан    барабан       14\n11 жадина-говядина немецкий барабан    барабан       12\n12 жадина-говядина простая  шоколадина шоколадина    59\n13 жадина-говядина соленый  барабан    барабан       11\n14 жадина-говядина соленый  помидор    другое        17\n15 жадина-говядина сухая    шоколадина шоколадина    16\n16 жадина-говядина тупая    шоколадина шоколадина    50\n17 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(n &gt;= 100) # `&gt;` + `=`\n\n# A tibble: 9 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина большая  шоколадина шоколадина   941\n2 жадина-говядина булка    шоколадина шоколадина   250\n3 жадина-говядина в *опе   шоколадина шоколадина  1117\n4 жадина-говядина зеленый  огурец     огурец       343\n5 жадина-говядина кусок    шоколадины шоколадина   113\n6 жадина-говядина *опа     шоколадина шоколадина   299\n7 жадина-говядина пустая   шоколадина шоколадина  3774\n8 жадина-говядина соленый  огурец     огурец     26910\n9 жадина-говядина турецкий барабан    барабан     3003\n\nzhadina |&gt; \n  filter(n != 10) # `!` + `=`\n\n# A tibble: 23 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  огурец     огурец        11\n 5 жадина-говядина в *опе  шоколадина шоколадина  1117\n 6 жадина-говядина гнилая  шоколадина шоколадина    12\n 7 жадина-говядина дома    шоколадина шоколадина    29\n 8 жадина-говядина зеленый огурец     огурец       343\n 9 жадина-говядина кошка   поросятина другое        42\n10 жадина-говядина кошка   шоколадина шоколадина    18\n# ℹ 13 more rows\n\nzhadina |&gt; \n  filter(n == 10) # `=` + `=`\n\n# A tibble: 3 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина злая     шоколадина шоколадина    10\n2 жадина-говядина кислая   капуста    другое        10\n3 жадина-говядина никто ее не ест     другое        10\n\nzhadina |&gt; \n  filter(word_3 == \"шоколадина\") # `=` + `=`\n\n# A tibble: 13 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  шоколадина шоколадина  1117\n 5 жадина-говядина гнилая  шоколадина шоколадина    12\n 6 жадина-говядина дома    шоколадина шоколадина    29\n 7 жадина-говядина злая    шоколадина шоколадина    10\n 8 жадина-говядина кошка   шоколадина шоколадина    18\n 9 жадина-говядина *опа    шоколадина шоколадина   299\n10 жадина-говядина простая шоколадина шоколадина    59\n11 жадина-говядина пустая  шоколадина шоколадина  3774\n12 жадина-говядина сухая   шоколадина шоколадина    16\n13 жадина-говядина тупая   шоколадина шоколадина    50\n\nzhadina |&gt; \n  filter(word_3 != \"шоколадина\") # `!` + `=`\n\n# A tibble: 13 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина в *опе   огурец     огурец        11\n 2 жадина-говядина зеленый  огурец     огурец       343\n 3 жадина-говядина кислая   капуста    другое        10\n 4 жадина-говядина кошка    поросятина другое        42\n 5 жадина-говядина никто ее не ест     другое        10\n 6 жадина-говядина кусок    шоколадины шоколадина   113\n 7 жадина-говядина на пузе  барабан    барабан       14\n 8 жадина-говядина немецкий барабан    барабан       12\n 9 жадина-говядина соленый  барабан    барабан       11\n10 жадина-говядина соленый  огурец     огурец     26910\n11 жадина-говядина соленый  помидор    другое        17\n12 жадина-говядина турецкий барабан    барабан     3003\n13 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(nchar(word_3) == 7) # `!` + `=`\n\n# A tibble: 7 × 5\n  word_1          word_2   word_3  type        n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;\n1 жадина-говядина кислая   капуста другое     10\n2 жадина-говядина на пузе  барабан барабан    14\n3 жадина-говядина немецкий барабан барабан    12\n4 жадина-говядина соленый  барабан барабан    11\n5 жадина-говядина соленый  помидор другое     17\n6 жадина-говядина турецкий барабан барабан  3003\n7 жадина-говядина турецкий таракан другое     13\n\nzhadina |&gt; \n  filter(n &gt; 15,\n         n &lt; 100)\n\n# A tibble: 8 × 5\n  word_1          word_2  word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина бука    шоколадина шоколадина    44\n2 жадина-говядина дома    шоколадина шоколадина    29\n3 жадина-говядина кошка   поросятина другое        42\n4 жадина-говядина кошка   шоколадина шоколадина    18\n5 жадина-говядина простая шоколадина шоколадина    59\n6 жадина-говядина соленый помидор    другое        17\n7 жадина-говядина сухая   шоколадина шоколадина    16\n8 жадина-говядина тупая   шоколадина шоколадина    50",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функции-count-distinct-arrange",
    "href": "2_data_transformation.html#функции-count-distinct-arrange",
    "title": "2  Трансформация данных",
    "section": "2.6 Функции count(), distinct(), arrange()",
    "text": "2.6 Функции count(), distinct(), arrange()\nФункция count() очень полезна в разведочном анализе, так как позволяет посчитать сколько какое значение переменной или группы переменных встретилось в датасете. Аргумент sort позволяет дополнительно отсортировать результат от большего к меньшего.\n\nzhadina |&gt; \n  count(word_3)\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 барабан        4\n2 капуста        1\n3 не ест         1\n4 огурец         3\n5 помидор        1\n6 поросятина     1\n7 таракан        1\n8 шоколадина    13\n9 шоколадины     1\n\nzhadina |&gt; \n  count(word_3, sort = TRUE)\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 шоколадина    13\n2 барабан        4\n3 огурец         3\n4 капуста        1\n5 не ест         1\n6 помидор        1\n7 поросятина     1\n8 таракан        1\n9 шоколадины     1\n\nzhadina |&gt; \n  count(word_1, word_2, sort = TRUE)\n\n# A tibble: 21 × 3\n   word_1          word_2       n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;int&gt;\n 1 жадина-говядина соленый      3\n 2 жадина-говядина в *опе       2\n 3 жадина-говядина кошка        2\n 4 жадина-говядина турецкий     2\n 5 жадина-говядина *опа         1\n 6 жадина-говядина большая      1\n 7 жадина-говядина бука         1\n 8 жадина-говядина булка        1\n 9 жадина-говядина гнилая       1\n10 жадина-говядина дома         1\n# ℹ 11 more rows\n\n\nФункция distinct() позволяет вывести уникальное значение переменной или все уникальные комбинации значений нескольких переменных, встретившихся в датасете:\n\nzhadina |&gt; \n  distinct(word_3)\n\n# A tibble: 9 × 1\n  word_3    \n  &lt;chr&gt;     \n1 шоколадина\n2 огурец    \n3 капуста   \n4 поросятина\n5 не ест    \n6 шоколадины\n7 барабан   \n8 помидор   \n9 таракан   \n\nzhadina |&gt; \n  distinct(word_1, word_2)\n\n# A tibble: 21 × 2\n   word_1          word_2 \n   &lt;chr&gt;           &lt;chr&gt;  \n 1 жадина-говядина большая\n 2 жадина-говядина бука   \n 3 жадина-говядина булка  \n 4 жадина-говядина в *опе \n 5 жадина-говядина гнилая \n 6 жадина-говядина дома   \n 7 жадина-говядина зеленый\n 8 жадина-говядина злая   \n 9 жадина-говядина кислая \n10 жадина-говядина кошка  \n# ℹ 11 more rows\n\n\nФункция arrange() позволяет отсортировать одну или несколько переменных от меньшего к большему (если нужно наоборот — используйте функцию desc()). Числовые переменные соритруются по значения, а строковые по алфавиту (с учетом особенностей локали):\n\nzhadina |&gt; \n  count(word_3) |&gt; \n  arrange(n)\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 капуста        1\n2 не ест         1\n3 помидор        1\n4 поросятина     1\n5 таракан        1\n6 шоколадины     1\n7 огурец         3\n8 барабан        4\n9 шоколадина    13\n\nzhadina |&gt; \n  count(word_3) |&gt; \n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 шоколадина    13\n2 барабан        4\n3 огурец         3\n4 капуста        1\n5 не ест         1\n6 помидор        1\n7 поросятина     1\n8 таракан        1\n9 шоколадины     1\n\nzhadina |&gt; \n  count(word_3) |&gt; \n  arrange(-n)\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 шоколадина    13\n2 барабан        4\n3 огурец         3\n4 капуста        1\n5 не ест         1\n6 помидор        1\n7 поросятина     1\n8 таракан        1\n9 шоколадины     1\n\nzhadina |&gt; \n  count(word_3) |&gt; \n  arrange(word_3)\n\n# A tibble: 9 × 2\n  word_3         n\n  &lt;chr&gt;      &lt;int&gt;\n1 барабан        4\n2 капуста        1\n3 не ест         1\n4 огурец         3\n5 помидор        1\n6 поросятина     1\n7 таракан        1\n8 шоколадина    13\n9 шоколадины     1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функция-mutate",
    "href": "2_data_transformation.html#функция-mutate",
    "title": "2  Трансформация данных",
    "section": "2.7 Функция mutate()",
    "text": "2.7 Функция mutate()\nФункция mutate() позволяет создавать и изменять уже имеющиеся переменные:\n\nzhadina |&gt; \n  mutate(nchar = nchar(word_3),\n         nchar2 = nchar(word_3)*2)\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n nchar nchar2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941    10     20\n 2 жадина-говядина бука    шоколадина шоколадина    44    10     20\n 3 жадина-говядина булка   шоколадина шоколадина   250    10     20\n 4 жадина-говядина в *опе  огурец     огурец        11     6     12\n 5 жадина-говядина в *опе  шоколадина шоколадина  1117    10     20\n 6 жадина-говядина гнилая  шоколадина шоколадина    12    10     20\n 7 жадина-говядина дома    шоколадина шоколадина    29    10     20\n 8 жадина-говядина зеленый огурец     огурец       343     6     12\n 9 жадина-говядина злая    шоколадина шоколадина    10    10     20\n10 жадина-говядина кислая  капуста    другое        10     7     14\n# ℹ 16 more rows\n\nzhadina |&gt; \n  mutate(n = n^3)\n\n# A tibble: 26 × 5\n   word_1          word_2  word_3     type                n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина  833237621\n 2 жадина-говядина бука    шоколадина шоколадина      85184\n 3 жадина-говядина булка   шоколадина шоколадина   15625000\n 4 жадина-говядина в *опе  огурец     огурец           1331\n 5 жадина-говядина в *опе  шоколадина шоколадина 1393668613\n 6 жадина-говядина гнилая  шоколадина шоколадина       1728\n 7 жадина-говядина дома    шоколадина шоколадина      24389\n 8 жадина-говядина зеленый огурец     огурец       40353607\n 9 жадина-говядина злая    шоколадина шоколадина       1000\n10 жадина-говядина кислая  капуста    другое           1000\n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функция-group_by-summarise-и-group_by-mutate",
    "href": "2_data_transformation.html#функция-group_by-summarise-и-group_by-mutate",
    "title": "2  Трансформация данных",
    "section": "2.8 Функция group_by() |> summarise() и group_by() |> mutate()",
    "text": "2.8 Функция group_by() |&gt; summarise() и group_by() |&gt; mutate()\n\nzhadina |&gt; \n  group_by(type) |&gt; \n  summarise(mean_by_type = mean(n))\n\n# A tibble: 4 × 2\n  type       mean_by_type\n  &lt;chr&gt;             &lt;dbl&gt;\n1 барабан           760  \n2 другое             18.4\n3 огурец           9088  \n4 шоколадина        481. \n\nzhadina |&gt; \n  group_by(type) |&gt; \n  summarise(mean_by_type = mean(n),\n            median_by_type = median(n))\n\n# A tibble: 4 × 3\n  type       mean_by_type median_by_type\n  &lt;chr&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1 барабан           760             13  \n2 другое             18.4           13  \n3 огурец           9088            343  \n4 шоколадина        481.            54.5\n\nzhadina |&gt; \n  group_by(type, word_3) |&gt; \n  summarise(mean_by_type = mean(n),\n            median_by_type = median(n))\n\n`summarise()` has grouped output by 'type'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 9 × 4\n# Groups:   type [4]\n  type       word_3     mean_by_type median_by_type\n  &lt;chr&gt;      &lt;chr&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1 барабан    барабан            760              13\n2 другое     капуста             10              10\n3 другое     не ест              10              10\n4 другое     помидор             17              17\n5 другое     поросятина          42              42\n6 другое     таракан             13              13\n7 огурец     огурец            9088             343\n8 шоколадина шоколадина         509.             50\n9 шоколадина шоколадины         113             113\n\nzhadina |&gt; \n  group_by(type, word_3) |&gt; \n  mutate(mean_by_type = mean(n),\n         median_by_type = median(n))\n\n# A tibble: 26 × 7\n# Groups:   type, word_3 [9]\n   word_1          word_2  word_3     type         n mean_by_type median_by_type\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколад…   941         509.             50\n 2 жадина-говядина бука    шоколадина шоколад…    44         509.             50\n 3 жадина-говядина булка   шоколадина шоколад…   250         509.             50\n 4 жадина-говядина в *опе  огурец     огурец      11        9088             343\n 5 жадина-говядина в *опе  шоколадина шоколад…  1117         509.             50\n 6 жадина-говядина гнилая  шоколадина шоколад…    12         509.             50\n 7 жадина-говядина дома    шоколадина шоколад…    29         509.             50\n 8 жадина-говядина зеленый огурец     огурец     343        9088             343\n 9 жадина-говядина злая    шоколадина шоколад…    10         509.             50\n10 жадина-говядина кислая  капуста    другое      10          10              10\n# ℹ 16 more rows\n\nzhadina |&gt; \n  group_by(type) |&gt; \n  mutate(mean_by_type = mean(n),\n         median_by_type = median(n))\n\n# A tibble: 26 × 7\n# Groups:   type [4]\n   word_1          word_2  word_3     type         n mean_by_type median_by_type\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколад…   941        481.            54.5\n 2 жадина-говядина бука    шоколадина шоколад…    44        481.            54.5\n 3 жадина-говядина булка   шоколадина шоколад…   250        481.            54.5\n 4 жадина-говядина в *опе  огурец     огурец      11       9088            343  \n 5 жадина-говядина в *опе  шоколадина шоколад…  1117        481.            54.5\n 6 жадина-говядина гнилая  шоколадина шоколад…    12        481.            54.5\n 7 жадина-говядина дома    шоколадина шоколад…    29        481.            54.5\n 8 жадина-говядина зеленый огурец     огурец     343       9088            343  \n 9 жадина-говядина злая    шоколадина шоколад…    10        481.            54.5\n10 жадина-говядина кислая  капуста    другое      10         18.4           13  \n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функция-across",
    "href": "2_data_transformation.html#функция-across",
    "title": "2  Трансформация данных",
    "section": "2.9 Функция across()",
    "text": "2.9 Функция across()\nФункция across() позволяет применять одну и то же изменение к группе колонок, которые выбираются набором функций сходных с операциями для функции select(). Важно отметить, что трансформация обычно описывается функцией, и имя функции обычно пишут без круглых скобок.\n\nzhadina |&gt; \n  mutate(across(starts_with(\"word\"), toupper))\n\n# A tibble: 26 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 ЖАДИНА-ГОВЯДИНА БОЛЬШАЯ ШОКОЛАДИНА шоколадина   941\n 2 ЖАДИНА-ГОВЯДИНА БУКА    ШОКОЛАДИНА шоколадина    44\n 3 ЖАДИНА-ГОВЯДИНА БУЛКА   ШОКОЛАДИНА шоколадина   250\n 4 ЖАДИНА-ГОВЯДИНА В *ОПЕ  ОГУРЕЦ     огурец        11\n 5 ЖАДИНА-ГОВЯДИНА В *ОПЕ  ШОКОЛАДИНА шоколадина  1117\n 6 ЖАДИНА-ГОВЯДИНА ГНИЛАЯ  ШОКОЛАДИНА шоколадина    12\n 7 ЖАДИНА-ГОВЯДИНА ДОМА    ШОКОЛАДИНА шоколадина    29\n 8 ЖАДИНА-ГОВЯДИНА ЗЕЛЕНЫЙ ОГУРЕЦ     огурец       343\n 9 ЖАДИНА-ГОВЯДИНА ЗЛАЯ    ШОКОЛАДИНА шоколадина    10\n10 ЖАДИНА-ГОВЯДИНА КИСЛАЯ  КАПУСТА    другое        10\n# ℹ 16 more rows\n\nzhadina |&gt; \n  mutate(across(where(is.character), toupper))\n\n# A tibble: 26 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 ЖАДИНА-ГОВЯДИНА БОЛЬШАЯ ШОКОЛАДИНА ШОКОЛАДИНА   941\n 2 ЖАДИНА-ГОВЯДИНА БУКА    ШОКОЛАДИНА ШОКОЛАДИНА    44\n 3 ЖАДИНА-ГОВЯДИНА БУЛКА   ШОКОЛАДИНА ШОКОЛАДИНА   250\n 4 ЖАДИНА-ГОВЯДИНА В *ОПЕ  ОГУРЕЦ     ОГУРЕЦ        11\n 5 ЖАДИНА-ГОВЯДИНА В *ОПЕ  ШОКОЛАДИНА ШОКОЛАДИНА  1117\n 6 ЖАДИНА-ГОВЯДИНА ГНИЛАЯ  ШОКОЛАДИНА ШОКОЛАДИНА    12\n 7 ЖАДИНА-ГОВЯДИНА ДОМА    ШОКОЛАДИНА ШОКОЛАДИНА    29\n 8 ЖАДИНА-ГОВЯДИНА ЗЕЛЕНЫЙ ОГУРЕЦ     ОГУРЕЦ       343\n 9 ЖАДИНА-ГОВЯДИНА ЗЛАЯ    ШОКОЛАДИНА ШОКОЛАДИНА    10\n10 ЖАДИНА-ГОВЯДИНА КИСЛАЯ  КАПУСТА    ДРУГОЕ        10\n# ℹ 16 more rows\n\n\nФункция может так же работать в связке с функцией group_by() |&gt; summarize() и group_by() |&gt; mutate():\n\nset.seed(42)\nzhadina |&gt; \n  mutate(new_numeric_value = rnorm(26)) |&gt; \n  group_by(type) |&gt; \n  summarise(across(where(is.double), mean))\n\n# A tibble: 4 × 3\n  type            n new_numeric_value\n  &lt;chr&gt;       &lt;dbl&gt;             &lt;dbl&gt;\n1 барабан     760              0.929 \n2 другое       18.4           -0.472 \n3 огурец     9088              0.0772\n4 шоколадина  481.             0.190 \n\nset.seed(42)\nzhadina |&gt; \n  mutate(new_numeric_value = rnorm(26)) |&gt; \n  group_by(type) |&gt; \n  summarise(n = mean(n),\n            new_numeric_value = mean(new_numeric_value))\n\n# A tibble: 4 × 3\n  type            n new_numeric_value\n  &lt;chr&gt;       &lt;dbl&gt;             &lt;dbl&gt;\n1 барабан     760              0.929 \n2 другое       18.4           -0.472 \n3 огурец     9088              0.0772\n4 шоколадина  481.             0.190 \n\nzhadina |&gt; \n  mutate(new_numeric_value = rnorm(26)) |&gt; \n  group_by(type) |&gt; \n  mutate(across(where(is.double), mean))\n\n# A tibble: 26 × 6\n# Groups:   type [4]\n   word_1          word_2  word_3     type            n new_numeric_value\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;       &lt;dbl&gt;             &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина  481.            -0.0562\n 2 жадина-говядина бука    шоколадина шоколадина  481.            -0.0562\n 3 жадина-говядина булка   шоколадина шоколадина  481.            -0.0562\n 4 жадина-говядина в *опе  огурец     огурец     9088             -0.687 \n 5 жадина-говядина в *опе  шоколадина шоколадина  481.            -0.0562\n 6 жадина-говядина гнилая  шоколадина шоколадина  481.            -0.0562\n 7 жадина-говядина дома    шоколадина шоколадина  481.            -0.0562\n 8 жадина-говядина зеленый огурец     огурец     9088             -0.687 \n 9 жадина-говядина злая    шоколадина шоколадина  481.            -0.0562\n10 жадина-говядина кислая  капуста    другое       18.4           -0.851 \n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функции-семейства-pivot_...",
    "href": "2_data_transformation.html#функции-семейства-pivot_...",
    "title": "2  Трансформация данных",
    "section": "2.10 Функции семейства pivot_...()",
    "text": "2.10 Функции семейства pivot_...()\n\nindia_langauges_wide &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_india_languages.csv\")\n\nRows: 12 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): language\ndbl (4): n_L1_sp, n_L2_sp, n_L3_sp, n_all_sp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nindia_langauges_wide |&gt; \n  pivot_longer(names_to = \"L\", values_to = \"value\", n_L1_sp:n_all_sp)\n\n# A tibble: 48 × 3\n   language L            value\n   &lt;chr&gt;    &lt;chr&gt;        &lt;dbl&gt;\n 1 Hindi    n_L1_sp  422048642\n 2 Hindi    n_L2_sp   98207180\n 3 Hindi    n_L3_sp   31160696\n 4 Hindi    n_all_sp 551416518\n 5 English  n_L1_sp     226449\n 6 English  n_L2_sp   86125221\n 7 English  n_L3_sp   38993066\n 8 English  n_all_sp 125344736\n 9 Bengali  n_L1_sp   83369769\n10 Bengali  n_L2_sp    6637222\n# ℹ 38 more rows\n\nindia_langauges_wide |&gt; \n  pivot_longer(names_to = \"L\", values_to = \"value\", starts_with(\"n_\")) |&gt; \n  filter(L != \"n_all_sp\") |&gt; \n  group_by(L) |&gt; \n  summarise(sum = sum(value),\n            mean = mean(value))\n\n# A tibble: 3 × 3\n  L             sum      mean\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 n_L1_sp 914028136 76169011.\n2 n_L2_sp 241705317 20142110.\n3 n_L3_sp  83551664  6962639.\n\nindia_langauges_wide |&gt; \n  pivot_longer(names_to = \"L\", values_to = \"value\", starts_with(\"n_\")) |&gt; \n  filter(L != \"n_all_sp\") -&gt;\n  india_langauges_long\n\nindia_langauges_long |&gt; \n  pivot_wider(names_from = \"L\", values_from = \"value\")\n\n# A tibble: 12 × 4\n   language    n_L1_sp  n_L2_sp  n_L3_sp\n   &lt;chr&gt;         &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 Hindi     422048642 98207180 31160696\n 2 English      226449 86125221 38993066\n 3 Bengali    83369769  6637222  1108088\n 4 Telugu     74002856  9723626  1266019\n 5 Marathi    71936894  9546414  2701498\n 6 Tamil      60793814  4992253   956335\n 7 Urdu       51536111  6535489  1007912\n 8 Kannada    37924011 11455287  1396428\n 9 Gujarati   46091617  3476355   703989\n10 Odia       33017446  3272151   319525\n11 Malayalam  33066392   499188   195885\n12 Sanskrit      14135  1234931  3742223\n\nindia_langauges_long |&gt; \n  slice_sample(n = 30) |&gt; \n  pivot_wider(names_from = \"L\", values_from = \"value\", values_fill = 0)\n\n# A tibble: 12 × 4\n   language   n_L2_sp  n_L3_sp   n_L1_sp\n   &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 English   86125221 38993066         0\n 2 Urdu       6535489  1007912  51536111\n 3 Tamil      4992253   956335  60793814\n 4 Gujarati         0   703989  46091617\n 5 Marathi    9546414        0  71936894\n 6 Sanskrit   1234931  3742223     14135\n 7 Kannada          0  1396428  37924011\n 8 Odia             0   319525  33017446\n 9 Telugu     9723626  1266019  74002856\n10 Bengali    6637222  1108088  83369769\n11 Malayalam   499188   195885  33066392\n12 Hindi            0 31160696 422048642",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функции-семейства-bind_...",
    "href": "2_data_transformation.html#функции-семейства-bind_...",
    "title": "2  Трансформация данных",
    "section": "2.11 Функции семейства bind_...()",
    "text": "2.11 Функции семейства bind_...()\nФункции bind_rows() и bind_cols() позволяют соединять несколько таблиц. Функция bind_rows() присоединяет таблицу снизу, при этом она должна иметь столько же переменных и тип переменных должен совпадать с основной таблицей.\n\nzhadina_new &lt;- tibble(word_1 = \"жадина-говядина\",\n                      word_2 = \"пупецкий\",\n                      word_3 = \"барабан\",\n                      type = \"барабан\",\n                      n = 0)\n\nzhadina |&gt; \n  bind_rows(zhadina_new)\n\n# A tibble: 27 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  огурец     огурец        11\n 5 жадина-говядина в *опе  шоколадина шоколадина  1117\n 6 жадина-говядина гнилая  шоколадина шоколадина    12\n 7 жадина-говядина дома    шоколадина шоколадина    29\n 8 жадина-говядина зеленый огурец     огурец       343\n 9 жадина-говядина злая    шоколадина шоколадина    10\n10 жадина-говядина кислая  капуста    другое        10\n# ℹ 17 more rows\n\n\nФункция bind_cols() присоединяет таблицу справа, при этом она должна иметь столько же строчек, сколько есть в с основной таблице:\n\nzhadina_additional_columns &lt;- tibble(new_var1 = rnorm(26),\n                                     new_var2 = letters)\n\nzhadina |&gt; \n  bind_cols(zhadina_additional_columns)\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n new_var1 new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;   \n 1 жадина-говядина большая шоколадина шоколадина   941   0.464  a       \n 2 жадина-говядина бука    шоколадина шоколадина    44  -0.886  b       \n 3 жадина-говядина булка   шоколадина шоколадина   250  -1.10   c       \n 4 жадина-говядина в *опе  огурец     огурец        11   1.51   d       \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117   0.258  e       \n 6 жадина-говядина гнилая  шоколадина шоколадина    12   0.0884 f       \n 7 жадина-говядина дома    шоколадина шоколадина    29  -0.121  g       \n 8 жадина-говядина зеленый огурец     огурец       343  -1.19   h       \n 9 жадина-говядина злая    шоколадина шоколадина    10   0.612  i       \n10 жадина-говядина кислая  капуста    другое        10  -0.217  j       \n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#sec-joins",
    "href": "2_data_transformation.html#sec-joins",
    "title": "2  Трансформация данных",
    "section": "2.12 Функции семейства ..._join()",
    "text": "2.12 Функции семейства ..._join()\n\nzhadina |&gt; \n  distinct(type) |&gt; \n  mutate(our_new_var1 = rnorm(4),\n         our_new_var2 = letters[1:4]) -&gt;\n  type_new_var\n\nzhadina |&gt; \n  left_join(type_new_var)\n\nJoining with `by = join_by(type)`\n\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n our_new_var1 our_new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       \n 1 жадина-говядина большая шоколадина шоколадина   941        1.85  a           \n 2 жадина-говядина бука    шоколадина шоколадина    44        1.85  a           \n 3 жадина-говядина булка   шоколадина шоколадина   250        1.85  a           \n 4 жадина-говядина в *опе  огурец     огурец        11       -0.667 b           \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117        1.85  a           \n 6 жадина-говядина гнилая  шоколадина шоколадина    12        1.85  a           \n 7 жадина-говядина дома    шоколадина шоколадина    29        1.85  a           \n 8 жадина-говядина зеленый огурец     огурец       343       -0.667 b           \n 9 жадина-говядина злая    шоколадина шоколадина    10        1.85  a           \n10 жадина-говядина кислая  капуста    другое        10        0.106 c           \n# ℹ 16 more rows\n\nzhadina |&gt; \n  distinct(type) |&gt; \n  mutate(our_new_var1 = rnorm(4),\n         our_new_var2 = letters[1:4]) |&gt; \n  slice(-1) -&gt;\n  type_new_var2\n\nzhadina |&gt; \n  left_join(type_new_var2)\n\nJoining with `by = join_by(type)`\n\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n our_new_var1 our_new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       \n 1 жадина-говядина большая шоколадина шоколадина   941       NA     &lt;NA&gt;        \n 2 жадина-говядина бука    шоколадина шоколадина    44       NA     &lt;NA&gt;        \n 3 жадина-говядина булка   шоколадина шоколадина   250       NA     &lt;NA&gt;        \n 4 жадина-говядина в *опе  огурец     огурец        11        0.188 b           \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117       NA     &lt;NA&gt;        \n 6 жадина-говядина гнилая  шоколадина шоколадина    12       NA     &lt;NA&gt;        \n 7 жадина-говядина дома    шоколадина шоколадина    29       NA     &lt;NA&gt;        \n 8 жадина-говядина зеленый огурец     огурец       343        0.188 b           \n 9 жадина-говядина злая    шоколадина шоколадина    10       NA     &lt;NA&gt;        \n10 жадина-говядина кислая  капуста    другое        10        0.119 c           \n# ℹ 16 more rows\n\nzhadina |&gt; \n  distinct(type) |&gt; \n  mutate(our_new_var1 = rnorm(4),\n         our_new_var2 = letters[1:4]) |&gt; \n  slice(-1) |&gt; \n  bind_rows(tibble(type = \"карниз\", \n                   our_new_var1 = 0, \n                   our_new_var2 = \"R\"))-&gt;\n  type_new_var2\n\nzhadina |&gt; \n  left_join(type_new_var2) \n\nJoining with `by = join_by(type)`\n\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n our_new_var1 our_new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       \n 1 жадина-говядина большая шоколадина шоколадина   941       NA     &lt;NA&gt;        \n 2 жадина-говядина бука    шоколадина шоколадина    44       NA     &lt;NA&gt;        \n 3 жадина-говядина булка   шоколадина шоколадина   250       NA     &lt;NA&gt;        \n 4 жадина-говядина в *опе  огурец     огурец        11       -0.485 b           \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117       NA     &lt;NA&gt;        \n 6 жадина-говядина гнилая  шоколадина шоколадина    12       NA     &lt;NA&gt;        \n 7 жадина-говядина дома    шоколадина шоколадина    29       NA     &lt;NA&gt;        \n 8 жадина-говядина зеленый огурец     огурец       343       -0.485 b           \n 9 жадина-говядина злая    шоколадина шоколадина    10       NA     &lt;NA&gt;        \n10 жадина-говядина кислая  капуста    другое        10       -0.504 c           \n# ℹ 16 more rows\n\nzhadina |&gt; \n  full_join(type_new_var2)\n\nJoining with `by = join_by(type)`\n\n\n# A tibble: 27 × 7\n   word_1          word_2  word_3     type           n our_new_var1 our_new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       \n 1 жадина-говядина большая шоколадина шоколадина   941       NA     &lt;NA&gt;        \n 2 жадина-говядина бука    шоколадина шоколадина    44       NA     &lt;NA&gt;        \n 3 жадина-говядина булка   шоколадина шоколадина   250       NA     &lt;NA&gt;        \n 4 жадина-говядина в *опе  огурец     огурец        11       -0.485 b           \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117       NA     &lt;NA&gt;        \n 6 жадина-говядина гнилая  шоколадина шоколадина    12       NA     &lt;NA&gt;        \n 7 жадина-говядина дома    шоколадина шоколадина    29       NA     &lt;NA&gt;        \n 8 жадина-говядина зеленый огурец     огурец       343       -0.485 b           \n 9 жадина-говядина злая    шоколадина шоколадина    10       NA     &lt;NA&gt;        \n10 жадина-говядина кислая  капуста    другое        10       -0.504 c           \n# ℹ 17 more rows\n\nzhadina |&gt; \n  anti_join(tibble(type = \"шоколадина\")) \n\nJoining with `by = join_by(type)`\n\n\n# A tibble: 12 × 5\n   word_1          word_2   word_3     type        n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;   &lt;dbl&gt;\n 1 жадина-говядина в *опе   огурец     огурец     11\n 2 жадина-говядина зеленый  огурец     огурец    343\n 3 жадина-говядина кислая   капуста    другое     10\n 4 жадина-говядина кошка    поросятина другое     42\n 5 жадина-говядина никто ее не ест     другое     10\n 6 жадина-говядина на пузе  барабан    барабан    14\n 7 жадина-говядина немецкий барабан    барабан    12\n 8 жадина-говядина соленый  барабан    барабан    11\n 9 жадина-говядина соленый  огурец     огурец  26910\n10 жадина-говядина соленый  помидор    другое     17\n11 жадина-говядина турецкий барабан    барабан  3003\n12 жадина-говядина турецкий таракан    другое     13\n\nzhadina |&gt; \n  distinct(type) |&gt; \n  mutate(our_new_var1 = rnorm(4),\n         our_new_var2 = letters[1:4]) |&gt; \n  rename(new_type = type) -&gt;\n  type_new_var3\n\n\nzhadina |&gt; \n  left_join(type_new_var3, by = c(\"type\" = \"new_type\"))\n\n# A tibble: 26 × 7\n   word_1          word_2  word_3     type           n our_new_var1 our_new_var2\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;       \n 1 жадина-говядина большая шоколадина шоколадина   941       -0.382 a           \n 2 жадина-говядина бука    шоколадина шоколадина    44       -0.382 a           \n 3 жадина-говядина булка   шоколадина шоколадина   250       -0.382 a           \n 4 жадина-говядина в *опе  огурец     огурец        11       -0.513 b           \n 5 жадина-говядина в *опе  шоколадина шоколадина  1117       -0.382 a           \n 6 жадина-говядина гнилая  шоколадина шоколадина    12       -0.382 a           \n 7 жадина-говядина дома    шоколадина шоколадина    29       -0.382 a           \n 8 жадина-говядина зеленый огурец     огурец       343       -0.513 b           \n 9 жадина-говядина злая    шоколадина шоколадина    10       -0.382 a           \n10 жадина-говядина кислая  капуста    другое        10        2.70  c           \n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html",
    "href": "3_data_visualization.html",
    "title": "3  Визуализация данных",
    "section": "",
    "text": "3.1 Зачем визуализировать данные?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#зачем-визуализировать-данные",
    "href": "3_data_visualization.html#зачем-визуализировать-данные",
    "title": "3  Визуализация данных",
    "section": "",
    "text": "3.1.1 Квартет Анскомба\n\n\n3.1.2 Датазаурус",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#основы-ggplot2",
    "href": "3_data_visualization.html#основы-ggplot2",
    "title": "3  Визуализация данных",
    "section": "3.2 Основы ggplot2",
    "text": "3.2 Основы ggplot2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#слои-в-ggplot2",
    "href": "3_data_visualization.html#слои-в-ggplot2",
    "title": "3  Визуализация данных",
    "section": "3.3 Слои в ggplot2",
    "text": "3.3 Слои в ggplot2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#график-рассеяния",
    "href": "3_data_visualization.html#график-рассеяния",
    "title": "3  Визуализация данных",
    "section": "3.4 График рассеяния",
    "text": "3.4 График рассеяния",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#финализация-графика-функции-labs-annotate-theme",
    "href": "3_data_visualization.html#финализация-графика-функции-labs-annotate-theme",
    "title": "3  Визуализация данных",
    "section": "3.5 Финализация графика: функции labs(), annotate(), theme()",
    "text": "3.5 Финализация графика: функции labs(), annotate(), theme()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#столбчатые-диаграммы",
    "href": "3_data_visualization.html#столбчатые-диаграммы",
    "title": "3  Визуализация данных",
    "section": "3.6 Столбчатые диаграммы",
    "text": "3.6 Столбчатые диаграммы",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#факторы-пакет-forcats",
    "href": "3_data_visualization.html#факторы-пакет-forcats",
    "title": "3  Визуализация данных",
    "section": "3.7 Факторы, пакет forcats",
    "text": "3.7 Факторы, пакет forcats",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#визуализируем-распределение-функции-geom_dotplot-geom_histogram-geom_density-пакет-ggridges",
    "href": "3_data_visualization.html#визуализируем-распределение-функции-geom_dotplot-geom_histogram-geom_density-пакет-ggridges",
    "title": "3  Визуализация данных",
    "section": "3.8 Визуализируем распределение: функции geom_dotplot(), geom_histogram(), geom_density(), пакет ggridges",
    "text": "3.8 Визуализируем распределение: функции geom_dotplot(), geom_histogram(), geom_density(), пакет ggridges",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#распределение-по-категориям-функции-geom_jitter-geom_boxplot-geom_violin-пакет-ggbeeswarm",
    "href": "3_data_visualization.html#распределение-по-категориям-функции-geom_jitter-geom_boxplot-geom_violin-пакет-ggbeeswarm",
    "title": "3  Визуализация данных",
    "section": "3.9 Распределение по категориям: функции geom_jitter(), geom_boxplot(), geom_violin() пакет ggbeeswarm",
    "text": "3.9 Распределение по категориям: функции geom_jitter(), geom_boxplot(), geom_violin() пакет ggbeeswarm",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "3_data_visualization.html#фасетезация-семейство-функций-facet_...",
    "href": "3_data_visualization.html#фасетезация-семейство-функций-facet_...",
    "title": "3  Визуализация данных",
    "section": "3.10 Фасетезация: семейство функций facet_...()",
    "text": "3.10 Фасетезация: семейство функций facet_...()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Визуализация данных</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html",
    "href": "4_working_with_strings.html",
    "title": "4  Работа со строками",
    "section": "",
    "text": "4.1 Работа со строками в R\nДля работы со строками можно использовать:\ninstall.packages(\"stringi\")\nlibrary(tidyverse)\nlibrary(stringi)\nМы будем пользоваться в основном пакетами stingr и stringi, так как они в большинстве случаях удобнее. К счастью, функции этих пакетов легко отличить от остальных: функции пакет stringr всегда начинаются с str_, а функции пакета stringi — c stri_.\nСуществует cheat sheet по stringr.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#работа-со-строками-в-r",
    "href": "4_working_with_strings.html#работа-со-строками-в-r",
    "title": "4  Работа со строками",
    "section": "",
    "text": "базовый R\nпакет stringr (часть tidyverse)\nпакет stringi – отдельный пакет, так что не забудьте его установить:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#как-получить-строку",
    "href": "4_working_with_strings.html#как-получить-строку",
    "title": "4  Работа со строками",
    "section": "4.2 Как получить строку?",
    "text": "4.2 Как получить строку?\n\nследите за кавычками\n\n\n\"the quick brown fox jumps over the lazy dog\"\n\n[1] \"the quick brown fox jumps over the lazy dog\"\n\n'the quick brown fox jumps over the lazy dog'\n\n[1] \"the quick brown fox jumps over the lazy dog\"\n\n\"the quick 'brown' fox jumps over the lazy dog\"\n\n[1] \"the quick 'brown' fox jumps over the lazy dog\"\n\n'the quick \"brown\" fox jumps over the lazy dog'\n\n[1] \"the quick \\\"brown\\\" fox jumps over the lazy dog\"\n\n\"the quick \\\"brown\\\" fox jumps over the lazy dog\"\n\n[1] \"the quick \\\"brown\\\" fox jumps over the lazy dog\"\n\n\nТак как бэкслеш экранирует кавычку, если Вы хотите вставить бэкслеш в строку, придется поставить два бэкслеша.\n\n\"the quick \\\"brown\\\" \\\\ fox jumps over the lazy dog\"\n\n[1] \"the quick \\\"brown\\\" \\\\ fox jumps over the lazy dog\"\n\n\nОбычная печать RStudio может прятать происходящее, так что используйте функцию str_view(), чтобы посмотреть содержимое:\n\nstr_view(\"the quick \\\"brown\\\" \\\\ fox jumps over the lazy dog\")\n\n[1] │ the quick \"brown\" \\ fox jumps over the lazy dog\n\n\n\nпустая строка\n\n\n\"\"\n\n[1] \"\"\n\n''\n\n[1] \"\"\n\ncharacter(3)\n\n[1] \"\" \"\" \"\"\n\n\n\nпреобразование\n\n\ntypeof(4:7)\n\n[1] \"integer\"\n\nas.character(4:7)\n\n[1] \"4\" \"5\" \"6\" \"7\"\n\n\n\nвстроенные векторы\n\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nmonth.name\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\n\n\ncоздание рандомных строк\n\n\nset.seed(42)\nstri_rand_strings(n = 10, length = 5:14)\n\n [1] \"uwHpd\"          \"Wj8ehS\"         \"ivFSwy7\"        \"TYu8zw5V\"      \n [5] \"OuRpjoOg0\"      \"p0CubNR2yQ\"     \"xtdycKLOm2k\"    \"fAGVfylZqBGp\"  \n [9] \"gE28DTCi0NV0a\"  \"9MemYE55If0Cvv\"\n\n\n\nперемешивает символы внутри строки\n\n\nstri_rand_shuffle(\"любя, съешь щипцы, — вздохнёт мэр, — кайф жгуч\")\n\n[1] \",цо м,пюзгу   сл аиъ—в кжряд,ыщьчебэн х—штё фй\"\n\nstri_rand_shuffle(month.name)\n\n [1] \"aJayunr\"   \"eyrbraFu\"  \"achMr\"     \"Aplri\"     \"ayM\"       \"Jnue\"     \n [7] \"uJly\"      \"usuAgt\"    \"tpebermSe\" \"tOecrbo\"   \"oeNembvr\"  \"Dmceerbe\" \n\n\n\nпсевдорандомный текст1\n\n\nstri_rand_lipsum(nparagraphs = 2)\n\n[1] \"Lorem ipsum dolor sit amet, donec sit nunc urna sed ultricies ac pharetra orci luctus iaculis, ac tincidunt cum. Neque eu semper at sociosqu hendrerit. Eu aliquet lacus, eu hendrerit donec aliquam eros. Risus nibh, quam in sit facilisi ipsum. Amet sem sed donec sed molestie scelerisque tincidunt. Nisl donec et facilisis interdum non sed dolor purus. In ipsum dignissim torquent velit nec aliquam pellentesque. Ac, adipiscing, neque et at torquent, vestibulum ullamcorper. Ad dictumst enim velit non nulla felis habitant. Egestas placerat consectetur, dictum nostra sed nec. Erat phasellus dolor libero aliquam viverra. Vestibulum leo et. Suscipit egestas in in montes, sapien gravida? Conubia purus varius ut nec feugiat.\"\n[2] \"Risus eleifend magnis neque diam, suspendisse ullamcorper nulla adipiscing malesuada massa, nisi sociosqu velit id et. Aliquam facilisis et aenean. Parturient vel ac in convallis, massa diam nibh. Nulla interdum cursus et. Natoque amet, ut praesent. Tortor ultrices a consectetur, augue natoque class faucibus? Ut sed arcu elementum magna. Dignissim ac facilisi quis ut nisl eu, massa.\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#соединение-и-разделение-строк",
    "href": "4_working_with_strings.html#соединение-и-разделение-строк",
    "title": "4  Работа со строками",
    "section": "4.3 Соединение и разделение строк",
    "text": "4.3 Соединение и разделение строк\nСоединенить строки можно используя функцию str_c(), в которую, как и в функции с(), можно перечислять элементы через запятую:\n\ntibble(upper = rev(LETTERS), smaller = letters) |&gt;  \n  mutate(merge = str_c(upper, smaller))\n\n# A tibble: 26 × 3\n   upper smaller merge\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;\n 1 Z     a       Za   \n 2 Y     b       Yb   \n 3 X     c       Xc   \n 4 W     d       Wd   \n 5 V     e       Ve   \n 6 U     f       Uf   \n 7 T     g       Tg   \n 8 S     h       Sh   \n 9 R     i       Ri   \n10 Q     j       Qj   \n# ℹ 16 more rows\n\n\nКроме того, если хочется, можно использовать особенный разделитель, указав его в аргументе sep:\n\ntibble(upper = rev(LETTERS), smaller = letters) |&gt;  \n  mutate(merge = str_c(upper, smaller, sep = \"_\"))\n\n# A tibble: 26 × 3\n   upper smaller merge\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;\n 1 Z     a       Z_a  \n 2 Y     b       Y_b  \n 3 X     c       X_c  \n 4 W     d       W_d  \n 5 V     e       V_e  \n 6 U     f       U_f  \n 7 T     g       T_g  \n 8 S     h       S_h  \n 9 R     i       R_i  \n10 Q     j       Q_j  \n# ℹ 16 more rows\n\n\nИногда хочется составить длинные выражения, которые будут перемежаться значениями из переменных, это можно сделать при помощи функции str_glue():\n\ntibble(month_name = month.name,\n       month_abb = month.abb) |&gt; \n  mutate(long_string = str_glue(\"The month {month_name} is abbreviated as {month_abb}\"))\n\n# A tibble: 12 × 3\n   month_name month_abb long_string                              \n   &lt;chr&gt;      &lt;chr&gt;     &lt;glue&gt;                                   \n 1 January    Jan       The month January is abbreviated as Jan  \n 2 February   Feb       The month February is abbreviated as Feb \n 3 March      Mar       The month March is abbreviated as Mar    \n 4 April      Apr       The month April is abbreviated as Apr    \n 5 May        May       The month May is abbreviated as May      \n 6 June       Jun       The month June is abbreviated as Jun     \n 7 July       Jul       The month July is abbreviated as Jul     \n 8 August     Aug       The month August is abbreviated as Aug   \n 9 September  Sep       The month September is abbreviated as Sep\n10 October    Oct       The month October is abbreviated as Oct  \n11 November   Nov       The month November is abbreviated as Nov \n12 December   Dec       The month December is abbreviated as Dec \n\n\nВ фигурных скобках выступают имена переменных, которые уже есть в датасете. Если Вы хотите вставить в свое длинное выражение фигурные скобки, можно написать их два раза:\n\ntibble(month_name = month.name,\n       month_abb = month.abb) |&gt; \n  mutate(long_string = str_glue(\"The {{month}} {month_name} is abbreviated as {month_abb}\"))\n\n# A tibble: 12 × 3\n   month_name month_abb long_string                                \n   &lt;chr&gt;      &lt;chr&gt;     &lt;glue&gt;                                     \n 1 January    Jan       The {month} January is abbreviated as Jan  \n 2 February   Feb       The {month} February is abbreviated as Feb \n 3 March      Mar       The {month} March is abbreviated as Mar    \n 4 April      Apr       The {month} April is abbreviated as Apr    \n 5 May        May       The {month} May is abbreviated as May      \n 6 June       Jun       The {month} June is abbreviated as Jun     \n 7 July       Jul       The {month} July is abbreviated as Jul     \n 8 August     Aug       The {month} August is abbreviated as Aug   \n 9 September  Sep       The {month} September is abbreviated as Sep\n10 October    Oct       The {month} October is abbreviated as Oct  \n11 November   Nov       The {month} November is abbreviated as Nov \n12 December   Dec       The {month} December is abbreviated as Dec \n\n\nДля разделение строки на подстроки можно использовать функцию separate(). Это функция разносит разделенные элементы строки в соответствующие столбцы. У функции три обязательных аргумента: col — колонка, которую следует разделить, into — вектор названий новых столбец, sep — разделитель.\n\ntibble(upper = rev(LETTERS), smaller = letters) |&gt;  \n  mutate(merge = str_c(upper, smaller, sep = \"_\")) |&gt;  \n  separate(col = merge, into = c(\"column_1\", \"column_2\"), sep = \"_\")\n\n# A tibble: 26 × 4\n   upper smaller column_1 column_2\n   &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;   \n 1 Z     a       Z        a       \n 2 Y     b       Y        b       \n 3 X     c       X        c       \n 4 W     d       W        d       \n 5 V     e       V        e       \n 6 U     f       U        f       \n 7 T     g       T        g       \n 8 S     h       S        h       \n 9 R     i       R        i       \n10 Q     j       Q        j       \n# ℹ 16 more rows\n\n\nКроме того, есть инструмент str_split(), которая позволяет разбивать строки на подстроки, но возвращает список.\n\nstr_split(month.name, \"r\")\n\n[[1]]\n[1] \"Janua\" \"y\"    \n\n[[2]]\n[1] \"Feb\" \"ua\"  \"y\"  \n\n[[3]]\n[1] \"Ma\" \"ch\"\n\n[[4]]\n[1] \"Ap\" \"il\"\n\n[[5]]\n[1] \"May\"\n\n[[6]]\n[1] \"June\"\n\n[[7]]\n[1] \"July\"\n\n[[8]]\n[1] \"August\"\n\n[[9]]\n[1] \"Septembe\" \"\"        \n\n[[10]]\n[1] \"Octobe\" \"\"      \n\n[[11]]\n[1] \"Novembe\" \"\"       \n\n[[12]]\n[1] \"Decembe\" \"\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#количество-символов",
    "href": "4_working_with_strings.html#количество-символов",
    "title": "4  Работа со строками",
    "section": "4.4 Количество символов",
    "text": "4.4 Количество символов\n\n4.4.1 Подсчет количества символов\n\ntibble(mn = month.name) |&gt; \n  mutate(n_charactars = str_count(mn))\n\n# A tibble: 12 × 2\n   mn        n_charactars\n   &lt;chr&gt;            &lt;int&gt;\n 1 January              7\n 2 February             8\n 3 March                5\n 4 April                5\n 5 May                  3\n 6 June                 4\n 7 July                 4\n 8 August               6\n 9 September            9\n10 October              7\n11 November             8\n12 December             8\n\n\n\n\n4.4.2 Подгонка количества символов\nМожно обрезать строки, используя функцию str_trunc():\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_trunc(mn, 6))\n\n# A tibble: 12 × 2\n   mn        mn_new\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   Jan...\n 2 February  Feb...\n 3 March     March \n 4 April     April \n 5 May       May   \n 6 June      June  \n 7 July      July  \n 8 August    August\n 9 September Sep...\n10 October   Oct...\n11 November  Nov...\n12 December  Dec...\n\n\nМожно решить с какой стороны обрезать, используя аргумент side:\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_trunc(mn, 6, side = \"left\"))\n\n# A tibble: 12 × 2\n   mn        mn_new\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   ...ary\n 2 February  ...ary\n 3 March     March \n 4 April     April \n 5 May       May   \n 6 June      June  \n 7 July      July  \n 8 August    August\n 9 September ...ber\n10 October   ...ber\n11 November  ...ber\n12 December  ...ber\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_trunc(mn, 6, side = \"center\"))\n\n# A tibble: 12 × 2\n   mn        mn_new\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   Ja...y\n 2 February  Fe...y\n 3 March     March \n 4 April     April \n 5 May       May   \n 6 June      June  \n 7 July      July  \n 8 August    August\n 9 September Se...r\n10 October   Oc...r\n11 November  No...r\n12 December  De...r\n\n\nМожно заменить многоточие, используя аргумент ellipsis:\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_trunc(mn, 3, ellipsis = \"\"))\n\n# A tibble: 12 × 2\n   mn        mn_new\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   Jan   \n 2 February  Feb   \n 3 March     Mar   \n 4 April     Apr   \n 5 May       May   \n 6 June      Jun   \n 7 July      Jul   \n 8 August    Aug   \n 9 September Sep   \n10 October   Oct   \n11 November  Nov   \n12 December  Dec   \n\n\nМожно наоборот “раздуть” строку:\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_pad(mn, 10))\n\n# A tibble: 12 × 2\n   mn        mn_new      \n   &lt;chr&gt;     &lt;chr&gt;       \n 1 January   \"   January\"\n 2 February  \"  February\"\n 3 March     \"     March\"\n 4 April     \"     April\"\n 5 May       \"       May\"\n 6 June      \"      June\"\n 7 July      \"      July\"\n 8 August    \"    August\"\n 9 September \" September\"\n10 October   \"   October\"\n11 November  \"  November\"\n12 December  \"  December\"\n\n\nОпять же есть аргумент side:\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_pad(mn, 10,  side = \"right\"))\n\n# A tibble: 12 × 2\n   mn        mn_new      \n   &lt;chr&gt;     &lt;chr&gt;       \n 1 January   \"January   \"\n 2 February  \"February  \"\n 3 March     \"March     \"\n 4 April     \"April     \"\n 5 May       \"May       \"\n 6 June      \"June      \"\n 7 July      \"July      \"\n 8 August    \"August    \"\n 9 September \"September \"\n10 October   \"October   \"\n11 November  \"November  \"\n12 December  \"December  \"\n\n\nТакже можно выбрать, чем “раздувать строку”:\n\ntibble(mn = month.name) |&gt; \n  mutate(mn_new = str_pad(mn, 10,  pad = \".\"))\n\n# A tibble: 12 × 2\n   mn        mn_new    \n   &lt;chr&gt;     &lt;chr&gt;     \n 1 January   ...January\n 2 February  ..February\n 3 March     .....March\n 4 April     .....April\n 5 May       .......May\n 6 June      ......June\n 7 July      ......July\n 8 August    ....August\n 9 September .September\n10 October   ...October\n11 November  ..November\n12 December  ..December",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#сортировка",
    "href": "4_working_with_strings.html#сортировка",
    "title": "4  Работа со строками",
    "section": "4.5 Сортировка",
    "text": "4.5 Сортировка\nДля сортировки существует str_sort():\n\nunsorted_latin &lt;- c(\"I\", \"♥\", \"N\", \"Y\")\nstr_sort(unsorted_latin)\n\n[1] \"♥\" \"I\" \"N\" \"Y\"\n\nstr_sort(unsorted_latin, locale = \"lt\")\n\n[1] \"♥\" \"I\" \"Y\" \"N\"\n\nunsorted_cyrillic &lt;- c(\"я\", \"i\", \"ж\")\nstr_sort(unsorted_cyrillic)\n\n[1] \"i\" \"ж\" \"я\"\n\nstr_sort(unsorted_cyrillic, locale = \"ru_UA\")\n\n[1] \"ж\" \"я\" \"i\"\n\n\nСписок локалей на копмьютере можно посмотреть командой stringi::stri_locale_list(). Список всех локалей вообще приведен на этой странице. Еще полезные команды: stringi::stri_locale_info и stringi::stri_locale_set.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#поиск-подстроки",
    "href": "4_working_with_strings.html#поиск-подстроки",
    "title": "4  Работа со строками",
    "section": "4.6 Поиск подстроки",
    "text": "4.6 Поиск подстроки\nМожно использовать функцию str_detect():\n\ntibble(mn = month.name) |&gt; \n  mutate(has_r = str_detect(mn, \"r\"))\n\n# A tibble: 12 × 2\n   mn        has_r\n   &lt;chr&gt;     &lt;lgl&gt;\n 1 January   TRUE \n 2 February  TRUE \n 3 March     TRUE \n 4 April     TRUE \n 5 May       FALSE\n 6 June      FALSE\n 7 July      FALSE\n 8 August    FALSE\n 9 September TRUE \n10 October   TRUE \n11 November  TRUE \n12 December  TRUE \n\n\nКроме того, существует функция, которая возвращает индексы, а не значения TRUE/FALSE:\n\ntibble(mn = month.name) |&gt; \n  slice(str_which(month.name, \"r\"))\n\n# A tibble: 8 × 1\n  mn       \n  &lt;chr&gt;    \n1 January  \n2 February \n3 March    \n4 April    \n5 September\n6 October  \n7 November \n8 December \n\n\nТакже можно посчитать количество вхождений какой-то подстроки:\n\ntibble(mn = month.name) |&gt; \n  mutate(has_r = str_count(mn, \"r\"))\n\n# A tibble: 12 × 2\n   mn        has_r\n   &lt;chr&gt;     &lt;int&gt;\n 1 January       1\n 2 February      2\n 3 March         1\n 4 April         1\n 5 May           0\n 6 June          0\n 7 July          0\n 8 August        0\n 9 September     1\n10 October       1\n11 November      1\n12 December      1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#изменение-строк",
    "href": "4_working_with_strings.html#изменение-строк",
    "title": "4  Работа со строками",
    "section": "4.7 Изменение строк",
    "text": "4.7 Изменение строк\n\n4.7.1 Изменение регистра\n\nlatin &lt;- \"tHe QuIcK BrOwN fOx JuMpS OvEr ThE lAzY dOg\"\ncyrillic &lt;- \"лЮбЯ, сЪеШь ЩиПцЫ, — вЗдОхНёТ мЭр, — кАйФ жГуЧ\"\nstr_to_upper(latin)\n\n[1] \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\"\n\nstr_to_lower(cyrillic)\n\n[1] \"любя, съешь щипцы, — вздохнёт мэр, — кайф жгуч\"\n\nstr_to_title(latin)\n\n[1] \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\nstr_to_sentence(latin)\n\n[1] \"The quick brown fox jumps over the lazy dog\"\n\n\n\n\n4.7.2 Выделение подстроки\nПодстроку в строке можно выделить двумя способами: по индексам функцией str_sub(), и по подстроке функцией str_png().\n\ntibble(mn = month.name) |&gt; \n  mutate(mutate = str_sub(mn, start = 1, end = 2))\n\n# A tibble: 12 × 2\n   mn        mutate\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   Ja    \n 2 February  Fe    \n 3 March     Ma    \n 4 April     Ap    \n 5 May       Ma    \n 6 June      Ju    \n 7 July      Ju    \n 8 August    Au    \n 9 September Se    \n10 October   Oc    \n11 November  No    \n12 December  De    \n\n\n\ntibble(mn = month.name) |&gt; \n  mutate(mutate = str_extract(mn, \"r\"))\n\n# A tibble: 12 × 2\n   mn        mutate\n   &lt;chr&gt;     &lt;chr&gt; \n 1 January   r     \n 2 February  r     \n 3 March     r     \n 4 April     r     \n 5 May       &lt;NA&gt;  \n 6 June      &lt;NA&gt;  \n 7 July      &lt;NA&gt;  \n 8 August    &lt;NA&gt;  \n 9 September r     \n10 October   r     \n11 November  r     \n12 December  r     \n\n\nПо умолчанию функция str_extract() возвращает первое вхождение подстроки, соответствующей шаблону. Также существует функция str_extract_all(), которая возвращает все вхождения подстрок, соответствующих шаблону, однако возвращает объект типа список.\n\nstr_extract_all(month.name, \"r\")\n\n[[1]]\n[1] \"r\"\n\n[[2]]\n[1] \"r\" \"r\"\n\n[[3]]\n[1] \"r\"\n\n[[4]]\n[1] \"r\"\n\n[[5]]\ncharacter(0)\n\n[[6]]\ncharacter(0)\n\n[[7]]\ncharacter(0)\n\n[[8]]\ncharacter(0)\n\n[[9]]\n[1] \"r\"\n\n[[10]]\n[1] \"r\"\n\n[[11]]\n[1] \"r\"\n\n[[12]]\n[1] \"r\"\n\n\n\n\n4.7.3 Замена подстроки\nСуществует функция str_replace(), которая позволяет заменить одну подстроку в строке на другую:\n\ntibble(mn = month.name) |&gt; \n  mutate(mutate = str_replace(mn, \"r\", \"R\"))\n\n# A tibble: 12 × 2\n   mn        mutate   \n   &lt;chr&gt;     &lt;chr&gt;    \n 1 January   JanuaRy  \n 2 February  FebRuary \n 3 March     MaRch    \n 4 April     ApRil    \n 5 May       May      \n 6 June      June     \n 7 July      July     \n 8 August    August   \n 9 September SeptembeR\n10 October   OctobeR  \n11 November  NovembeR \n12 December  DecembeR \n\n\nКак и другие функции str_replace() делает лишь одну замену, чтобы заменить все вхождения подстроки следует использовать функцию str_replace_all():\n\ntibble(mn = month.name) |&gt; \n  mutate(mutate = str_replace_all(mn, \"r\", \"R\"))\n\n# A tibble: 12 × 2\n   mn        mutate   \n   &lt;chr&gt;     &lt;chr&gt;    \n 1 January   JanuaRy  \n 2 February  FebRuaRy \n 3 March     MaRch    \n 4 April     ApRil    \n 5 May       May      \n 6 June      June     \n 7 July      July     \n 8 August    August   \n 9 September SeptembeR\n10 October   OctobeR  \n11 November  NovembeR \n12 December  DecembeR \n\n\n\n\n4.7.4 Удаление подстроки\nДля удаления подстроки на основе шаблона, используется функция str_remove() и str_remove_all()\n\ntibble(month.name) |&gt; \n  mutate(mutate = str_remove(month.name, \"r\"))\n\n# A tibble: 12 × 2\n   month.name mutate  \n   &lt;chr&gt;      &lt;chr&gt;   \n 1 January    Januay  \n 2 February   Febuary \n 3 March      Mach    \n 4 April      Apil    \n 5 May        May     \n 6 June       June    \n 7 July       July    \n 8 August     August  \n 9 September  Septembe\n10 October    Octobe  \n11 November   Novembe \n12 December   Decembe \n\ntibble(month.name) |&gt; \n  mutate(mutate = str_remove_all(month.name, \"r\"))\n\n# A tibble: 12 × 2\n   month.name mutate  \n   &lt;chr&gt;      &lt;chr&gt;   \n 1 January    Januay  \n 2 February   Febuay  \n 3 March      Mach    \n 4 April      Apil    \n 5 May        May     \n 6 June       June    \n 7 July       July    \n 8 August     August  \n 9 September  Septembe\n10 October    Octobe  \n11 November   Novembe \n12 December   Decembe \n\n\n\n\n4.7.5 Транслитерация строк\nВ пакете stringi сууществует достаточно много методов транслитераций строк, которые можно вывести командой stri_trans_list(). Вот пример использования некоторых из них:\n\nstri_trans_general(\"stringi\", \"latin-cyrillic\")\n\n[1] \"стринги\"\n\nstri_trans_general(\"сырники\", \"cyrillic-latin\")\n\n[1] \"syrniki\"\n\nstri_trans_general(\"stringi\", \"latin-greek\")\n\n[1] \"στριγγι\"\n\nstri_trans_general(\"stringi\", \"latin-armenian\")\n\n[1] \"ստրինգի\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#sec-regex",
    "href": "4_working_with_strings.html#sec-regex",
    "title": "4  Работа со строками",
    "section": "4.8 Регулярные выражения",
    "text": "4.8 Регулярные выражения\nБольшинство функций из раздела об операциях над векторами (str_detect(), str_extract(), str_remove() и т. п.) имеют следующую структуру:\n\nстрока, с которой работает функция\nобразец (pattern)\n\nДальше мы будем использовать функцию str_view(), которая позволяет показывать, выделенное образцом в исходной строке.\n\nstr_view(\"Я всегда путаю с и c\", \"c\") # я ищу латинскую c\n\n[1] │ Я всегда путаю с и &lt;c&gt;\n\n\n\n4.8.1 Экранирование метасимволов\n\na &lt;- \"Всем известно, что 4$\\\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]\"\nstr_view(a, \"$\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]&lt;&gt;\n\nstr_view(a, \"\\\\$\")\n\n[1] │ Всем известно, что 4&lt;$&gt;\\2 + 3&lt;$&gt; * 5 = 17&lt;$&gt;? Да? Ну хорошо (а то я не был уверен). [|}^{|]\n\nstr_view(a, \"\\\\.\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен)&lt;.&gt; [|}^{|]\n\nstr_view(a, \"\\\\*\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ &lt;*&gt; 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]\n\nstr_view(a, \"\\\\+\")\n\n[1] │ Всем известно, что 4$\\2 &lt;+&gt; 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]\n\nstr_view(a, \"\\\\?\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$&lt;?&gt; Да&lt;?&gt; Ну хорошо (а то я не был уверен). [|}^{|]\n\nstr_view(a, \"\\\\(\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо &lt;(&gt;а то я не был уверен). [|}^{|]\n\nstr_view(a, \"\\\\)\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен&lt;)&gt;. [|}^{|]\n\nstr_view(a, \"\\\\|\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [&lt;|&gt;}^{&lt;|&gt;]\n\nstr_view(a, \"\\\\^\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}&lt;^&gt;{|]\n\nstr_view(a, \"\\\\[\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). &lt;[&gt;|}^{|]\n\nstr_view(a, \"\\\\]\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|&lt;]&gt;\n\nstr_view(a, \"\\\\{\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^&lt;{&gt;|]\n\nstr_view(a, \"\\\\}\")\n\n[1] │ Всем известно, что 4$\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|&lt;}&gt;^{|]\n\nstr_view(a, \"\\\\\\\\\")\n\n[1] │ Всем известно, что 4$&lt;\\&gt;2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]\n\n\n\n\n4.8.2 Классы знаков\n\n\\\\d – цифры. \\\\D – не цифры.\n\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\d\")\n\n[1] │ два &lt;1&gt;&lt;5&gt; &lt;4&gt;&lt;2&gt;. &lt;4&gt;&lt;2&gt; &lt;1&gt;&lt;5&gt;. &lt;3&gt;&lt;7&gt; &lt;0&gt;&lt;8&gt; &lt;5&gt;. &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt;!\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\D\")\n\n[1] │ &lt;д&gt;&lt;в&gt;&lt;а&gt;&lt; &gt;15&lt; &gt;42&lt;.&gt;&lt; &gt;42&lt; &gt;15&lt;.&gt;&lt; &gt;37&lt; &gt;08&lt; &gt;5&lt;.&gt;&lt; &gt;20&lt; &gt;20&lt; &gt;20&lt;!&gt;\n\n\n\n\\\\s – пробелы. \\\\S – не пробелы.\n\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\s\")\n\n[1] │ два&lt; &gt;15&lt; &gt;42.&lt; &gt;42&lt; &gt;15.&lt; &gt;37&lt; &gt;08&lt; &gt;5.&lt; &gt;20&lt; &gt;20&lt; &gt;20!\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\S\")\n\n[1] │ &lt;д&gt;&lt;в&gt;&lt;а&gt; &lt;1&gt;&lt;5&gt; &lt;4&gt;&lt;2&gt;&lt;.&gt; &lt;4&gt;&lt;2&gt; &lt;1&gt;&lt;5&gt;&lt;.&gt; &lt;3&gt;&lt;7&gt; &lt;0&gt;&lt;8&gt; &lt;5&gt;&lt;.&gt; &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt;&lt;!&gt;\n\n\n\n\\\\w – не пробелы и не знаки препинания. \\\\W – пробелы и знаки препинания.\n\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\w\")\n\n[1] │ &lt;д&gt;&lt;в&gt;&lt;а&gt; &lt;1&gt;&lt;5&gt; &lt;4&gt;&lt;2&gt;. &lt;4&gt;&lt;2&gt; &lt;1&gt;&lt;5&gt;. &lt;3&gt;&lt;7&gt; &lt;0&gt;&lt;8&gt; &lt;5&gt;. &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt;!\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"\\\\W\")\n\n[1] │ два&lt; &gt;15&lt; &gt;42&lt;.&gt;&lt; &gt;42&lt; &gt;15&lt;.&gt;&lt; &gt;37&lt; &gt;08&lt; &gt;5&lt;.&gt;&lt; &gt;20&lt; &gt;20&lt; &gt;20&lt;!&gt;\n\n\n\nпроизвольная группа символов и обратная к ней\n\n\nstr_view(\"Умей мечтать, не став рабом мечтанья\", \"[оауиыэёеяю]\")\n\n[1] │ Ум&lt;е&gt;й м&lt;е&gt;чт&lt;а&gt;ть, н&lt;е&gt; ст&lt;а&gt;в р&lt;а&gt;б&lt;о&gt;м м&lt;е&gt;чт&lt;а&gt;нь&lt;я&gt;\n\nstr_view(\"И мыслить, мысли не обожествив\", \"[^оауиыэёеяю]\")\n\n[1] │ &lt;И&gt;&lt; &gt;&lt;м&gt;ы&lt;с&gt;&lt;л&gt;и&lt;т&gt;&lt;ь&gt;&lt;,&gt;&lt; &gt;&lt;м&gt;ы&lt;с&gt;&lt;л&gt;и&lt; &gt;&lt;н&gt;е&lt; &gt;о&lt;б&gt;о&lt;ж&gt;е&lt;с&gt;&lt;т&gt;&lt;в&gt;и&lt;в&gt;\n\n\n\nвстроенные группы символов\n\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"[0-9]\")\n\n[1] │ два &lt;1&gt;&lt;5&gt; &lt;4&gt;&lt;2&gt;. &lt;4&gt;&lt;2&gt; &lt;1&gt;&lt;5&gt;. &lt;3&gt;&lt;7&gt; &lt;0&gt;&lt;8&gt; &lt;5&gt;. &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt; &lt;2&gt;&lt;0&gt;!\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"[а-я]\")\n\n[1] │ К&lt;а&gt;&lt;р&gt;&lt;л&gt; &lt;у&gt; К&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;ы&gt; &lt;у&gt;&lt;к&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt; &lt;к&gt;&lt;о&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt;&lt;л&gt;&lt;ы&gt;, &lt;а&gt; К&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;а&gt; &lt;у&gt; К&lt;а&gt;&lt;р&gt;&lt;л&gt;&lt;а&gt; &lt;у&gt;&lt;к&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt;&lt;а&gt; &lt;к&gt;&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;н&gt;&lt;е&gt;&lt;т&gt;\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"[А-Я]\")\n\n[1] │ &lt;К&gt;арл у &lt;К&gt;лары украл кораллы, а &lt;К&gt;лара у &lt;К&gt;арла украла кларнет\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"[А-я]\")\n\n[1] │ &lt;К&gt;&lt;а&gt;&lt;р&gt;&lt;л&gt; &lt;у&gt; &lt;К&gt;&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;ы&gt; &lt;у&gt;&lt;к&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt; &lt;к&gt;&lt;о&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt;&lt;л&gt;&lt;ы&gt;, &lt;а&gt; &lt;К&gt;&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;а&gt; &lt;у&gt; &lt;К&gt;&lt;а&gt;&lt;р&gt;&lt;л&gt;&lt;а&gt; &lt;у&gt;&lt;к&gt;&lt;р&gt;&lt;а&gt;&lt;л&gt;&lt;а&gt; &lt;к&gt;&lt;л&gt;&lt;а&gt;&lt;р&gt;&lt;н&gt;&lt;е&gt;&lt;т&gt;\n\nstr_view(\"The quick brown Fox jumps over the lazy Dog\", \"[a-z]\")\n\n[1] │ T&lt;h&gt;&lt;e&gt; &lt;q&gt;&lt;u&gt;&lt;i&gt;&lt;c&gt;&lt;k&gt; &lt;b&gt;&lt;r&gt;&lt;o&gt;&lt;w&gt;&lt;n&gt; F&lt;o&gt;&lt;x&gt; &lt;j&gt;&lt;u&gt;&lt;m&gt;&lt;p&gt;&lt;s&gt; &lt;o&gt;&lt;v&gt;&lt;e&gt;&lt;r&gt; &lt;t&gt;&lt;h&gt;&lt;e&gt; &lt;l&gt;&lt;a&gt;&lt;z&gt;&lt;y&gt; D&lt;o&gt;&lt;g&gt;\n\nstr_view(\"два 15 42. 42 15. 37 08 5. 20 20 20!\", \"[^0-9]\")\n\n[1] │ &lt;д&gt;&lt;в&gt;&lt;а&gt;&lt; &gt;15&lt; &gt;42&lt;.&gt;&lt; &gt;42&lt; &gt;15&lt;.&gt;&lt; &gt;37&lt; &gt;08&lt; &gt;5&lt;.&gt;&lt; &gt;20&lt; &gt;20&lt; &gt;20&lt;!&gt;\n\n\n\nвыбор из нескольких групп\n\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"лар|рал|арл\")\n\n[1] │ К&lt;арл&gt; у К&lt;лар&gt;ы ук&lt;рал&gt; ко&lt;рал&gt;лы, а К&lt;лар&gt;а у К&lt;арл&gt;а ук&lt;рал&gt;а к&lt;лар&gt;нет\n\n\n\nпроизвольный символ\n\n\nstr_view(\"Везет Сенька Саньку с Сонькой на санках. Санки скок, Сеньку с ног, Соньку в лоб, все — в сугроб\", \"[Сс].н\")\n\n[1] │ Везет &lt;Сен&gt;ька &lt;Сан&gt;ьку с &lt;Сон&gt;ькой на &lt;сан&gt;ках. &lt;Сан&gt;ки скок, &lt;Сен&gt;ьку &lt;с н&gt;ог, &lt;Сон&gt;ьку в лоб, все — в сугроб\n\n\n\nзнак начала и конца строки\n\n\nstr_view(\"от топота копыт пыль по полю летит.\", \"^о\")\n\n[1] │ &lt;о&gt;т топота копыт пыль по полю летит.\n\nstr_view(\"У ежа — ежата, у ужа — ужата\", \"жата$\")\n\n[1] │ У ежа — ежата, у ужа — у&lt;жата&gt;\n\n\n\nесть еще другие группы и другие обозначения уже приведенных групп, см. ?regex\n\n\n\n4.8.3 Квантификация\n\n? — ноль или один раз\n\n\nstr_view(\"хорошее длинношеее животное\", \"еее?\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;еее&gt; животное\n\n\n\n* — ноль и более раз\n\n\nstr_view(\"хорошее длинношеее животное\", \"ее*\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;еее&gt; животно&lt;е&gt;\n\n\n\n+ — один и более раз\n\n\nstr_view(\"хорошее длинношеее животное\", \"е+\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;еее&gt; животно&lt;е&gt;\n\n\n\n{n} — n раз\n\n\nstr_view(\"хорошее длинношеее животное\", \"е{2}\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;ее&gt;е животное\n\n\n\n{n,} — n раз и более\n\n\nstr_view(\"хорошее длинношеее животное\", \"е{1,}\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;еее&gt; животно&lt;е&gt;\n\n\n\n{n,m} — от n до m. Отсутствие пробела важно: {1,2} — правильно, {1,␣2} — неправильно.\n\n\nstr_view(\"хорошее длинношеее животное\", \"е{2,3}\")\n\n[1] │ хорош&lt;ее&gt; длиннош&lt;еее&gt; животное\n\n\n\nгруппировка символов\n\n\nstr_view(\"Пушкиновед, Лермонтовед, Лермонтововед\", \"(ов)+\")\n\n[1] │ Пушкин&lt;ов&gt;ед, Лермонт&lt;ов&gt;ед, Лермонт&lt;овов&gt;ед\n\nstr_view(\"беловатый, розоватый, розововатый\", \"(ов)+\")\n\n[1] │ бел&lt;ов&gt;атый, роз&lt;ов&gt;атый, роз&lt;овов&gt;атый\n\n\n\nжадный vs. нежадный алоритмы\n\n\nstr_view(\"Пушкиновед, Лермонтовед, Лермонтововед\", \"в.*ед\")\n\n[1] │ Пушкино&lt;вед, Лермонтовед, Лермонтововед&gt;\n\nstr_view(\"Пушкиновед, Лермонтовед, Лермонтововед\", \"в.*?ед\")\n\n[1] │ Пушкино&lt;вед&gt;, Лермонто&lt;вед&gt;, Лермонто&lt;вовед&gt;\n\n\n\n\n4.8.4 Позиционная проверка (look arounds)\nПозиционная проверка – выглядит достаточно непоследовательно даже в свете остальных регулярных выражений.\nДавайте найдем все а перед р:\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"а(?=р)\")\n\n[1] │ К&lt;а&gt;рл у Кл&lt;а&gt;ры украл кораллы, а Кл&lt;а&gt;ра у К&lt;а&gt;рла украла кл&lt;а&gt;рнет\n\n\nА теперь все а перед р или л:\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"а(?=[рл])\")\n\n[1] │ К&lt;а&gt;рл у Кл&lt;а&gt;ры укр&lt;а&gt;л кор&lt;а&gt;ллы, а Кл&lt;а&gt;ра у К&lt;а&gt;рла укр&lt;а&gt;ла кл&lt;а&gt;рнет\n\n\nДавайте найдем все а после р\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"(?&lt;=р)а\")\n\n[1] │ Карл у Клары укр&lt;а&gt;л кор&lt;а&gt;ллы, а Клар&lt;а&gt; у Карла укр&lt;а&gt;ла кларнет\n\n\nА теперь все а после р или л:\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"(?&lt;=[рл])а\")\n\n[1] │ Карл у Кл&lt;а&gt;ры укр&lt;а&gt;л кор&lt;а&gt;ллы, а Кл&lt;а&gt;р&lt;а&gt; у Карл&lt;а&gt; укр&lt;а&gt;л&lt;а&gt; кл&lt;а&gt;рнет\n\n\nТакже у этих выражений есть формы с отрицанием. Давайте найдем все р не перед а:\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"р(?!а)\")\n\n[1] │ Ка&lt;р&gt;л у Кла&lt;р&gt;ы украл кораллы, а Клара у Ка&lt;р&gt;ла украла кла&lt;р&gt;нет\n\n\nА теперь все р не после а:\n\nstr_view(\"Карл у Клары украл кораллы, а Клара у Карла украла кларнет\", \"(?&lt;!а)р\")\n\n[1] │ Карл у Клары ук&lt;р&gt;ал ко&lt;р&gt;аллы, а Клара у Карла ук&lt;р&gt;ала кларнет\n\n\nЗапомнить с ходу это достаточно сложно, так что подсматривайте сюда:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "4_working_with_strings.html#footnotes",
    "href": "4_working_with_strings.html#footnotes",
    "title": "4  Работа со строками",
    "section": "",
    "text": "Lorem ipsum — классический текст-заполнитель на основе трактата Марка Туллия Цицерона “О пределах добра и зла”. Его используют, чтобы посмотреть, как страница смотрится, когда заполнена текстом↩︎",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Работа со строками</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html",
    "href": "5_working_with_texts.html",
    "title": "5  Работа с текстами",
    "section": "",
    "text": "5.1 Загрузка текстов в R\nlibrary(tidyverse)\nВ пакете readr (входит в tidyverse) для чтения текста есть функция read_lines(). В качестве первой переменной может выступать путь к файлу на компьютере или интернет ссылка:\nalices_adventures_in_wonderland &lt;- read_lines(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_alices_adventures_in_wonderland.txt\")\nhead(alices_adventures_in_wonderland, 20)\n\n [1] \"The Project Gutenberg eBook of Alice's Adventures in Wonderland\"         \n [2] \"    \"                                                                    \n [3] \"This ebook is for the use of anyone anywhere in the United States and\"   \n [4] \"most other parts of the world at no cost and with almost no restrictions\"\n [5] \"whatsoever. You may copy it, give it away or re-use it under the terms\"  \n [6] \"of the Project Gutenberg License included with this ebook or online\"     \n [7] \"at www.gutenberg.org. If you are not located in the United States,\"      \n [8] \"you will have to check the laws of the country where you are located\"    \n [9] \"before using this eBook.\"                                                \n[10] \"\"                                                                        \n[11] \"Title: Alice's Adventures in Wonderland\"                                 \n[12] \"\"                                                                        \n[13] \"\"                                                                        \n[14] \"Author: Lewis Carroll\"                                                   \n[15] \"\"                                                                        \n[16] \"Release date: June 27, 2008 [eBook #11]\"                                 \n[17] \"                Most recently updated: March 30, 2021\"                   \n[18] \"\"                                                                        \n[19] \"Language: English\"                                                       \n[20] \"\"\nВ большинстве случаев, тексты получится считать, однако иногда при работе со старыми архивами могут возникнуть проблемы с кодировками, например, все тексты в старейшей интернет-библиотеке на русском языке — библиотеке Максима Машкова (lib.ru) — записаны в KOI8-R:\nread_lines(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_the_captains_daughter_koi8r.txt\",\n           n_max = 15)\n\n [1] \" \\xe1\\xcc\\xc5\\xcb\\xd3\\xc1\\xce\\xc4\\xd2 \\xf3\\xc5\\xd2\\xc7\\xc5\\xc5\\xd7\\xc9\\xde \\xf0\\xd5\\xdb\\xcb\\xc9\\xce. \\xeb\\xc1\\xd0\\xc9\\xd4\\xc1\\xce\\xd3\\xcb\\xc1\\xd1 \\xc4\\xcf\\xde\\xcb\\xc1\"\n [2] \"\"                                                                                                                                                                      \n [3] \" ---------------------------------------------------------------\"                                                                                                      \n [4] \" OCR: \\xef\\xcc\\xc5\\xc7 \\xeb\\xcf\\xcc\\xc5\\xd3\\xce\\xc9\\xcb\\xcf\\xd7\"                                                                                                       \n [5] \" Origin: http://www.magister.msk.ru/library/pushkin/pushkin.htm ? http://www.magister.msk.ru/library/pushkin/pushkin.htm\"                                              \n [6] \" ---------------------------------------------------------------\"                                                                                                      \n [7] \"\"                                                                                                                                                                      \n [8] \" \\xe2\\xc5\\xd2\\xc5\\xc7\\xc9 \\xde\\xc5\\xd3\\xd4\\xd8 \\xd3\\xcd\\xcf\\xcc\\xcf\\xc4\\xd5.\"                                                                                          \n [9] \" \\xf0\\xcf\\xd3\\xcc\\xcf\\xd7\\xc9\\xc3\\xc1\"                                                                                                                                 \n[10] \"\"                                                                                                                                                                      \n[11] \"\"                                                                                                                                                                      \n[12] \"\"                                                                                                                                                                      \n[13] \" \\xe7\\xec\\xe1\\xf7\\xe1 I. \\xf3\\xe5\\xf2\\xf6\\xe1\\xee\\xf4 \\xe7\\xf7\\xe1\\xf2\\xe4\\xe9\\xe9.\"                                                                                   \n[14] \"\"                                                                                                                                                                      \n[15] \"\"\nВ функциях пакета readr (т. е. не только read_lines(), но и в функциях read_csv(), read_tsv() и т. п.) есть аргумент locale, который позволяет эксплицитно указать кодировку, а при считывании происходит процесс конвертации в стандартный для многих операционных систем UTF-8. Для текстов на русском языке важны следующие кодировки\nread_lines(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_the_captains_daughter_koi8r.txt\",\n           locale = locale(encoding = \"KOI8-R\"), \n           n_max = 15)\n\n [1] \" Александр Сергеевич Пушкин. Капитанская дочка\"                                                                          \n [2] \"\"                                                                                                                        \n [3] \" ---------------------------------------------------------------\"                                                        \n [4] \" OCR: Олег Колесников\"                                                                                                   \n [5] \" Origin: http://www.magister.msk.ru/library/pushkin/pushkin.htm ? http://www.magister.msk.ru/library/pushkin/pushkin.htm\"\n [6] \" ---------------------------------------------------------------\"                                                        \n [7] \"\"                                                                                                                        \n [8] \" Береги честь смолоду.\"                                                                                                  \n [9] \" Пословица\"                                                                                                              \n[10] \"\"                                                                                                                        \n[11] \"\"                                                                                                                        \n[12] \"\"                                                                                                                        \n[13] \" ГЛАВА I. СЕРЖАНТ ГВАРДИИ.\"                                                                                              \n[14] \"\"                                                                                                                        \n[15] \"\"                                                                                                                        \n\nread_lines(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_the_captains_daughter_cp1251.txt\",\n           locale = locale(encoding = \"CP1251\"),\n           n_max = 15)\n\n [1] \" Александр Сергеевич Пушкин. Капитанская дочка\"                                                                          \n [2] \"\"                                                                                                                        \n [3] \" ---------------------------------------------------------------\"                                                        \n [4] \" OCR: Олег Колесников\"                                                                                                   \n [5] \" Origin: http://www.magister.msk.ru/library/pushkin/pushkin.htm ? http://www.magister.msk.ru/library/pushkin/pushkin.htm\"\n [6] \" ---------------------------------------------------------------\"                                                        \n [7] \"\"                                                                                                                        \n [8] \" Береги честь смолоду.\"                                                                                                  \n [9] \" Пословица\"                                                                                                              \n[10] \"\"                                                                                                                        \n[11] \"\"                                                                                                                        \n[12] \"\"                                                                                                                        \n[13] \" ГЛАВА I. СЕРЖАНТ ГВАРДИИ.\"                                                                                              \n[14] \"\"                                                                                                                        \n[15] \"\"\nДля просмотра и изменения кодировки внутри R следует использовать функцию Encoding():\nx &lt;- \"fa\\xE7ile\"\nx\n\n[1] \"fa\\xe7ile\"\n\nEncoding(x)\n\n[1] \"unknown\"\nТеперь можем использовать функцию присваивания:\nEncoding(x) &lt;- \"latin1\"\nx\n\n[1] \"façile\"\n\nEncoding(x)\n\n[1] \"latin1\"\nЕсли необходимо преобразовать из одной кодировки в другую, следует использовать функцию iconv():\nx &lt;- iconv(x, \"latin1\", \"UTF-8\")\nEncoding(x)\n\n[1] \"UTF-8\"\n\nx\n\n[1] \"façile\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#sec-encoding",
    "href": "5_working_with_texts.html#sec-encoding",
    "title": "5  Работа с текстами",
    "section": "",
    "text": "KOI8-R, а для украинского языка — KOI8-U;\nCP1251 (также известная под названием Windows-1251) покрывает и другие кириллические письменности такие как украинский, белорусский, болгарский, сербский, македонский и другие.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#библиотеки-текстов",
    "href": "5_working_with_texts.html#библиотеки-текстов",
    "title": "5  Работа с текстами",
    "section": "5.2 Библиотеки текстов",
    "text": "5.2 Библиотеки текстов\n\n5.2.1 Пакет gutenbergr\nПакет gutenbergr является API для очень старого проекта Gutenberg.\n\nlibrary(gutenbergr)\n\nВсе самое важное в пакете хранится во встроенном датасете gutenberg_metadata — аналоге:\n\nstr(gutenberg_metadata)\n\ntibble [72,569 × 8] (S3: tbl_df/tbl/data.frame)\n $ gutenberg_id       : int [1:72569] 1 2 3 4 5 6 7 8 9 10 ...\n $ title              : chr [1:72569] \"The Declaration of Independence of the United States of America\" \"The United States Bill of Rights\\r\\nThe Ten Original Amendments to the Constitution of the United States\" \"John F. Kennedy's Inaugural Address\" \"Lincoln's Gettysburg Address\\r\\nGiven November 19, 1863 on the battlefield near Gettysburg, Pennsylvania, USA\" ...\n $ author             : chr [1:72569] \"Jefferson, Thomas\" \"United States\" \"Kennedy, John F. (John Fitzgerald)\" \"Lincoln, Abraham\" ...\n $ gutenberg_author_id: int [1:72569] 1638 1 1666 3 1 4 NA 3 3 NA ...\n $ language           : chr [1:72569] \"en\" \"en\" \"en\" \"en\" ...\n $ gutenberg_bookshelf: chr [1:72569] \"Politics/American Revolutionary War/United States Law\" \"Politics/American Revolutionary War/United States Law\" \"\" \"US Civil War\" ...\n $ rights             : chr [1:72569] \"Public domain in the USA.\" \"Public domain in the USA.\" \"Public domain in the USA.\" \"Public domain in the USA.\" ...\n $ has_text           : logi [1:72569] TRUE TRUE TRUE TRUE TRUE TRUE ...\n - attr(*, \"date_updated\")= Date[1:1], format: \"2022-12-19\"\n\n\nНапример, сейчас мы можем понять, сколько книг на разных языках можно скачать из проекта:\n\ngutenberg_metadata |&gt; \n  count(language, sort = TRUE)\n\n# A tibble: 112 × 2\n   language     n\n   &lt;chr&gt;    &lt;int&gt;\n 1 en       58568\n 2 fr        3606\n 3 fi        2571\n 4 de        2142\n 5 nl        1041\n 6 it         939\n 7 es         836\n 8 pt         647\n 9 hu         497\n10 zh         443\n# ℹ 102 more rows\n\n\nКак видно, в основном это тексты на английском. Сколько авторов в датасете?\n\ngutenberg_metadata |&gt; \n  count(author, sort = TRUE)\n\n# A tibble: 23,865 × 2\n   author                                  n\n   &lt;chr&gt;                               &lt;int&gt;\n 1 Various                              3804\n 2 &lt;NA&gt;                                 2586\n 3 Anonymous                             877\n 4 Shakespeare, William                  332\n 5 Twain, Mark                           245\n 6 Lytton, Edward Bulwer Lytton, Baron   226\n 7 Dickens, Charles                      189\n 8 Ebers, Georg                          175\n 9 Verne, Jules                          174\n10 Balzac, Honoré de                     153\n# ℹ 23,855 more rows\n\n\nСколько произведений Джейн Остин (не перепутайте с другими Остин) есть в датасете?\n\ngutenberg_metadata |&gt; \n  filter(author == \"Austen, Jane\") |&gt; \n  distinct(gutenberg_id, title)\n\n# A tibble: 31 × 2\n   gutenberg_id title                    \n          &lt;int&gt; &lt;chr&gt;                    \n 1          105 Persuasion               \n 2          121 Northanger Abbey         \n 3          141 Mansfield Park           \n 4          158 Emma                     \n 5          161 Sense and Sensibility    \n 6          946 Lady Susan               \n 7         1212 Love and Freindship [sic]\n 8         1342 Pride and Prejudice      \n 9        19839 Emma                     \n10        20682 Northanger Abbey         \n# ℹ 21 more rows\n\n\nДавайте скачаем “Эмму”:\n\nemma &lt;- gutenberg_download(158)\n\nDetermining mirror for Project Gutenberg from https://www.gutenberg.org/robot/harvest\n\n\nUsing mirror http://aleph.gutenberg.org\n\nemma\n\n# A tibble: 16,488 × 2\n   gutenberg_id text            \n          &lt;int&gt; &lt;chr&gt;           \n 1          158 \"Emma\"          \n 2          158 \"\"              \n 3          158 \"by Jane Austen\"\n 4          158 \"\"              \n 5          158 \"\"              \n 6          158 \"Contents\"      \n 7          158 \"\"              \n 8          158 \" VOLUME I.\"    \n 9          158 \" CHAPTER I.\"   \n10          158 \" CHAPTER II.\"  \n# ℹ 16,478 more rows\n\n\nМожно скачивать сразу несколько книг. Давайте добавим еще “Леди Сьюзен”:\n\nbooks &lt;- gutenberg_download(c(158, 946), meta_fields = \"title\")\nbooks\n\n# A tibble: 19,028 × 3\n   gutenberg_id text             title\n          &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;\n 1          158 \"Emma\"           Emma \n 2          158 \"\"               Emma \n 3          158 \"by Jane Austen\" Emma \n 4          158 \"\"               Emma \n 5          158 \"\"               Emma \n 6          158 \"Contents\"       Emma \n 7          158 \"\"               Emma \n 8          158 \" VOLUME I.\"     Emma \n 9          158 \" CHAPTER I.\"    Emma \n10          158 \" CHAPTER II.\"   Emma \n# ℹ 19,018 more rows\n\nbooks |&gt; \n  count(title)\n\n# A tibble: 2 × 2\n  title          n\n  &lt;chr&gt;      &lt;int&gt;\n1 Emma       16488\n2 Lady Susan  2540\n\n\nОбратите на аргумент meta_fields, который позволяет кроме самого текста добавить метаданные из gutenberg_metadata в получившийся датафрейм.\n\n\n5.2.2 Пакет rperseus\nПакет rperseus предоставляет API для текстов Perseus Digital Library, где хранятся тексты на греческом и латинском языках.\nНа момент создания этих материалов пакет не был опубликован в CRAN, так что для его установки нужно выполнить следующую команду (если в вашей системе не стоит пакета remotes, то его можно установить при помощи стандартных install.packages(\"remotes\")):\n\nremotes::install_github(\"ropensci/rperseus\")\n\nЗагружаем библиотеку:\n\nlibrary(rperseus)\n\nБиблиотечный каталог пакета rperseus находиться в переменной perseus_catalog:\n\nstr(perseus_catalog)\n\ntibble [2,291 × 5] (S3: tbl_df/tbl/data.frame)\n $ urn        : chr [1:2291] \"urn:cts:latinLit:stoa0215b.stoa001.opp-lat1\" \"urn:cts:latinLit:stoa0215b.stoa002.opp-lat1\" \"urn:cts:latinLit:stoa0215b.stoa003.opp-lat1\" \"urn:cts:latinLit:phi9500.phi035.opp-lat1\" ...\n $ group_name : chr [1:2291] \"Orientius Saint active 430-440\" \"Orientius Saint active 430-440\" \"Orientius Saint active 430-440\" \"Anonymous\" ...\n $ label      : chr [1:2291] \"Commonitorium\" \"Carmina\" \"Orationes\" \"Epitaphium Ennodii\" ...\n $ description: chr [1:2291] \"Orientius Saint active 430-440, Commonitorium\" \"Orientius Saint active 430-440, Carmina\" \"Orientius Saint active 430-440, Orationes\" \"Anonymous, Epitaphium Ennodii\" ...\n $ language   : chr [1:2291] \"lat\" \"lat\" \"lat\" \"lat\" ...\n\n\nНа каких языках содержаться тексты?\n\nperseus_catalog |&gt; \n  count(language)\n\n# A tibble: 7 × 2\n  language     n\n  &lt;chr&gt;    &lt;int&gt;\n1 eng        309\n2 ger         10\n3 grc        888\n4 hct         39\n5 hpt         39\n6 lat        903\n7 oth        103\n\n\nА документации объясняется:\n\ngrc — греческий;\nlat — латинский;\neng — английский;\nhpt — иврит с огласовками;\nhct — иврит без огласовок;\nger — немецкий;\noth — другие языки.\n\nЧтобы скачивать тексты, нужно использовать индексы из переменной urn. Давайте скачаем “Исповедь” Августина:\n\naugustins_confession &lt;- get_perseus_text(\"urn:cts:latinLit:stoa0040.stoa001.opp-lat1\")\naugustins_confession\n\n# A tibble: 13 × 7\n   text                      urn   group_name label description language section\n   &lt;chr&gt;                     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;int&gt;\n 1 \"Magnus es, domine, et l… urn:… Augustinus Conf… Augustine … lat            1\n 2 \"LIBER SECVNDVS. Recorda… urn:… Augustinus Conf… Augustine … lat            2\n 3 \"LIBER TERTIVS. Veni Kar… urn:… Augustinus Conf… Augustine … lat            3\n 4 \"LIBER QVARTVS. Per idem… urn:… Augustinus Conf… Augustine … lat            4\n 5 \"LIBER QVINTVS. Accipe s… urn:… Augustinus Conf… Augustine … lat            5\n 6 \"LIBER SEXTVS. Spes mea … urn:… Augustinus Conf… Augustine … lat            6\n 7 \"LIBER SEPTIMVS. Iam mor… urn:… Augustinus Conf… Augustine … lat            7\n 8 \"LIBER OCTAVVS. Deus men… urn:… Augustinus Conf… Augustine … lat            8\n 9 \"LIBER NONVS. s o domine… urn:… Augustinus Conf… Augustine … lat            9\n10 \"LIBER DECIMVS. Cognosca… urn:… Augustinus Conf… Augustine … lat           10\n11 \"LIBER VNDECIMVS. Numqui… urn:… Augustinus Conf… Augustine … lat           11\n12 \"LIBER DVODECIMVS. Multa… urn:… Augustinus Conf… Augustine … lat           12\n13 \"LIBER TERTIVS DECIMVS. … urn:… Augustinus Conf… Augustine … lat           13\n\n\nКроме того, можно скачать лишь фрагмент, если мы заранее знаем деление книги:\n\nget_perseus_text(\"urn:cts:latinLit:stoa0040.stoa001.opp-lat1\", excerpt = 4)\n\n# A tibble: 1 × 7\n  text                       urn   group_name label description language section\n  &lt;chr&gt;                      &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 \"LIBER QVARTVS. Per idem … urn:… Augustinus Conf… Augustine … lat            4\n\n\nК сожалению, пакет не позволяет скачивать много текстов за раз, но в документации описано как это можно сделать при помощи цикла. Кому-то может показаться полезной функция perseus_parallel(), которая позволяет видеть параллельные фрагменты текста. Проиллюстрируем это на примере Эвменид Эсхила:\n\nget_perseus_text(\"urn:cts:greekLit:tlg0085.tlg007.perseus-eng2\") |&gt; \n  slice(1) -&gt;\n  aeschylus_eumenides_eng\n\nget_perseus_text(\"urn:cts:greekLit:tlg0085.tlg007.perseus-grc2\") |&gt; \n  slice(1) -&gt;\n  aeschylus_eumenides_grc\n\naeschylus_eumenides_eng |&gt; \n  bind_rows(aeschylus_eumenides_grc) |&gt; \n  perseus_parallel()\n\n\n\n\n\n\n\n\n\n\n5.2.3 Библиотека lib.ru\nДля текстов на русском языке отдельного пакета не написали, однако на сайте библиотеки lib.ru они уже представлены в машиночитаемом виде, нужно всего лишь выбрать вариант отображение txt, полученную ссылку считать в R, указав корректную кодировку (см. Раздел 5.1):\n\nread_lines(\"http://lib.ru/LITRA/PUSHKIN/kapitan.txt_Ascii.txt\",\n           locale = locale(encoding = \"KOI8-R\"),\n           n_max = 15)\n\n [1] \" \\024Александр Сергеевич Пушкин. Капитанская дочка\\025\"                                                                  \n [2] \"\"                                                                                                                        \n [3] \" ---------------------------------------------------------------\"                                                        \n [4] \" OCR: Олег Колесников\"                                                                                                   \n [5] \" Origin: http://www.magister.msk.ru/library/pushkin/pushkin.htm ? http://www.magister.msk.ru/library/pushkin/pushkin.htm\"\n [6] \" ---------------------------------------------------------------\"                                                        \n [7] \"\"                                                                                                                        \n [8] \" Береги честь смолоду.\"                                                                                                  \n [9] \" Пословица\"                                                                                                              \n[10] \"\"                                                                                                                        \n[11] \"\"                                                                                                                        \n[12] \"\"                                                                                                                        \n[13] \" \\024ГЛАВА I. СЕРЖАНТ ГВАРДИИ.\\025\"                                                                                      \n[14] \"\"                                                                                                                        \n[15] \"\"                                                                                                                        \n\n\nЕсли вам нужно скачать весь текст, разумеется, аргумент n_max нужно убрать, он отвечает за количество скачанных строк.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#библиотека-tidytext",
    "href": "5_working_with_texts.html#библиотека-tidytext",
    "title": "5  Работа с текстами",
    "section": "5.3 Библиотека tidytext",
    "text": "5.3 Библиотека tidytext\nСейчас скачанные тексты записывались в таблицу, где одна строка содержала один абзац. Однако для анализа текста нужно уметь работать с отдельными словами в нем. Для этого тексты нужно привести в tidy формат. С этим отлично справляется пакет tidytext (онлайн книга доступна здесь). Основное “оружие” пакета tidytext функция unnest_tokens(), которая переводит текст в tidy формат. В аргумент output подается вектор с именем будущей переменной, а аргумент input принимает переменную с текстом.\n\nlibrary(tidytext)\nalices_adventures_in_wonderland |&gt;  \n  tibble(text = _) |&gt; \n  unnest_tokens(output = \"word\", input = text)\n\n# A tibble: 29,891 × 1\n   word      \n   &lt;chr&gt;     \n 1 the       \n 2 project   \n 3 gutenberg \n 4 ebook     \n 5 of        \n 6 alice's   \n 7 adventures\n 8 in        \n 9 wonderland\n10 this      \n# ℹ 29,881 more rows\n\n\nПо умолчанию функция unnest_tokens() удаляет знаки препинания и приводит слова к нижнему регистру. Давайте для удобства удалим все вплоть до оглавления и создадим датафрейм, в которых будет понятно, где какая глава книги:\n\nalices_adventures_in_wonderland |&gt; \n  tibble(text = _) |&gt; \n  slice(54:3405) |&gt; \n  mutate(chapter = str_extract(text, \"CHAPTER .{1,4}\\\\.\"),\n         chapter_title = ifelse(str_detect(text, \"CHAPTER .{1,4}\\\\.\"), lead(text), NA)) |&gt; \n  fill(chapter, chapter_title)  |&gt; \n  filter(text != chapter) |&gt; \n  mutate(chapter = str_remove(chapter, \"CHAPTER \"),\n         chapter = str_remove(chapter, \"\\\\.\"),\n         chapter = as.numeric(as.roman(chapter)),\n         chapter_title = fct_reorder(chapter_title, chapter)) -&gt;\n  alice_cleaned\n\nalice_cleaned\n\n# A tibble: 3,340 × 3\n   text                                                    chapter chapter_title\n   &lt;chr&gt;                                                     &lt;dbl&gt; &lt;fct&gt;        \n 1 \"Down the Rabbit-Hole\"                                        1 Down the Rab…\n 2 \"\"                                                            1 Down the Rab…\n 3 \"\"                                                            1 Down the Rab…\n 4 \"Alice was beginning to get very tired of sitting by h…       1 Down the Rab…\n 5 \"bank, and of having nothing to do: once or twice she …       1 Down the Rab…\n 6 \"the book her sister was reading, but it had no pictur…       1 Down the Rab…\n 7 \"conversations in it, “and what is the use of a book,”…       1 Down the Rab…\n 8 \"“without pictures or conversations?”\"                        1 Down the Rab…\n 9 \"\"                                                            1 Down the Rab…\n10 \"So she was considering in her own mind (as well as sh…       1 Down the Rab…\n# ℹ 3,330 more rows\n\n\nВ приведенном выше коде интерес представляет функция fill(), которая заполнила пропущенные значения NA значениями выше. В остальном мы использовали не сложные регулярные выражения из Раздел 4.8. Кроме того мы воспользовались встроенными функциями as.roman() и as.numeric(), чтобы преобразовать римские номера глав в арабские. Теперь мы готовы анализировать частотность слов. Создадим переменную tidy_alice и посчитаем слова в каждой из глав:\n\nalice_cleaned |&gt; \n  unnest_tokens(output = \"word\", input = text) -&gt;\n  tidy_alice\n\ntidy_alice |&gt; \n  count(chapter_title, word, sort = TRUE)\n\n# A tibble: 7,526 × 3\n   chapter_title                     word      n\n   &lt;fct&gt;                             &lt;chr&gt; &lt;int&gt;\n 1 Who Stole the Tarts?              the     183\n 2 The Queen’s Croquet-Ground        the     168\n 3 Alice’s Evidence                  the     168\n 4 A Mad Tea-Party                   the     158\n 5 The Lobster Quadrille             the     158\n 6 Pig and Pepper                    the     150\n 7 The Mock Turtle’s Story           the     144\n 8 The Rabbit Sends in a Little Bill the     128\n 9 The Rabbit Sends in a Little Bill and     107\n10 A Caucus-Race and a Long Tale     the     101\n# ℹ 7,516 more rows\n\n\nВ основном, конечно, слова бессмысленные, но давайте посмотрим первый десяток самых частотных слов в каждой из глав:\n\ntidy_alice |&gt; \n  count(chapter_title, word, sort = TRUE) |&gt; \n  group_by(chapter_title) |&gt; \n  slice(1:10) |&gt; \n  ggplot(aes(n, word))+\n  geom_col()+\n  facet_wrap(~chapter_title, scales = \"free\")+\n  labs(x = NULL, y = NULL)\n\n\n\n\n\n\n\n\nХорошие знатоки “Алисы в Зазеркалье”, конечно многое понимают из распределения местоимений you и, наверное, догадываются, почему это слово становиться первым, однако в большинстве случаев служебные слова неинформативны при анализе текстов. Для этого для некоторых языков составили списки стоп-слов — служебных слов, которые никак не приближают к пониманию текста. Отдельный список уже встроен в пакет tidytext в переменную stop_words (см. также следующий раздел):\n\nstop_words\n\n# A tibble: 1,149 × 2\n   word        lexicon\n   &lt;chr&gt;       &lt;chr&gt;  \n 1 a           SMART  \n 2 a's         SMART  \n 3 able        SMART  \n 4 about       SMART  \n 5 above       SMART  \n 6 according   SMART  \n 7 accordingly SMART  \n 8 across      SMART  \n 9 actually    SMART  \n10 after       SMART  \n# ℹ 1,139 more rows\n\n\nТак что используя функцию из семейства ..._join() (см. Раздел 2.10), мы можем повторить наш анализ:\n\ntidy_alice |&gt; \n  count(chapter_title, word, sort = TRUE) |&gt; \n  anti_join(stop_words) |&gt; \n  group_by(chapter_title) |&gt; \n  slice(1:10) |&gt; \n  ggplot(aes(n, word))+\n  geom_col()+\n  facet_wrap(~chapter_title, scales = \"free\")+\n  labs(x = NULL, y = NULL)\n\nJoining with `by = join_by(word)`\n\n\n\n\n\n\n\n\n\nПолучившийся результат уже значительно интереснее, однако алфавитный порядок слов в каждом фасете немного мешает. Для того, чтобы победить это в пакете tidytext есть нескольок функций:\n\nreorder_within() — функция которая позволяет указать группировку, внутри которой нужно упорядочить единицы;\nscale_y_reordered()/scale_x_reordered() — функция, которая маскирует работу reorder_within() при отображении на графике.\n\n\ntidy_alice |&gt; \n  count(chapter_title, word, sort = TRUE) |&gt; \n  anti_join(stop_words) |&gt; \n  group_by(chapter_title) |&gt; \n  slice(1:10) |&gt; \n  mutate(word = reorder_within(word, within = chapter_title, by = n)) |&gt; \n  ggplot(aes(n, word))+\n  geom_col()+\n  facet_wrap(~chapter_title, scales = \"free\")+\n  scale_y_reordered()+\n  labs(x = NULL, y = NULL)\n\nJoining with `by = join_by(word)`\n\n\n\n\n\n\n\n\n\nВажно отметить, что разделение на слова не единственная цель функции unnest_tokens(), важным бывает анализировать сочетания слов: биграммы, триграммы и т. д.\n\nalice_cleaned |&gt; \n  unnest_tokens(output = \"ngram\", input = text, token = \"ngrams\", n = 2)\n\n# A tibble: 25,159 × 3\n   chapter chapter_title        ngram        \n     &lt;dbl&gt; &lt;fct&gt;                &lt;chr&gt;        \n 1       1 Down the Rabbit-Hole down the     \n 2       1 Down the Rabbit-Hole the rabbit   \n 3       1 Down the Rabbit-Hole rabbit hole  \n 4       1 Down the Rabbit-Hole &lt;NA&gt;         \n 5       1 Down the Rabbit-Hole &lt;NA&gt;         \n 6       1 Down the Rabbit-Hole alice was    \n 7       1 Down the Rabbit-Hole was beginning\n 8       1 Down the Rabbit-Hole beginning to \n 9       1 Down the Rabbit-Hole to get       \n10       1 Down the Rabbit-Hole get very     \n# ℹ 25,149 more rows\n\n\nВ связи с этим можно повторить наш анализ с биграммами:\n\nalice_cleaned |&gt; \n  unnest_tokens(output = \"ngram\", input = text, token = \"ngrams\", n = 2) |&gt; \n  na.omit() |&gt; \n  separate(ngram, into = c(\"ngram_1\", \"ngram_2\"), sep = \" \") |&gt; \n  anti_join(tibble(ngram_1 = stop_words$word)) |&gt; \n  anti_join(tibble(ngram_2 = stop_words$word)) |&gt; \n  mutate(ngram = str_c(ngram_1, \" \", ngram_2)) |&gt; \n  count(chapter_title, ngram, sort = TRUE) |&gt;\n  group_by(chapter_title) |&gt; \n  slice(1:10) |&gt; \n  mutate(ngram = reorder_within(ngram, within = chapter_title, by = n)) |&gt; \n  ggplot(aes(n, ngram))+\n  geom_col()+\n  facet_wrap(~chapter_title, scales = \"free\")+\n  scale_y_reordered() + \n  labs(x = NULL, y = NULL)\n\nJoining with `by = join_by(ngram_1)`\nJoining with `by = join_by(ngram_2)`",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#пакет-stopwords",
    "href": "5_working_with_texts.html#пакет-stopwords",
    "title": "5  Работа с текстами",
    "section": "5.4 Пакет stopwords",
    "text": "5.4 Пакет stopwords\nВыше мы упомянули, что в пакет tidytext встроен список английских стопслов. Стопслова для других язков можно раздобыть списки для других языков, используя пакет stopwords. Вместо имени языка, функция принимает ISO код языыка:\n\nlibrary(stopwords)\nstopwords(\"ru\")\n\n  [1] \"и\"       \"в\"       \"во\"      \"не\"      \"что\"     \"он\"      \"на\"     \n  [8] \"я\"       \"с\"       \"со\"      \"как\"     \"а\"       \"то\"      \"все\"    \n [15] \"она\"     \"так\"     \"его\"     \"но\"      \"да\"      \"ты\"      \"к\"      \n [22] \"у\"       \"же\"      \"вы\"      \"за\"      \"бы\"      \"по\"      \"только\" \n [29] \"ее\"      \"мне\"     \"было\"    \"вот\"     \"от\"      \"меня\"    \"еще\"    \n [36] \"нет\"     \"о\"       \"из\"      \"ему\"     \"теперь\"  \"когда\"   \"даже\"   \n [43] \"ну\"      \"вдруг\"   \"ли\"      \"если\"    \"уже\"     \"или\"     \"ни\"     \n [50] \"быть\"    \"был\"     \"него\"    \"до\"      \"вас\"     \"нибудь\"  \"опять\"  \n [57] \"уж\"      \"вам\"     \"сказал\"  \"ведь\"    \"там\"     \"потом\"   \"себя\"   \n [64] \"ничего\"  \"ей\"      \"может\"   \"они\"     \"тут\"     \"где\"     \"есть\"   \n [71] \"надо\"    \"ней\"     \"для\"     \"мы\"      \"тебя\"    \"их\"      \"чем\"    \n [78] \"была\"    \"сам\"     \"чтоб\"    \"без\"     \"будто\"   \"человек\" \"чего\"   \n [85] \"раз\"     \"тоже\"    \"себе\"    \"под\"     \"жизнь\"   \"будет\"   \"ж\"      \n [92] \"тогда\"   \"кто\"     \"этот\"    \"говорил\" \"того\"    \"потому\"  \"этого\"  \n [99] \"какой\"   \"совсем\"  \"ним\"     \"здесь\"   \"этом\"    \"один\"    \"почти\"  \n[106] \"мой\"     \"тем\"     \"чтобы\"   \"нее\"     \"кажется\" \"сейчас\"  \"были\"   \n[113] \"куда\"    \"зачем\"   \"сказать\" \"всех\"    \"никогда\" \"сегодня\" \"можно\"  \n[120] \"при\"     \"наконец\" \"два\"     \"об\"      \"другой\"  \"хоть\"    \"после\"  \n[127] \"над\"     \"больше\"  \"тот\"     \"через\"   \"эти\"     \"нас\"     \"про\"    \n[134] \"всего\"   \"них\"     \"какая\"   \"много\"   \"разве\"   \"сказала\" \"три\"    \n[141] \"эту\"     \"моя\"     \"впрочем\" \"хорошо\"  \"свою\"    \"этой\"    \"перед\"  \n[148] \"иногда\"  \"лучше\"   \"чуть\"    \"том\"     \"нельзя\"  \"такой\"   \"им\"     \n[155] \"более\"   \"всегда\"  \"конечно\" \"всю\"     \"между\"  \n\n\nПакет предоставляет несколько источников списков:\n\nstopwords_getsources()\n\n[1] \"snowball\"      \"stopwords-iso\" \"misc\"          \"smart\"        \n[5] \"marimo\"        \"ancient\"       \"nltk\"          \"perseus\"      \n\n\nДавайте посмотрим какие языки сейчас доступны:\n\nmap(stopwords_getsources(), stopwords_getlanguages)\n\n[[1]]\n [1] \"da\" \"de\" \"en\" \"es\" \"fi\" \"fr\" \"hu\" \"ir\" \"it\" \"nl\" \"no\" \"pt\" \"ro\" \"ru\" \"sv\"\n\n[[2]]\n [1] \"af\" \"ar\" \"hy\" \"eu\" \"bn\" \"br\" \"bg\" \"ca\" \"zh\" \"hr\" \"cs\" \"da\" \"nl\" \"en\" \"eo\"\n[16] \"et\" \"fi\" \"fr\" \"gl\" \"de\" \"el\" \"ha\" \"he\" \"hi\" \"hu\" \"id\" \"ga\" \"it\" \"ja\" \"ko\"\n[31] \"ku\" \"la\" \"lt\" \"lv\" \"ms\" \"mr\" \"no\" \"fa\" \"pl\" \"pt\" \"ro\" \"ru\" \"sk\" \"sl\" \"so\"\n[46] \"st\" \"es\" \"sw\" \"sv\" \"th\" \"tl\" \"tr\" \"uk\" \"ur\" \"vi\" \"yo\" \"zu\"\n\n[[3]]\n[1] \"ar\" \"ca\" \"el\" \"gu\" \"zh\"\n\n[[4]]\n[1] \"en\"\n\n[[5]]\n[1] \"en\"    \"de\"    \"ru\"    \"ar\"    \"he\"    \"zh_tw\" \"zh_cn\" \"ko\"    \"ja\"   \n\n[[6]]\n[1] \"grc\" \"la\" \n\n[[7]]\n [1] \"ar\" \"az\" \"da\" \"nl\" \"en\" \"fi\" \"fr\" \"de\" \"el\" \"hu\" \"id\" \"it\" \"kk\" \"ne\" \"no\"\n[16] \"pt\" \"ro\" \"ru\" \"sl\" \"es\" \"sv\" \"tg\" \"tr\"\n\n[[8]]\n[1] \"grc\" \"la\" \n\n\nМы видим, что есть несколько источников для русского языка:\n\nlength(stopwords(\"ru\", source = \"snowball\"))\n\n[1] 159\n\nlength(stopwords(\"ru\", source = \"stopwords-iso\"))\n\n[1] 559\n\nlength(stopwords(\"ru\", source = \"marimo\"))\n\n[1] 333\n\nlength(stopwords(\"ru\", source = \"nltk\"))\n\n[1] 151\n\n\nВ результате мы можем сделать анализ аналогичный анализу Алисы из прошлого раздела для русского текста:\n\ncaptains_daughter &lt;- read_lines(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_the_captains_daughter_koi8r.txt\",\n                                locale = locale(encoding = \"KOI8-R\"))\n\ncaptains_daughter |&gt; \n  tibble(text = _) |&gt; \n  unnest_tokens(output = \"word\", input = text) |&gt; \n  anti_join(tibble(word = stopwords(\"ru\", source = \"stopwords-iso\"))) |&gt; \n  count(word, sort = TRUE) |&gt; \n  slice(1:15) |&gt; \n  mutate(word = fct_reorder(word, n)) |&gt; \n  ggplot(aes(n, word))+\n  geom_col()+\n  labs(x = NULL, y = NULL, caption = \"А. С. Пушкин 'Капитанская дочка'\")\n\nJoining with `by = join_by(word)`",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#пакет-udpipe",
    "href": "5_working_with_texts.html#пакет-udpipe",
    "title": "5  Работа с текстами",
    "section": "5.5 Пакет udpipe",
    "text": "5.5 Пакет udpipe\nПакет udpipe представляет лемматизацию, морфологический и синтаксический анализ разных языков. Туториал можно найти здесь, там же есть список доступных языков.\n\nlibrary(udpipe)\n\nМодели качаются очень долго.\n\nenmodel &lt;- udpipe_download_model(language = \"english\")\n\nDownloading udpipe model from https://raw.githubusercontent.com/jwijffels/udpipe.models.ud.2.5/master/inst/udpipe-ud-2.5-191206/english-ewt-ud-2.5-191206.udpipe to /home/agricolamz/work/online_course/r_for_humanities_and_social_sciences/tasks/repo/book/english-ewt-ud-2.5-191206.udpipe\n\n\n - This model has been trained on version 2.5 of data from https://universaldependencies.org\n\n\n - The model is distributed under the CC-BY-SA-NC license: https://creativecommons.org/licenses/by-nc-sa/4.0\n\n\n - Visit https://github.com/jwijffels/udpipe.models.ud.2.5 for model license details.\n\n\n - For a list of all models and their licenses (most models you can download with this package have either a CC-BY-SA or a CC-BY-SA-NC license) read the documentation at ?udpipe_download_model. For building your own models: visit the documentation by typing vignette('udpipe-train', package = 'udpipe')\n\n\nDownloading finished, model stored at '/home/agricolamz/work/online_course/r_for_humanities_and_social_sciences/tasks/repo/book/english-ewt-ud-2.5-191206.udpipe'\n\n\nТеперь можно распарсить какое-нибудь предложение:\n\nudpipe(\"The want of Miss Taylor would be felt every hour of every day.\",\n       object = enmodel)\n\n   doc_id paragraph_id sentence_id\n1    doc1            1           1\n2    doc1            1           1\n3    doc1            1           1\n4    doc1            1           1\n5    doc1            1           1\n6    doc1            1           1\n7    doc1            1           1\n8    doc1            1           1\n9    doc1            1           1\n10   doc1            1           1\n11   doc1            1           1\n12   doc1            1           1\n13   doc1            1           1\n14   doc1            1           1\n                                                         sentence start end\n1  The want of Miss Taylor would be felt every hour of every day.     1   3\n2  The want of Miss Taylor would be felt every hour of every day.     5   8\n3  The want of Miss Taylor would be felt every hour of every day.    10  11\n4  The want of Miss Taylor would be felt every hour of every day.    13  16\n5  The want of Miss Taylor would be felt every hour of every day.    18  23\n6  The want of Miss Taylor would be felt every hour of every day.    25  29\n7  The want of Miss Taylor would be felt every hour of every day.    31  32\n8  The want of Miss Taylor would be felt every hour of every day.    34  37\n9  The want of Miss Taylor would be felt every hour of every day.    39  43\n10 The want of Miss Taylor would be felt every hour of every day.    45  48\n11 The want of Miss Taylor would be felt every hour of every day.    50  51\n12 The want of Miss Taylor would be felt every hour of every day.    53  57\n13 The want of Miss Taylor would be felt every hour of every day.    59  61\n14 The want of Miss Taylor would be felt every hour of every day.    62  62\n   term_id token_id  token  lemma  upos xpos\n1        1        1    The    the   DET   DT\n2        2        2   want   want  NOUN   NN\n3        3        3     of     of   ADP   IN\n4        4        4   Miss   miss PROPN  NNP\n5        5        5 Taylor Taylor PROPN  NNP\n6        6        6  would  would   AUX   MD\n7        7        7     be     be   AUX   VB\n8        8        8   felt   feel  VERB  VBN\n9        9        9  every  every   DET   DT\n10      10       10   hour   hour  NOUN   NN\n11      11       11     of     of   ADP   IN\n12      12       12  every  every   DET   DT\n13      13       13    day    day  NOUN   NN\n14      14       14      .      . PUNCT    .\n                                 feats head_token_id    dep_rel deps\n1            Definite=Def|PronType=Art             2        det &lt;NA&gt;\n2                          Number=Sing             8 nsubj:pass &lt;NA&gt;\n3                                 &lt;NA&gt;             5       case &lt;NA&gt;\n4                          Number=Sing             5   compound &lt;NA&gt;\n5                          Number=Sing             2       nmod &lt;NA&gt;\n6                         VerbForm=Fin             8        aux &lt;NA&gt;\n7                         VerbForm=Inf             8   aux:pass &lt;NA&gt;\n8  Tense=Past|VerbForm=Part|Voice=Pass             0       root &lt;NA&gt;\n9                                 &lt;NA&gt;            10        det &lt;NA&gt;\n10                         Number=Sing             8   obl:tmod &lt;NA&gt;\n11                                &lt;NA&gt;            13       case &lt;NA&gt;\n12                                &lt;NA&gt;            13        det &lt;NA&gt;\n13                         Number=Sing            10       nmod &lt;NA&gt;\n14                                &lt;NA&gt;             8      punct &lt;NA&gt;\n              misc\n1             &lt;NA&gt;\n2             &lt;NA&gt;\n3             &lt;NA&gt;\n4             &lt;NA&gt;\n5             &lt;NA&gt;\n6             &lt;NA&gt;\n7             &lt;NA&gt;\n8             &lt;NA&gt;\n9             &lt;NA&gt;\n10            &lt;NA&gt;\n11            &lt;NA&gt;\n12            &lt;NA&gt;\n13   SpaceAfter=No\n14 SpacesAfter=\\\\n\n\n\nСкачаем русскую модель:\n\nrumodel &lt;- udpipe_download_model(language = \"russian-syntagrus\")\n\nDownloading udpipe model from https://raw.githubusercontent.com/jwijffels/udpipe.models.ud.2.5/master/inst/udpipe-ud-2.5-191206/russian-syntagrus-ud-2.5-191206.udpipe to /home/agricolamz/work/online_course/r_for_humanities_and_social_sciences/tasks/repo/book/russian-syntagrus-ud-2.5-191206.udpipe\n\n\n - This model has been trained on version 2.5 of data from https://universaldependencies.org\n\n\n - The model is distributed under the CC-BY-SA-NC license: https://creativecommons.org/licenses/by-nc-sa/4.0\n\n\n - Visit https://github.com/jwijffels/udpipe.models.ud.2.5 for model license details.\n\n\n - For a list of all models and their licenses (most models you can download with this package have either a CC-BY-SA or a CC-BY-SA-NC license) read the documentation at ?udpipe_download_model. For building your own models: visit the documentation by typing vignette('udpipe-train', package = 'udpipe')\n\n\nDownloading finished, model stored at '/home/agricolamz/work/online_course/r_for_humanities_and_social_sciences/tasks/repo/book/russian-syntagrus-ud-2.5-191206.udpipe'\n\n\n\nudpipe(\"Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\",\n       object = rumodel)\n\n   doc_id paragraph_id sentence_id\n1    doc1            1           1\n2    doc1            1           1\n3    doc1            1           1\n4    doc1            1           1\n5    doc1            1           1\n6    doc1            1           1\n7    doc1            1           1\n8    doc1            1           1\n9    doc1            1           1\n10   doc1            1           1\n11   doc1            1           1\n12   doc1            1           1\n13   doc1            1           1\n14   doc1            1           1\n15   doc1            1           1\n16   doc1            1           1\n17   doc1            1           1\n18   doc1            1           1\n19   doc1            1           1\n20   doc1            1           1\n21   doc1            1           1\n                                                                                      sentence\n1  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n2  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n3  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n4  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n5  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n6  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n7  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n8  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n9  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n10 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n11 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n12 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n13 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n14 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n15 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n16 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n17 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n18 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n19 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n20 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n21 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n   start end term_id token_id       token       lemma  upos xpos\n1      1   4       1        1        Жила        жить  VERB &lt;NA&gt;\n2      5   5       2        2           -           - PUNCT &lt;NA&gt;\n3      6   9       3        3        была        быть   AUX &lt;NA&gt;\n4     11  12       4        4          на          на   ADP &lt;NA&gt;\n5     14  18       5        5       свете        свет  NOUN &lt;NA&gt;\n6     20  24       6        6       крыса       крыса  NOUN &lt;NA&gt;\n7     26  26       7        7           в           в   ADP &lt;NA&gt;\n8     28  34       8        8     морском     морской   ADJ &lt;NA&gt;\n9     36  40       9        9       порту        порт  NOUN &lt;NA&gt;\n10    42  52      10       10 Вальпараисо Вальпараисо   ADV &lt;NA&gt;\n11    53  53      11       11           ,           , PUNCT &lt;NA&gt;\n12    55  56      12       12          на          на   ADP &lt;NA&gt;\n13    58  63      13       13      складе       склад  NOUN &lt;NA&gt;\n14    65  68      14       14        мяса        мясо  NOUN &lt;NA&gt;\n15    70  70      15       15           и           и CCONJ &lt;NA&gt;\n16    72  76      16       16       маиса        маис  NOUN &lt;NA&gt;\n17    77  77      17       17           ,           , PUNCT &lt;NA&gt;\n18    79  83      18       18       какао       какао  NOUN &lt;NA&gt;\n19    85  85      19       19           и           и CCONJ &lt;NA&gt;\n20    87  90      20       20        вина        вино  NOUN &lt;NA&gt;\n21    91  91      21       21           .           . PUNCT &lt;NA&gt;\n                                                                          feats\n1  Aspect=Imp|Gender=Fem|Mood=Ind|Number=Sing|Tense=Past|VerbForm=Fin|Voice=Act\n2                                                                          &lt;NA&gt;\n3  Aspect=Imp|Gender=Fem|Mood=Ind|Number=Sing|Tense=Past|VerbForm=Fin|Voice=Act\n4                                                                          &lt;NA&gt;\n5                                 Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n6                                 Animacy=Inan|Case=Gen|Gender=Masc|Number=Sing\n7                                                                          &lt;NA&gt;\n8                                   Case=Loc|Degree=Pos|Gender=Masc|Number=Sing\n9                                 Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n10                                                                   Degree=Pos\n11                                                                         &lt;NA&gt;\n12                                                                         &lt;NA&gt;\n13                                Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n14                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n15                                                                         &lt;NA&gt;\n16                                Animacy=Inan|Case=Gen|Gender=Masc|Number=Sing\n17                                                                         &lt;NA&gt;\n18                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n19                                                                         &lt;NA&gt;\n20                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n21                                                                         &lt;NA&gt;\n   head_token_id dep_rel deps            misc\n1              5   nsubj &lt;NA&gt;   SpaceAfter=No\n2              1   punct &lt;NA&gt;   SpaceAfter=No\n3              5     cop &lt;NA&gt;            &lt;NA&gt;\n4              5    case &lt;NA&gt;            &lt;NA&gt;\n5              0    root &lt;NA&gt;            &lt;NA&gt;\n6              5    nmod &lt;NA&gt;            &lt;NA&gt;\n7              9    case &lt;NA&gt;            &lt;NA&gt;\n8              9    amod &lt;NA&gt;            &lt;NA&gt;\n9              6    nmod &lt;NA&gt;            &lt;NA&gt;\n10             6  advmod &lt;NA&gt;   SpaceAfter=No\n11            13   punct &lt;NA&gt;            &lt;NA&gt;\n12            13    case &lt;NA&gt;            &lt;NA&gt;\n13            10    conj &lt;NA&gt;            &lt;NA&gt;\n14            13    nmod &lt;NA&gt;            &lt;NA&gt;\n15            16      cc &lt;NA&gt;            &lt;NA&gt;\n16            14    conj &lt;NA&gt;   SpaceAfter=No\n17            18   punct &lt;NA&gt;            &lt;NA&gt;\n18            10    conj &lt;NA&gt;            &lt;NA&gt;\n19            20      cc &lt;NA&gt;            &lt;NA&gt;\n20            10    conj &lt;NA&gt;   SpaceAfter=No\n21             5   punct &lt;NA&gt; SpacesAfter=\\\\n\n\n\nПосле того как модель скачана можно к ней обращаться просто по имени файла:\n\nudpipe(\"Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\",\n       object = \"russian-syntagrus-ud-2.5-191206.udpipe\")\n\n   doc_id paragraph_id sentence_id\n1    doc1            1           1\n2    doc1            1           1\n3    doc1            1           1\n4    doc1            1           1\n5    doc1            1           1\n6    doc1            1           1\n7    doc1            1           1\n8    doc1            1           1\n9    doc1            1           1\n10   doc1            1           1\n11   doc1            1           1\n12   doc1            1           1\n13   doc1            1           1\n14   doc1            1           1\n15   doc1            1           1\n16   doc1            1           1\n17   doc1            1           1\n18   doc1            1           1\n19   doc1            1           1\n20   doc1            1           1\n21   doc1            1           1\n                                                                                      sentence\n1  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n2  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n3  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n4  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n5  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n6  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n7  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n8  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n9  Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n10 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n11 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n12 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n13 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n14 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n15 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n16 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n17 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n18 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n19 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n20 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n21 Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.\n   start end term_id token_id       token       lemma  upos xpos\n1      1   4       1        1        Жила        жить  VERB &lt;NA&gt;\n2      5   5       2        2           -           - PUNCT &lt;NA&gt;\n3      6   9       3        3        была        быть   AUX &lt;NA&gt;\n4     11  12       4        4          на          на   ADP &lt;NA&gt;\n5     14  18       5        5       свете        свет  NOUN &lt;NA&gt;\n6     20  24       6        6       крыса       крыса  NOUN &lt;NA&gt;\n7     26  26       7        7           в           в   ADP &lt;NA&gt;\n8     28  34       8        8     морском     морской   ADJ &lt;NA&gt;\n9     36  40       9        9       порту        порт  NOUN &lt;NA&gt;\n10    42  52      10       10 Вальпараисо Вальпараисо   ADV &lt;NA&gt;\n11    53  53      11       11           ,           , PUNCT &lt;NA&gt;\n12    55  56      12       12          на          на   ADP &lt;NA&gt;\n13    58  63      13       13      складе       склад  NOUN &lt;NA&gt;\n14    65  68      14       14        мяса        мясо  NOUN &lt;NA&gt;\n15    70  70      15       15           и           и CCONJ &lt;NA&gt;\n16    72  76      16       16       маиса        маис  NOUN &lt;NA&gt;\n17    77  77      17       17           ,           , PUNCT &lt;NA&gt;\n18    79  83      18       18       какао       какао  NOUN &lt;NA&gt;\n19    85  85      19       19           и           и CCONJ &lt;NA&gt;\n20    87  90      20       20        вина        вино  NOUN &lt;NA&gt;\n21    91  91      21       21           .           . PUNCT &lt;NA&gt;\n                                                                          feats\n1  Aspect=Imp|Gender=Fem|Mood=Ind|Number=Sing|Tense=Past|VerbForm=Fin|Voice=Act\n2                                                                          &lt;NA&gt;\n3  Aspect=Imp|Gender=Fem|Mood=Ind|Number=Sing|Tense=Past|VerbForm=Fin|Voice=Act\n4                                                                          &lt;NA&gt;\n5                                 Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n6                                 Animacy=Inan|Case=Gen|Gender=Masc|Number=Sing\n7                                                                          &lt;NA&gt;\n8                                   Case=Loc|Degree=Pos|Gender=Masc|Number=Sing\n9                                 Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n10                                                                   Degree=Pos\n11                                                                         &lt;NA&gt;\n12                                                                         &lt;NA&gt;\n13                                Animacy=Inan|Case=Loc|Gender=Masc|Number=Sing\n14                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n15                                                                         &lt;NA&gt;\n16                                Animacy=Inan|Case=Gen|Gender=Masc|Number=Sing\n17                                                                         &lt;NA&gt;\n18                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n19                                                                         &lt;NA&gt;\n20                                Animacy=Inan|Case=Gen|Gender=Neut|Number=Sing\n21                                                                         &lt;NA&gt;\n   head_token_id dep_rel deps            misc\n1              5   nsubj &lt;NA&gt;   SpaceAfter=No\n2              1   punct &lt;NA&gt;   SpaceAfter=No\n3              5     cop &lt;NA&gt;            &lt;NA&gt;\n4              5    case &lt;NA&gt;            &lt;NA&gt;\n5              0    root &lt;NA&gt;            &lt;NA&gt;\n6              5    nmod &lt;NA&gt;            &lt;NA&gt;\n7              9    case &lt;NA&gt;            &lt;NA&gt;\n8              9    amod &lt;NA&gt;            &lt;NA&gt;\n9              6    nmod &lt;NA&gt;            &lt;NA&gt;\n10             6  advmod &lt;NA&gt;   SpaceAfter=No\n11            13   punct &lt;NA&gt;            &lt;NA&gt;\n12            13    case &lt;NA&gt;            &lt;NA&gt;\n13            10    conj &lt;NA&gt;            &lt;NA&gt;\n14            13    nmod &lt;NA&gt;            &lt;NA&gt;\n15            16      cc &lt;NA&gt;            &lt;NA&gt;\n16            14    conj &lt;NA&gt;   SpaceAfter=No\n17            18   punct &lt;NA&gt;            &lt;NA&gt;\n18            10    conj &lt;NA&gt;            &lt;NA&gt;\n19            20      cc &lt;NA&gt;            &lt;NA&gt;\n20            10    conj &lt;NA&gt;   SpaceAfter=No\n21             5   punct &lt;NA&gt; SpacesAfter=\\\\n\n\n\nФункция udipipe() также принимает датафрейм со столбцами doc_id и text — это позволяет сохранить в получившейся таблице структуру, которая важна в исследовании, так как в переменную doc_id можно спрятать всю необходимую информацию.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "5_working_with_texts.html#векторизация-текстов",
    "href": "5_working_with_texts.html#векторизация-текстов",
    "title": "5  Работа с текстами",
    "section": "5.6 Векторизация текстов",
    "text": "5.6 Векторизация текстов\nВекторизация слов и текстов — это операция, которая позволяет превратить наборы текстов в набор числовых значений, которые потом можно использовать для кластеризации текстов. Мы будем использовать для этой цели дефолтные значения достаточно старых моделей, которые мы используем в практике из-за их скорости. Датасет, который мы будем векторизовывать содержит 300 аннотаций из научных журналов по трем тематикам: лингвистике, медицине и экономике (каждой дисциплины по 100 аннотаций).\n\nabstracts_dataset &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w5_abstracts.csv\")\n\nRows: 300 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): id, author, title, journal, abstract, field\ndbl (1): publication_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstr(abstracts_dataset)\n\nspc_tbl_ [300 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id              : chr [1:300] \"https://openalex.org/W3122280204\" \"https://openalex.org/W1995933606\" \"https://openalex.org/W2048988271\" \"https://openalex.org/W2010854286\" ...\n $ author          : chr [1:300] \"Troy Davig; Eric M. Leeper\" \"Wing Suen; Pak Hung Mo\" \"Pravin Krishna; Jennifer P. Poole; Mine Zeynep Senses\" \"Perry Mehrling\" ...\n $ title           : chr [1:300] \"Generalizing the Taylor Principle\" \"Simple Analytics of Productive Consumption\" \"Trade, Labor Market Frictions, and Residual Wage Inequality across Worker Groups\" \"Three Principles for Market-Based Credit Regulation\" ...\n $ publication_year: num [1:300] 2007 1994 2012 2012 1996 ...\n $ journal         : chr [1:300] \"The American Economic Review\" \"Journal of Political Economy\" \"The American Economic Review\" \"The American Economic Review\" ...\n $ abstract        : chr [1:300] \"The paper generalizes the Taylor principle—the proposition that central banks can stabilize the macroeconomy by\"| __truncated__ \"Productive consumption adds to utility and income at the same time. The shadow price of a productive good is eq\"| __truncated__ \"Using a matched employer-employee data set, we study the effects of trade liberalization on wage dispersion in \"| __truncated__ \"A key lesson of the financial crisis 2007-09 is that the Bagehot Rule, “lend freely but at a high rate,” needs \"| __truncated__ ...\n $ field           : chr [1:300] \"economics\" \"economics\" \"economics\" \"economics\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_character(),\n  ..   author = col_character(),\n  ..   title = col_character(),\n  ..   publication_year = col_double(),\n  ..   journal = col_character(),\n  ..   abstract = col_character(),\n  ..   field = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nМы будем использовать функцию paragraph2vec() из пакета doc2vec. Сначала мы приведем наш датасет к виду датафрейма с переменными doc_id и text.\n\nlibrary(doc2vec)\n\nabstracts_dataset |&gt;\n  mutate(doc_id = 1:n()) |&gt;\n  rename(text = abstract) |&gt;\n  select(doc_id, text) |&gt; \n  paragraph2vec(threads = 15) -&gt;\n  model\n\nПолучившиеся эмбединги можно получить\n\nas.matrix(model, which = \"docs\") |&gt; \n  dim()\n\n[1] 300  50\n\n\nФункция dim() говорит о размерности получившейся таблицы — 300 аннотаций, 50 числовых значений. Теперь можно воспользоваться методами уменьшения размерности для того, чтобы 50-мерное пространство схлопнуть до 2-мерного. Существует много алгоритмов, которые это делают, я воспользуюсь алгоритмом UMAP (Uniform Manifold Approximation and Projection):\n\nlibrary(uwot)\n\nLoading required package: Matrix\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nas.matrix(model, which = \"docs\") |&gt;\n  umap(metric = \"cosine\", init = \"pca\") |&gt; \n  as_tibble() |&gt; \n  bind_cols(abstracts_dataset) |&gt; \n  ggplot(aes(V1, V2, color = field))+\n  geom_point()+\n  stat_ellipse()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n\n\n\n\n\n\n\nМы видим, что у аннотаций есть что-то общее, но в общем, аннотации распадаются на три группы. Важно, что расцветка у нас уже была в датасете и алгоритм векторизации ее не видел, так что получившееся пространство отражает карту анализируемых текстов. Стоит отметить, что качесвто получишвегося пространства напрямую зависит от объема данных.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Работа с текстами</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html",
    "href": "7_working_with_geodata.html",
    "title": "7  Работа с геоданными",
    "section": "",
    "text": "7.1 Векторная и растровая графика\nПеред тем как обсуждать карты, следует сначала обсудить разницу между векторной и растровой графикой.\nСовременные технологии позволяют соединять растровые и векторные изображения, а также трансформировать их друг в друга. Картографические данные могут попадать в разные типы: точки (столицы всех стран), линии (улицы в каком-нибудь городе), полигоны (границы стран и меньших регионов) обычно имеют некоторую геопривязку (для простоты давайте считать такими, все, что имеет широту и долготу), так что могут быть представлены векторно, однако существует достаточно много информации, которую невозможно представить никак подругому, кроме как векторно: спутниковые снимки, существующие физические/политические/климатические/исторические и т. п. карты, выдача картографических сервисов, таких как Google Maps. Кроме того, занимаясь любыми типами визуализации следует помнить о разнице статической визаулизации, которую после создания нельзя изменить, и динамической визуализации, которая позволяет пользователям изменять себя (увеличиваться и уменьшаться, кликать на собрание точек и видеть их значения и т. п.). В данной главе, в отличие от предыдущих мы сосредоточимся на пакете для динамичского картографирования leaflet. Достаточно много тем останется за пределами этой главы: изменение проекции, манипуляции с географическими данными, работа с растровыми изображениями и другие (см., например, (Lovelace, Nowosad, and Muenchow 2019), доступная он-лайн).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html#векторная-и-растровая-графика",
    "href": "7_working_with_geodata.html#векторная-и-растровая-графика",
    "title": "7  Работа с геоданными",
    "section": "",
    "text": "Растровые изображения представляют собой набор упорядоченных пикселей, про каждый из которых храниться информация о цвете. Векторное изображение нельзя бесконечно увеличивать — в какой-то момент станут видны пиксели, которые в каком-то смысле являются пределом увелечения. Наиболее популярные форматы растровых изображений: JPEG, GIF, PNG, BMP, TIFF и другие.\nВ векторных изображениях инормация храниться как собрани точек, линий и полигонов в некоторой системе координат, что позволяет бесконечно увеличивать такие изображения не теряя в качестве. Наиболее популярные форматы векторных изображений: PDF, SVG, EPS и другие.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html#картографические-примитивы",
    "href": "7_working_with_geodata.html#картографические-примитивы",
    "title": "7  Работа с геоданными",
    "section": "7.2 Картографические примитивы",
    "text": "7.2 Картографические примитивы\nВ картографии существуют свои элементарные единицы:\n\n\n\n\n\nГеографические примитивы из (Lovelace, Nowosad, and Muenchow 2019) (CC BY-NC-ND 4.0)\n\n\n\n\nЭти единицы поддерживают популярные пакеты для манипуляции с георграфическими объектами: sp, sf и другие. В данном разделе мы не будем учиться операциям с этими объектами (объединение, вычитание и т. п., подробности смотрите в документации к пакету sp или в (Lovelace, Nowosad, and Muenchow 2019)).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html#пакет-leaflet",
    "href": "7_working_with_geodata.html#пакет-leaflet",
    "title": "7  Работа с геоданными",
    "section": "7.3 Пакет leaflet",
    "text": "7.3 Пакет leaflet\nМы пойдем необычным путем и начнем с инструмента, который создает динамические карты — пакета leaflet, который является оберткой для одноименного популярного пакета для визаулизации карт в интернете на JS.\nДля начала включим библиотеки:\n\nlibrary(\"leaflet\")\nlibrary(\"tidyverse\")\n\nЗдесь доступен cheatsheet, посвященный пакету leaflet.\n\n7.3.1 .csv файлы\nИсточником географических данных могут быть обычные привычные нам csv файлы. Например, вот здесь, хранится датасет из проекта The Unwelcomed Мохамада А. Вэйкда (Mohamad A. Waked), содержащий информацию о месте и причинах смерти мигрантов и беженцев по всему миру с января 2014 года по июнь 2019 года.\n\nunwelcomed &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w7_death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv\")\n\n\nid — идентификационный номер;\ndate — дата происшедшего;\ntotal_death_missing — количество погибших/пропавших;\nlocation — место происшедшего;\nlat — широта;1\nlon — долгота;\ncollapsed_region — обобщенная информация о регионе;\nregion — информация о регионе;\ncollapsed_cause — обобщенная информация о причине смерти;\ncause_of_death — информация о причине смерти.\n\nСамый простой способ нанести на карту координаты, это использовать комбинацию функций leaflet() |&gt; addCircles():\n\nunwelcomed |&gt;  \n  leaflet() |&gt;  \n  addCircles(lng = ~lon, # обратите внимание на особый синтаксис с тильдой\n             lat = ~lat)\n\n\n\n\n\n\n\n7.3.2 Формат .geojson\nСуществует несколько форматов, в которых принято распространять картографические данные, и если точки удобно хранить в .csv формате, то с полигонами и линиями tidy подход одно наблюдение – одна строчка не подходит. Наиболее распространненые являюся .geojson и .shp. Формат .geojson можно прочитать при помощи функции read_json() из пакета jsonlite (я вызываю эту функцию, не загружая пакета, так как пакет jsonlite конфликтует с tidyverse):\n\nmoscow_districts &lt;- jsonlite::read_json(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w7_moscow.geojson\")\n\nleaflet() |&gt; \n  addTiles() |&gt; \n  addGeoJSON(geojson = moscow_districts)\n\n\n\n\n\nНеобходимо зазумиться, так как при отображении полигонов зум не происходит автоматически, этого можно добиться при помощи функции setView():\n\nleaflet() |&gt; \n  addTiles() |&gt; \n  addGeoJSON(geojson = moscow_districts) |&gt; \n  setView(zoom = 8, lng = 37.35, lat = 55.65)\n\n\n\n\n\nКроме того, .geojson и .shp можно прочитать функцией st_read() из пакета sf.\n\n\n7.3.3 Функции пакета leaflet()\nЧтобы точки не “висели в воздухе” можно добавить подложку:\n\nunwelcomed |&gt; \n  leaflet() |&gt;  \n  addTiles() |&gt;  \n  addCircles(lng = ~lon,\n             lat = ~lat)\n\n\n\n\n\nФункция addCircles() имеет массу аргументов, которая отвечает за отображение:\n\nradius\ncolor\nopacity\nfill\nfillColor\nlabel\npopup\n\nК сожалению, в пакете leaflet нет такого удобного автоматического раскрашивания по некоторой переменной, поэтому для решения такой задачи нужно сначала создать свою функцию раскрашивания. Это делается при помощи функций colorNumeric(), colorFactor(), colorBin() или colorQuantile().\n\npal_cat &lt;- colorFactor(\"Set3\", domain = unwelcomed$collapsed_cause)\npal_cat(unwelcomed$collapsed_cause[1])\n\n[1] \"#D9D9D9\"\n\n\nТеперь в переменную pal_cat записана функция, которая возварщает цвета в зависимости от значения. В качестве первого аргумента в фукнций colorNumeric(), colorFactor(), colorBin() или colorQuantile() отправляется палитра, которую пользователь может задать сам или использовать уже имеющуюся (их можно посмотреть при помощи команды RColorBrewer::display.brewer.all()):\n\nRColorBrewer::display.brewer.all()\n\n\n\n\n\n\n\n\nТеперь мы готовы сделать нашу первую осмысленную карту\n\nunwelcomed |&gt; \n  filter(str_detect(date, \"2014\")) |&gt; \n  leaflet() |&gt; \n  addTiles() |&gt; \n  addCircles(lng = ~lon,\n             lat = ~lat,\n             label = ~total_death_missing, # пусть возникает подпись с количеством\n             color  = ~pal_cat(collapsed_cause), # это обобщенная причина\n             opacity = 0.9,\n             popup = ~cause_of_death) |&gt;  # а это конкретная причина, появляется при клике мышкой\n  addLegend(pal = pal_cat,\n            values = ~collapsed_cause,\n            title = \"\")\n\n\n\n\n\nВообще цветовая схема не очень сочетается с подложкой, так что можно поменять подложку при помощи функции addProviderTiles() (галлерею подложек можно посмотреть вот здесь):\n\nunwelcomed |&gt; \n  filter(str_detect(date, \"2014\")) |&gt; \n  leaflet() |&gt; \n  addProviderTiles(\"Esri.WorldPhysical\") |&gt; \n  addCircles(lng = ~lon,\n             lat = ~lat,\n             label = ~total_death_missing, # пусть возникает подпись с количеством\n             color  = ~pal_cat(collapsed_cause), # это обобщенная причина\n             opacity = 0.9,\n             popup = ~cause_of_death) |&gt;  # а это конкретная причина, появляется при клике мышкой\n  addLegend(pal = pal_cat,\n            values = ~collapsed_cause,\n            title = \"\")\n\n\n\n\n\n\n\n7.3.4 Комбинация карт: leafsync\nКарты, как и все объекты в R тоже можно записать в переменную:\n\nunwelcomed |&gt; \n  filter(str_detect(date, \"2014\")) |&gt; \n  leaflet() |&gt; \n  addTiles() |&gt; \n  addCircles(lng = ~lon,\n             lat = ~lat,\n             label = ~total_death_missing, # пусть возникает подпись с количеством\n             color  = ~pal_cat(collapsed_cause), # это обобщенная причина\n             opacity = 0.9,\n             popup = ~cause_of_death) |&gt;  # а это конкретная причина, появляется при клике мышкой\n  addLegend(pal = pal_cat,\n            values = ~collapsed_cause,\n            title = \"2014\") -&gt;\n  m_2014\n\nТеперь если вызвать переменную m_2014, появится карта, которую мы сделали. Но, что если мы хотим отобразить рядом карты 2014 года и 2015 года? Как сделать фасетизацию? К сожалению, функции для фасетизации в пакете не предусмотрена, но мы можем сделать ее самостоятельно. Для начала создадим вторую карту:\n\nunwelcomed |&gt; \n  filter(str_detect(date, \"2015\")) |&gt; \n  leaflet() |&gt; \n  addTiles() |&gt; \n  addCircles(lng = ~lon,\n             lat = ~lat,\n             label = ~total_death_missing, # пусть возникает подпись с количеством\n             color  = ~pal_cat(collapsed_cause), # это обобщенная причина\n             opacity = 0.9,\n             popup = ~cause_of_death) |&gt;  # а это конкретная причина, появляется при клике мышкой\n  addLegend(pal = pal_cat,\n            values = ~collapsed_cause,\n            title = \"2015\") -&gt;\n  m_2015\n\nВключим библиотеку:\n\nlibrary(leafsync)\n\nИ теперь соединим две карты воедино:\n\nsync(m_2014, m_2015)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.3.5 Работа с полигонами и полилиниями\nЛиния\n\nmoscow_metro &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w7_moscow_metro.csv\")\n\nmoscow_metro |&gt; \n  filter(line_name == \"сокольническая\") |&gt; \n  leaflet() |&gt; \n  addTiles() |&gt; \n  addPolylines(lng = ~longitude,\n               lat = ~latitude, \n               color = \"tomato\") |&gt; \n  addCircles(lng = ~longitude,\n             lat = ~latitude)\n\n\n\n\n\nПолигоны\n\nmoscow_metro |&gt; \n  filter(line_name == \"кольцевая\") |&gt; \n  leaflet() |&gt; \n  addTiles() |&gt; \n  addPolygons(lng = ~longitude,\n              lat = ~latitude, \n              color = \"brown\") |&gt; \n  addCircles(lng = ~longitude,\n             lat = ~latitude,\n             label = ~name)\n\n\n\n\n\nК сожалению, leaflet не такой удобный, как, скажем, ggplot2, поэтому для того, чтобы нарисовать много отдельных линий или полигонов, нужно использовать цикл:\n\nmoscow_metro |&gt; \n  leaflet() |&gt; \n  addTiles() -&gt;\n  moscow_map\n\nwalk(unique(moscow_metro$line_name), function(i){\n  moscow_map &lt;&lt;- moscow_map |&gt; \n    addPolylines(lng = ~longitude,\n                 lat = ~latitude, \n                 label = ~line_name, \n                 weight = 2,\n                 data = moscow_metro |&gt; filter(line_name == i)) |&gt; \n    addCircles(lng = ~longitude,\n               lat = ~latitude,\n               label = ~name, \n               data = moscow_metro |&gt; filter(line_name == i))\n})\n\nmoscow_map",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html#ggplot2-maps-и-другие-пакеты",
    "href": "7_working_with_geodata.html#ggplot2-maps-и-другие-пакеты",
    "title": "7  Работа с геоданными",
    "section": "7.4 ggplot2, maps и другие пакеты",
    "text": "7.4 ggplot2, maps и другие пакеты\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nmap_data(\"world\") |&gt; \n  filter(region != \"Antarctica\") -&gt;\n  world\n\nworld |&gt; \n  ggplot(aes(long, lat))+\n  geom_map(map = world, aes(map_id = region), color = \"grey80\", fill = \"grey95\")+\n  geom_point(data = unwelcomed, aes(lon, lat),  alpha = 0.5, size = 0.2)+\n  coord_quickmap()+\n  theme_void()\n\n\n\n\n\n\n\n\n\nworld |&gt; \n  ggplot(aes(long, lat))+\n  geom_map(map = world, aes(map_id = region), color = \"grey80\", fill = \"grey95\")+\n  geom_point(data = unwelcomed, aes(lon, lat),  alpha = 0.5, size = 0.2)+\n  coord_quickmap()+\n  theme_void()+\n  facet_wrap(~collapsed_cause)\n\n\n\n\n\n\n\n\n\n7.4.1 Проекции\n\nstates &lt;- map_data(\"state\")\n\nstates |&gt; \n  ggplot(aes(long, lat)) +\n  geom_polygon(aes(group = group)) +\n  coord_map(\"albers\",  lat0 = 45.5, lat1 = 29.5)\n\n\n\n\n\n\n\n\n\n\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019. Geocomputation with r. CRC Press.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "7_working_with_geodata.html#footnotes",
    "href": "7_working_with_geodata.html#footnotes",
    "title": "7  Работа с геоданными",
    "section": "",
    "text": "Информация о широте и долготе иногда записывают в градусах, минутах и секундах, а иногда в десятичной записи, в R обычно используется десятичная запись. В интернете легко найти конвертеры из одного формата в другой и обратно.↩︎",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Работа с геоданными</span>"
    ]
  },
  {
    "objectID": "8_regression_analysis.html",
    "href": "8_regression_analysis.html",
    "title": "8  Основы статистического анализа",
    "section": "",
    "text": "8.1 О статистике\nСтатистика имеет большое значение в науке, и все чаще, она позволяет принимать решения правительствам, корпорациям и т. п. В области принятия решений статистику сейчас теснят методы машинного обучения, однако в науке все же статистика продолжает занимать важное место, помогая подтвердить обнаруженные факты, делать решения на основе данных и делать предсказания.\nВажно подчеркнуть разницу между статистикой и машинным обучением: она заключается в основных целях. Статистика в основном занимается выводами и моделированием процессов, которые генерируют наблюдаемые данные, в то время как машинное обучение фокусируется на поиске обобщаемых предиктивных закономерностей в данных. Несмотря на то, что некоторые методы используются как в статистике, так и в машинном обучении, все же эти две области имеют разные цели и подходы.\nВажно помнить, что статистика позволяет лишь моделировать процессы, которые стоят за генерацией данных. В связи с этим не стоит считать, что статистический вывод позволяет узнать правду или сделать правильный выбор: правильность и истинность любого конкретного случая зависит от научных установок исследователя, ответственного применения методов с соблюдением всех ограничений на их применение, качества сбора данных и теоретического обоснования процедуры анализа. Я призываю смотреть на статистику как на инструмент, который помогает в принятии решений, предсказании и моделировании: если вы забили шуруп молотком, то, вероятно, вашу задачу вы решили, но молоток сам по себе не несет ответственности за результат.\nСейчас широко распространены две школы статистического анализа: фриквентисткий (еще можно встретить термин частотный) и байесовский. Разница между этими подходами заключается в их основных принципах. Частотный подход основан на оценке статистического параметра на основе частоты его появления в выборке, в то время как байесовский подход позволяет представить оценку статистического параметра как распределение вероятностей, соединяя априорные знания о предметной области и новые данные. Фриквентистские методы получили широкое распространение в XX веке, а байесовская методы применялись задолго до фриквентистских, однако с развитием вычислительных мощностей в XXI веке популярность байесовских методов растет. В данном главе мы будем опираться на фриквентистские методы, так как погружение в байесовские методы требует некоторой значительной подготовки.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Основы статистического анализа</span>"
    ]
  },
  {
    "objectID": "8_regression_analysis.html#тест-стьюдента-t-тест",
    "href": "8_regression_analysis.html#тест-стьюдента-t-тест",
    "title": "8  Основы статистического анализа",
    "section": "8.2 Тест Стьюдента (t-тест)",
    "text": "8.2 Тест Стьюдента (t-тест)\nПервый статистический метод, который обычно обсуждают в фриквентистской статистике — это тест Стьюдента. Основное его применение заключается в сравнении средних значений двух групп (двухвыборочный тест) или среднего одной группы с некоторым значением (одновыборочный тест). Среди возможных задач, которые можно решить при помощи теста Стьюдента:\n\nоценить эффект нового лекарства по сравнению со старым;\nоценить эффект нового метода обучения на результатах тестов групп студентов;\nоценить отличие какого-нибудь параметра популяции (например, избыточного веса) по сравнению с нормой.\n\nТеперь мы обсудим стандартную процедуру фриквентистской статистики. Допустим мы сравниваем средние двух групп А и B. Принято создавать две гипотезы:\n\n\\(H_0\\) — (нулевая гипотеза) разница между группами не является статистически значимой, т. е. наблюдаемые данные могут происходят из одного ожидаемого распределения.\n\\(H_1\\) — (альтернативная гипотеза) разница является статистически значимой, т. е. наблюдаемые данные не могут происходят из одного ожидаемого распределения.\n\nНулевая гипотеза — это гипотеза, которую каждый исследователь в случае успеха отвергнет, и примет альтернативную. После применения статистического критерия (каждый критерий зависит от конкретного статистического теста, а выбор теста зависит от типа данных) исследователь считает вероятность наблюдать такой или более экстремальный результат, если верна нулевая гипотеза (p-value, p-уровень значимости).\nВ тесте Стьюдента таким распределением является t-распредление. Распределение, которое напоминает нормальное распределение, но имеет более широкие края:\n\n\n\n\n\n\n\n\n\nT-распределение имеет один параметр, который принято называть степенями свободы (degree of freedom, df). Чем больше сетпеней свободы, тем больше t-распределение похоже на нормальное распределение. Обычно этот параметр напрямую связывают с количеством наблюдений.\n\ntibble(x = rep(seq(-7, 7, by = 0.01), 4),\n       df = rep(c(5, 15, 30, 75), 1401),\n       y = dt(x, df =df)) |&gt; \n  ggplot(aes(x, y, color = as.factor(df)))+\n  geom_line()\n\n\n\n\n\n\n\n\nДавайте разберем на примере. Из статьи (Stepanova 2011) мы знаем, что носители русского языка в среднем говорят 5.31 слога в секунду со стандартным отклонением 1,93 (мужчины 5.46 слога в секунду со средним отклонением 2.02, женщины 5.23 слога в секунду со средним отклонением 1.84, дети 3.86 слога в секунду со средним отклонением 1.67). Мы опросили 30 носителей деревни N и выяснили, что средняя равна 7, а стандартное отклонение равно 2. Является ли данная разница статистически значимой? Рассмотрим данные\n\nset.seed(42)\n\ndata &lt;- rnorm(n = 30, mean = 7, sd = 2)\n\ndata\n\n [1]  9.741917  5.870604  7.726257  8.265725  7.808537  6.787751 10.023044\n [8]  6.810682 11.036847  6.874572  9.609739 11.573291  4.222279  6.442422\n[15]  6.733357  8.271901  6.431494  1.687089  2.119066  9.640227  6.386723\n[22]  3.437383  6.656165  9.429349 10.790387  6.139062  6.485461  3.473674\n[29]  7.920195  5.720010\n\n\nВот так можно визуализировать наш вопрос:\n\ntibble(data) |&gt; \n  ggplot(aes(data))+\n  geom_dotplot()+\n  geom_vline(xintercept = mean(data), size = 2, linetype = 2)+\n  geom_vline(xintercept = 5.31, size = 2, linetype = 2, color = \"red\")+\n  annotate(geom = \"text\", x = 3, color = \"red\", y = 0.75, label = \"среднее согласно\\n[Stepanova 2011]\", size = 5)\n\n\n\n\n\n\n\n\nПрименяем тест Стьюдента. Так как мы сравниваем нашу выборку с некоторым эталонным значением, мы применяем одновыборочный тест Стьюдента, а эталонное значение записываем в аргумент mu:\n\nt.test(data, mu = 5.31)\n\n\n    One Sample t-test\n\ndata:  data\nt = 3.9871, df = 29, p-value = 0.0004143\nalternative hypothesis: true mean is not equal to 5.31\n95 percent confidence interval:\n 6.199903 8.074444\nsample estimates:\nmean of x \n 7.137174 \n\n\nЕсли мы хотим визуализировать t-статистику, которую мы получили на t-распределении, получится вот такой график:\n\ntibble(x = seq(-7, 7, by = 0.01),\n       y = dt(x, df = 29)) |&gt; \n  ggplot(aes(x, y))+\n  geom_line()+\n  geom_vline(linetype = 2, xintercept = 3.9871)+\n  labs(title = \"t-распределение с параметром df = 29\")\n\n\n\n\n\n\n\n\nЕсли бы значение t-критерия оказалось где-то посередине, то тест Стьюдента бы выдал p-value больше 0.05 и тогда у нас бы не было оснований ни для отвержения, ни для принятия нулевой гипотезы.\n\n8.2.1 Двухвыборочный тест Стьюдента\nЛогика двухвыборочного теста идентична логике одновыброчного, с тем лишь исключением, что мы сравниваем две группы:\n\n\n\n\n\n\n\n\n\n\n    Welch Two Sample t-test\n\ndata:  sample_1 and sample_2\nt = -5.0632, df = 41.295, p-value = 9.005e-06\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -11.046695  -4.748026\nsample estimates:\nmean of x mean of y \n 40.93768  48.83504 \n\n\nНа практике разница видна только в названии аргументов. Представим, что у нас есть две выборки:\n\nsample_1\n\n [1] 46.85479 37.17651 41.81564 43.16431 42.02134 39.46938 47.55761 39.52670\n [9] 50.09212 39.68643 46.52435 51.43323 33.05570 38.60606 39.33339 43.17975\n[17] 38.57874 26.71772 27.79767 46.60057 38.46681 31.09346 39.14041 46.07337\n[25] 49.47597\n\nsample_2\n\n [1] 48.06289 48.84229 42.06577 52.07044 47.12002 52.04953 53.17177 54.65797\n [9] 47.25983 52.27230 42.27346 46.46993 46.17092 39.13607 50.16255 50.92699\n[17] 48.37524 53.41173 46.72983 43.84274 51.94768 46.34873 56.49846 48.05849\n[25] 52.95042\n\n\nТогда для того, чтобы применит тест Стьюдента, нужно запустить следующий код:\n\nt.test(sample_1, sample_2)\n\n\n    Welch Two Sample t-test\n\ndata:  sample_1 and sample_2\nt = -5.0632, df = 41.295, p-value = 9.005e-06\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -11.046695  -4.748026\nsample estimates:\nmean of x mean of y \n 40.93768  48.83504",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Основы статистического анализа</span>"
    ]
  },
  {
    "objectID": "8_regression_analysis.html#регрессионный-анализ",
    "href": "8_regression_analysis.html#регрессионный-анализ",
    "title": "8  Основы статистического анализа",
    "section": "8.3 Регрессионный анализ",
    "text": "8.3 Регрессионный анализ\n\n8.3.1 Основы\nСуть регрессионного анализа в моделировании связи между двумя и более переменными при помощи прямой на плоскости. Формула прямой зависит от двух параметров: свободного члена (intercept) и углового коэффициента (slope).\n\n\n\n\n\n\n\n\n\nКогда мы пытаемся научиться предсказывать данные одной переменной \\(Y\\) при помощи другой переменной \\(X\\), мы получаем похожую формулу:\n\\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times x_i + \\epsilon_i,\\] где\n\n\\(x_i\\) — \\(i\\)-ый элемент вектора значений \\(X\\);\n\\(y_i\\) — \\(i\\)-ый элемент вектора значений \\(Y\\);\n\\(\\hat\\beta_0\\) — оценка случайного члена (intercept);\n\\(\\hat\\beta_1\\) — оценка углового коэффициента (slope);\n\\(\\epsilon_i\\) — \\(i\\)-ый остаток, разница между оценкой модели (\\(\\hat\\beta_0 + \\hat\\beta_1 \\times x_i\\)) и реальным значением \\(y_i\\); весь вектор остатков иногда называют случайным шумом (на графике выделены красным).\n\n\n\n\n\n\n\n\n\n\nЗадача регрессии — оценить параметры \\(\\hat\\beta_0\\) и \\(\\hat\\beta_1\\), если нам известны все значения \\(x_i\\) и \\(y_i\\) и мы пытаемся минимизировать значния \\(\\epsilon_i\\). В данном конкретном случае, задачу можно решить аналитически и получить следующие формулы:\n\\[\\hat\\beta_1 = \\frac{(\\sum_{i=1}^n x_i\\times y_i)-n\\times\\bar x \\times \\bar y}{\\sum_{i = 1}^n(x_i-\\bar x)^2}\\]\n\\[\\hat\\beta_0 = \\bar y - \\hat\\beta_1\\times\\bar x\\]\n\n\n8.3.2 Первая регрессия\nДавайте попробуем смоделировать количество слов и в рассказах М. Зощенко в зависимости от длины рассказа:\n\nzoshenko &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w8_tidy_zoshenko.csv\")\n\nzoshenko |&gt; \n  filter(word == \"и\") |&gt; \n  distinct() -&gt;\n  zoshenko_filtered\n\nzoshenko_filtered |&gt;   \n  ggplot(aes(n_words, n))+\n  geom_point()+\n  labs(x = \"количество слов в рассказе\",\n       y = \"количество и\")\n\n\n\n\n\n\n\n\nДавайте избавимся от них и добавим регрессионную линию при помощи функции geom_smooth():\n\nzoshenko_filtered |&gt; \n  ggplot(aes(n_words, n))+\n  geom_point()+\n  geom_smooth(method = \"lm\", se = FALSE)+\n  labs(x = \"количество слов в рассказе\",\n       y = \"количество и\")\n\n\n\n\n\n\n\n\nЧтобы получить формулу этой линии нужно запустить функцию, которая оценивает линейную регрессию:\n\nfit &lt;- lm(n~n_words, data = zoshenko_filtered)\nfit\n\n\nCall:\nlm(formula = n ~ n_words, data = zoshenko_filtered)\n\nCoefficients:\n(Intercept)      n_words  \n   -1.47184      0.04405  \n\n\nВот мы и получили коэффициенты, теперь мы видим, что наша модель считает следующее:\n\\[n = -1.47184 + 0.04405 \\times n\\_words\\]\nБолее подробную информцию можно посмотреть, если запустить модель в функцию summary():\n\nsummary(fit)\n\n\nCall:\nlm(formula = n ~ n_words, data = zoshenko_filtered)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.6830  -4.3835   0.8986   4.6486  19.6413 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -1.471840   2.467149  -0.597    0.553    \nn_words      0.044049   0.003666  12.015   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.945 on 64 degrees of freedom\nMultiple R-squared:  0.6928,    Adjusted R-squared:  0.688 \nF-statistic: 144.4 on 1 and 64 DF,  p-value: &lt; 2.2e-16\n\n\nВ разделе Coefficients содержится информацию про наши коэффициенты:\n\nEstimate – полученная оценка коэффициентов;\nStd. Error – стандартная ошибка среднего;\nt value – \\(t\\)-статистика, полученная при проведении одновыборочного \\(t\\)-теста, сравнивающего данный коэфициент с 0;\nPr(&gt;|t|) – полученное \\(p\\)-значение;\nMultiple R-squared и Adjusted R-squared — одна из оценок модели, показывает связь между переменными. Без поправок совпадает с квадратом коэффициента корреляции Пирсона.\nF-statistic — \\(F\\)-статистика полученная при проведении теста, проверяющего, не являются ли хотя бы один из коэффицинтов статистически значимо отличается от нуля. Совпадает с результатами дисперсионного анализа (ANOVA).\n\nТеперь мы можем даже предсказывать значения, которые мы еще не видели. Например, сколько будет и в рассказе Зощенко длиной 1000 слов?\n\n\n\n\n\n\n\n\n\n\npredict(fit, tibble(n_words = 1000))\n\n       1 \n42.57715 \n\n\n\n\n8.3.3 Категориальные переменные\nЧто если мы хотим включить в наш анализ категориальные переменные? Давайте рассмотрим простой пример с рассказами Чехова и Зощенко, которые мы рассматривали в прошлом разделе. Мы будем анализировать логарифм доли слов деньги:\n\nchekhov &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w8_tidy_chekhov.csv\")\nzoshenko &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w8_tidy_zoshenko.csv\")\n\nchekhov |&gt; \n  bind_rows(zoshenko) |&gt; \n  filter(str_detect(word, \"деньг\")) |&gt; \n  group_by(author, titles, n_words) |&gt; \n  summarise(n = sum(n)) |&gt; \n  mutate(log_ratio = log(n/n_words)) -&gt;\n  checkov_zoshenko\n\nВизуализация выглядит так:\n\n\n\n\n\n\n\n\n\nКрасной точкой обозначены средние значения, так что мы видим, что между двумя писателями есть разница, но является ли она статистически значимой? В прошлом разделе, мы рассмотрели, что в таком случае можно сделать t-test:\n\nt.test(log_ratio~author, \n       data = checkov_zoshenko, \n       var.equal = TRUE) # здесь я мухлюю, отключая поправку Уэлча\n\n\n    Two Sample t-test\n\ndata:  log_ratio by author\nt = 6.3897, df = 124, p-value = 3.045e-09\nalternative hypothesis: true difference in means between group Зощенко and group Чехов is not equal to 0\n95 percent confidence interval:\n 1.009976 1.916472\nsample estimates:\nmean in group Зощенко   mean in group Чехов \n            -4.878002             -6.341226 \n\n\nРазница между группами является статистически значимой (t(125) = 5.6871, p-value = 8.665e-08).\nДля того, чтобы запустить регрессию на категориальных данных категориальная переменная автоматически разбивается на группу бинарных dummy-переменных:\n\ntibble(author = c(\"Чехов\", \"Зощенко\"),\n       dummy_chekhov = c(1, 0),\n       dummy_zoshenko = c(0, 1))\n\n# A tibble: 2 × 3\n  author  dummy_chekhov dummy_zoshenko\n  &lt;chr&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 Чехов               1              0\n2 Зощенко             0              1\n\n\nДальше для регрессионного анализа выкидывают одну из переменных, так как иначе модель не сойдется (dummy-переменных всегда n-1, где n — количество категорий в переменной).\n\ntibble(author = c(\"Чехов\", \"Зощенко\"),\n       dummy_chekhov = c(1, 0))\n\n# A tibble: 2 × 2\n  author  dummy_chekhov\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Чехов               1\n2 Зощенко             0\n\n\nЕсли переменная dummy_chekhov принимает значение 1, значит речь о рассказе Чехова, а если принимает значение 0, то о рассказе Зощенко. Если вставить нашу переменную в регрессионную формулу получится следующее:\n\\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times \\text{dummy\\_chekhov} + \\epsilon_i\\]\nТак как dummy_chekhov принимает либо значение 1, либо значение 0, то получается, что модель предсказывает лишь два значения:\n\\[y_i = \\left\\{\\begin{array}{ll}\\hat\\beta_0 + \\hat\\beta_1 \\times 1 + \\epsilon_i = \\hat\\beta_0 + \\hat\\beta_1 + \\epsilon_i\\text{, если рассказ Чехова}\\\\\n\\hat\\beta_0 + \\hat\\beta_1 \\times 0 + \\epsilon_i = \\hat\\beta_0 + \\epsilon_i\\text{, если рассказ Зощенко}\n\\end{array}\\right.\\]\nТаким образом, получается, что свободный член \\(\\beta_0\\) и угловой коэффициент \\(\\beta_1\\) в регресси с категориальной переменной получает другую интерпретацию. Одно из значений переменной кодируется при помощи \\(\\beta_0\\), а сумма коэффициентов \\(\\beta_0+\\beta_1\\) дают другое значение переменной. Так что \\(\\beta_1\\) — это разница между оценками двух значений переменной.\nДавайте теперь запустим регрессию на этих же данных:\n\nfit2 &lt;- lm(log_ratio~author, data = checkov_zoshenko)\nsummary(fit2)\n\n\nCall:\nlm(formula = log_ratio ~ author, data = checkov_zoshenko)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.24643 -0.61293 -0.05149  0.65130  3.09655 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   -4.878      0.210  -23.22  &lt; 2e-16 ***\nauthorЧехов   -1.463      0.229   -6.39 3.05e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9393 on 124 degrees of freedom\nMultiple R-squared:  0.2477,    Adjusted R-squared:  0.2416 \nF-statistic: 40.83 on 1 and 124 DF,  p-value: 3.045e-09\n\n\nВо-первых стоит обратить внимание на то, что R сам преобразовал нашу категориальную переменную в dummy-переменную authorЧехов. Во-вторых, можно заметить, что значения t-статистики и p-value совпадают с результатами полученными нами в t-тесте выше. Статистическти значимый коэффициент при аргументе authorЧехов следует интерпретировать как разницу средних между логарифмом долей в рассказах Чехова и Зощенко.\n\n\n8.3.4 Множественная регрессия\nМножественная регрессия позволяет проанализировать связь между зависимой и несколькими зависимыми переменными. Формула множественной регрессии не сильно отличается от формулы обычной линейной регрессии:\n\\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times x_{1i}+ \\dots+ \\hat\\beta_n \\times x_{ni} + \\epsilon_i,\\]\n\n\\(x_{ki}\\) — \\(i\\)-ый элемент векторов значений \\(X_1, \\dots, X_n\\);\n\\(y_i\\) — \\(i\\)-ый элемент вектора значений \\(Y\\);\n\\(\\hat\\beta_0\\) — оценка случайного члена (intercept);\n\\(\\hat\\beta_k\\) — коэфциент при переменной \\(X_{k}\\);\n\\(\\epsilon_i\\) — \\(i\\)-ый остаток, разница между оценкой модели (\\(\\hat\\beta_0 + \\hat\\beta_1 \\times x_i\\)) и реальным значением \\(y_i\\); весь вектор остатков иногда называют случайным шумом.\n\nВ такой регресии предикторы могут быть как числовыми, так и категориальными (со всеми вытекающими последствиями, которые мы обсудили в предудщем разделе). Такую регрессию чаще всего сложно визуализировать, так как в одну регрессионную линию вкладываются сразу несколько переменных.\nПопробуем предсказать длину лепестка на основе длины чашелистик и вида ириса:\n\niris |&gt; \n  ggplot(aes(Sepal.Length, Petal.Length, color = Species))+\n  geom_point()\n\n\n\n\n\n\n\n\nЗапустим регрессию:\n\nfit3 &lt;- lm(Petal.Length ~ Sepal.Length + Species, data = iris)\nsummary(fit3)\n\n\nCall:\nlm(formula = Petal.Length ~ Sepal.Length + Species, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.76390 -0.17875  0.00716  0.17461  0.79954 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -1.70234    0.23013  -7.397 1.01e-11 ***\nSepal.Length       0.63211    0.04527  13.962  &lt; 2e-16 ***\nSpeciesversicolor  2.21014    0.07047  31.362  &lt; 2e-16 ***\nSpeciesvirginica   3.09000    0.09123  33.870  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2826 on 146 degrees of freedom\nMultiple R-squared:  0.9749,    Adjusted R-squared:  0.9744 \nF-statistic:  1890 on 3 and 146 DF,  p-value: &lt; 2.2e-16\n\n\nВсе предикторы статистически значимы. Давайте посмотрим предсказания модели для всех наблюдений:\n\niris |&gt; \n  mutate(prediction = predict(fit3)) |&gt; \n  ggplot(aes(Sepal.Length, prediction, color = Species))+\n  geom_point()\n\n\n\n\n\n\n\n\nВсегда имеет смысл визуализировать, что нам говорит наша модель. Если использовать пакет ggeffects (или предшествовавший ему пакет effects), это можно сделать не сильно задумываясь, как это делать:\n\nlibrary(ggeffects)\nplot(ggpredict(fit3, terms = c(\"Sepal.Length\", \"Species\")))\n\n\n\n\n\n\n\n\nКак видно из графиков, наша модель имеет одинаковые угловые коэффициенты (slope) для каждого из видов ириса и разные свободные члены (intercept).\n\nsummary(fit3)\n\n\nCall:\nlm(formula = Petal.Length ~ Sepal.Length + Species, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.76390 -0.17875  0.00716  0.17461  0.79954 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -1.70234    0.23013  -7.397 1.01e-11 ***\nSepal.Length       0.63211    0.04527  13.962  &lt; 2e-16 ***\nSpeciesversicolor  2.21014    0.07047  31.362  &lt; 2e-16 ***\nSpeciesvirginica   3.09000    0.09123  33.870  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2826 on 146 degrees of freedom\nMultiple R-squared:  0.9749,    Adjusted R-squared:  0.9744 \nF-statistic:  1890 on 3 and 146 DF,  p-value: &lt; 2.2e-16\n\n\n\\[y_i = \\left\\{\\begin{array}{ll} -1.70234 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид setosa}\\\\\n-1.70234 + 2.2101 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид versicolor} \\\\\n-1.70234 + 3.09 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид virginica}\n\\end{array}\\right.\\]\n\n\n8.3.5 Сравнение моделей\nКак нам решить, какая модель лучше? Ведь теперь можно добавить сколько угодно предикторов? Давайте создадим новую модель без предиктора Species:\n\nfit4 &lt;- lm(Petal.Length ~ Sepal.Length, data = iris)\n\n\nможно сравнивать статистическую значимость предикторов\nможно сравнивать \\(R^2\\)\n\n\nsummary(fit3)$adj.r.squared\n\n[1] 0.9743786\n\nsummary(fit4)$adj.r.squared\n\n[1] 0.7583327\n\n\n\nчаще всего используют так называемые информационные критерии, самый популярный – AIC (Akaike information criterion). Сами по себе значение этого критерия не имеет значения – только в сравнении моделей, построенных на похожих данных. Чем меньше значение, тем модель лучше.\n\n\nAIC(fit3, fit4)\n\n     df       AIC\nfit3  5  52.47418\nfit4  3 387.13500\n\n\n\n\n8.3.6 Послесловие\n\nсущетсвуют ограничения на применение линейной регресии\n\nсвязь между предсказываемой переменной и предикторами должна быть линейной\nостатки должны быть нормально распределены (оценивайте визуально)\nдисперсия остатков вокруг регрессионной линии должно быть постоянно (гомоскидастично)\nпредикторы не должны коррелировать друг с другом\nвсе наблюдения в регрессии должны быть независимы друг от друга\n\n\nВот так вот выглядят остатки нашей модели на основе датасета iris. Смотрите пост, в котором обсуждается, как интерпретировать график остатков.\n\nplot(fit3, which=c(1, 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nсущетсвуют трюки, позволяющие автоматически отбирать модели (см. функцию step())\nсуществует достаточно большое семейство регрессий, который зависят от типа независимой (предсказываемой) переменной или ее распределения\n\nлогистическая (если предсказываемая переменная имеет два возможных исхода)\nмультиномиальная (если предсказываемая переменная имеет больше двух возможных дискретных исхода)\nнелиненые регресии (если связь между переменными нелинейна)\nрегрессия со смешанными эффектами (если внутри данных есть группировки, т. е. наблюдения не независимы)\nи другие.\n\n\n\n\n\n\nStepanova, S. 2011. “Russian Spontaneous Speech Rate-Based on the Speech Corpus of Russian Everyday Interaction.” In Proceedings of 17th International Congress of Phonetic Sciences, edited by Wai Sum Lee, 1902–5.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Основы статистического анализа</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Список литературы",
    "section": "",
    "text": "Lovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019.\nGeocomputation with r. CRC Press.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nStepanova, S. 2011. “Russian Spontaneous Speech Rate-Based on the\nSpeech Corpus of Russian Everyday\nInteraction.” In Proceedings of 17th\nInternational Congress of Phonetic Sciences, edited by Wai Sum Lee,\n1902–5.",
    "crumbs": [
      "Список литературы"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#типы-объектов-в-r",
    "href": "1_introduction_to_r.html#типы-объектов-в-r",
    "title": "1  Введение в R",
    "section": "1.4 Типы объектов в R",
    "text": "1.4 Типы объектов в R\nВ R достаточно много разных типов данных, особенно доступных в разных пакетах, но нас будут волновать:\n\nчисла\n\n\n5\n\n[1] 5\n\n23.1\n\n[1] 23.1\n\n32.000032\n\n[1] 32.00003\n\npi\n\n[1] 3.141593\n\n\n\nстроки\n\n\n\"мама\"\n\n[1] \"мама\"\n\n\"мама мыла раму\"\n\n[1] \"мама мыла раму\"\n\n\"О все видавшем до края мира,\nО познавшем моря, перешедшем все горы...\"\n\n[1] \"О все видавшем до края мира,\\nО познавшем моря, перешедшем все горы...\"\n\n\n\\n в выдаче обозначает перенос строки.\n\nлогические операторы\n\n\nTRUE\n\n[1] TRUE\n\nFALSE\n\n[1] FALSE\n\n\n\nпропущенные значения NA (на самом деле этот объект может быть и строкой, и числом)\n\n\nNA\n\n[1] NA\n\n\nВсе что написано после знака # не будет исполнятся компилятором, так что таким образом принято оставлять комментарии:\n\n# посчитаем сумму двух чисел\n2+2\n\n[1] 4\n\n# посчитаем сумму других двух чисел\n3+3\n\n[1] 6",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "1_introduction_to_r.html#как-справятся-с-проблемами",
    "href": "1_introduction_to_r.html#как-справятся-с-проблемами",
    "title": "1  Введение в R",
    "section": "1.12 Как справятся с проблемами",
    "text": "1.12 Как справятся с проблемами\nКод не работает очень часто, очень важно внимательно читать ошибки. Если чтение не помогло, то можно скопировать ошибку в поисковик, скорее всего кто-нибудь на Stack Overflow (место, где принято задавать вопрос) или Posit Community (место для вопросов на R и Python) уже сталкивался с вашей проблемой. Кроме того, никто не может написать пакет на R, который пройдет в основной репозиторий CRAN, не задокументировав все функции пакета. В связи с этим имеет смысл искать ответы во вкладке Help в Rstudio, а также в консоли, используя знак вопроса (или два, если ничего не находится) и имя функции, например, ?write_csv или ??read_xlsx. wd\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Введение в R</span>"
    ]
  },
  {
    "objectID": "6_working_with_time.html",
    "href": "6_working_with_time.html",
    "title": "6  Работа со временем",
    "section": "",
    "text": "6.1 Создание даты\nСамый простой способ получить дату — это преобразовать строку в формат даты, для этого надо просто упорядочить y (year), m (month) и d (day) в команде:\nymd(\"2020-01-21\")\n\n[1] \"2020-01-21\"\n\nymd(\"20-01-21\")\n\n[1] \"2020-01-21\"\n\nymd(\"20.01.21\")\n\n[1] \"2020-01-21\"\n\nymd(\"20/01/21\")\n\n[1] \"2020-01-21\"\n\nymd(\"200121\")\n\n[1] \"2020-01-21\"\n\nmdy(\"January 21st, 2020\")\n\n[1] \"2020-01-21\"\n\ndmy(\"21-Jan-2020\")\n\n[1] \"2020-01-21\"\nКоманды понимают не только английский (хоть и с трудом):\ndmy(\"21 янв 2020\", locale = \"ru_RU.UTF-8\")\n\n[1] \"2020-01-21\"\n\ndmy(\"21 янв. 2020\", locale = \"ru_RU.UTF-8\")\n\n[1] \"2020-01-21\"\n\ndmy(\"21 ян 2020\", locale = \"ru_RU.UTF-8\")\n\nWarning: All formats failed to parse. No formats found.\n\n\n[1] NA\n\ndmy(\"21 янва 2020\", locale = \"ru_RU.UTF-8\")\n\n[1] \"2020-01-21\"\n\ndmy(\"21 января 2020\", locale = \"ru_RU.UTF-8\")\n\nWarning: 1 failed to parse.\n\n\n[1] NA\n\ndmy(\"21 январь 2020\", locale = \"ru_RU.UTF-8\")\n\n[1] \"2020-01-21\"\n\ndmy(\"21 Январь 2020\", locale = \"ru_RU.UTF-8\")\n\n[1] \"2020-01-21\"\nАналогично сделаны команды состоящие из h, m, s:\nhms(\"20:01:02\")\n\n[1] \"20H 1M 2S\"\n\nhm(\"20.01\")\n\n[1] \"20H 1M 0S\"\n\nms(\"23:59\")\n\n[1] \"23M 59S\"\nТакже существует команда make_datetime(), которая позволяет сделать дату из нескольких переменных:\nflights |&gt; \n  mutate(departure = make_datetime(year, month, day, hour, minute)) |&gt; \n  select(departure)\n\n# A tibble: 336,776 × 1\n   departure          \n   &lt;dttm&gt;             \n 1 2013-01-01 05:15:00\n 2 2013-01-01 05:29:00\n 3 2013-01-01 05:40:00\n 4 2013-01-01 05:45:00\n 5 2013-01-01 06:00:00\n 6 2013-01-01 05:58:00\n 7 2013-01-01 06:00:00\n 8 2013-01-01 06:00:00\n 9 2013-01-01 06:00:00\n10 2013-01-01 06:00:00\n# ℹ 336,766 more rows",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Работа со временем</span>"
    ]
  },
  {
    "objectID": "6_working_with_time.html#работа-с-часовыми-поясами",
    "href": "6_working_with_time.html#работа-с-часовыми-поясами",
    "title": "6  Работа со временем",
    "section": "6.2 Работа с часовыми поясами",
    "text": "6.2 Работа с часовыми поясами\nЗемля разбита на условные географическо-административные зоны, в которых действуют свои правила работы со временем. В каких-то зонах есть переход на зимнее/летнее время, а где-то его нет. В некоторых точках Земли понятие часового пояса не имеет смысла, однако все равно есть конвенции того, какое время на этой теретории использовать. Функция make_datetime(), которую мы рассмотрели, использует по-умолчанию всемирное координированное время (UTC). Обозначение интересующего часового пояса можно посмотреть в интернете, однако основная информации о возможных значениях аргумента tz хранится в системе пользователя.\n\ndmy_hm(\"21-01-2001 15^43\", tz = \"Europe/Moscow\")\n\n[1] \"2001-01-21 15:43:00 MSK\"\n\ndmy_hm(\"21-01-2001 15^43\", tz = \"America/Chicago\")\n\n[1] \"2001-01-21 15:43:00 CST\"\n\ndmy_hm(\"21-01-2001 15^43\", tz = \"America/New_York\")\n\n[1] \"2001-01-21 15:43:00 EST\"\n\ndmy_hm(\"21-01-2001 15^43\", tz = \"Africa/Cairo\")\n\n[1] \"2001-01-21 15:43:00 EET\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Работа со временем</span>"
    ]
  },
  {
    "objectID": "6_working_with_time.html#извлечение-компонентов-даты",
    "href": "6_working_with_time.html#извлечение-компонентов-даты",
    "title": "6  Работа со временем",
    "section": "6.3 Извлечение компонентов даты",
    "text": "6.3 Извлечение компонентов даты\nДля извлечения компонентов даты используются функции year(), month(), week() (номер недели в году), mday() (day of the month), wday() (номер дня в неделе), yday() (номер дня в году), hour(), minute() и second():\n\ndate_example &lt;- flights$time_hour[1]\ndate_example\n\n[1] \"2013-01-01 05:00:00 EST\"\n\nyear(date_example)\n\n[1] 2013\n\nmonth(date_example)\n\n[1] 1\n\nmonth(date_example, label = TRUE)\n\n[1] Jan\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec\n\nmonth(date_example, label = TRUE, abbr = FALSE)\n\n[1] January\n12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December\n\nmonth(date_example, label = TRUE, locale = \"ru_RU.UTF-8\")\n\n[1] янв\n12 Levels: янв &lt; фев &lt; мар &lt; апр &lt; мая &lt; июн &lt; июл &lt; авг &lt; сен &lt; ... &lt; дек\n\nweek(date_example)\n\n[1] 1\n\nmday(date_example)\n\n[1] 1\n\nwday(date_example)\n\n[1] 3\n\nwday(date_example, label = TRUE)\n\n[1] Tue\nLevels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\nwday(date_example, label = TRUE, abbr = FALSE)\n\n[1] Tuesday\n7 Levels: Sunday &lt; Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; ... &lt; Saturday\n\nwday(date_example, label = TRUE, locale = \"ru_RU.UTF-8\")\n\n[1] Вт\nLevels: Вс &lt; Пн &lt; Вт &lt; Ср &lt; Чт &lt; Пт &lt; Сб\n\nyday(date_example)\n\n[1] 1\n\nhour(date_example)\n\n[1] 5\n\nminute(date_example)\n\n[1] 0\n\nsecond(date_example)\n\n[1] 0\n\n\nТак же есть функция leap_year(), которая сообщает информацию, является ли выбранный год високосным:\n\nleap_year(2019)\n\n[1] FALSE\n\nleap_year(2020)\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Работа со временем</span>"
    ]
  },
  {
    "objectID": "6_working_with_time.html#операции-с-датами",
    "href": "6_working_with_time.html#операции-с-датами",
    "title": "6  Работа со временем",
    "section": "6.4 Операции с датами",
    "text": "6.4 Операции с датами\nЕсли взять две даты, то можно узнать разницу между ними и т. п.:\n\nymd(\"2020-01-21\") - ymd(\"2020-01-19\")\n\nTime difference of 2 days\n\nymd(\"2020-01-19\") - ymd(\"2020-01-21\")\n\nTime difference of -2 days\n\n\nОбратите внимание на результат работы этого выражения:\n\nhm(\"21:00\") - hm(\"18:10\")\n\n[1] \"3H -10M 0S\"\n\n\nВидимо, почему-то в таком использовании происходит поэлементная операция с часами, минутами, и секундами, так что в результате получаются отрицательные минуты. Однако, если использовать полные даты, то этого эффекта нет:\n\nymd_hm(\"2020-01-21, 21:00\") - ymd_hm(\"2020-01-21, 18:10\")\n\nTime difference of 2.833333 hours\n\nymd_hm(\"2020-01-21, 21:00\") - hm(\"18:10\")\n\n[1] \"2020-01-21 02:50:00 UTC\"\n\n\nТакже существует функция difftime(), которая позволяет настраивать единицы, в которых выдается результат:\n\ndifftime(ymd_hm(\"2020-01-21, 21:00\"), ymd_hm(\"2020-01-21, 18:10\"), units = \"mins\")\n\nTime difference of 170 mins\n\ndifftime(ymd_hm(\"2020-01-21, 21:00\"), ymd_hm(\"2020-01-21, 18:10\"), units = \"hours\")\n\nTime difference of 2.833333 hours\n\n\nОднако простые даты, не являются временными отрезками, так что их нельзя складывать, вычитать, умножать и т. д. Для удобства операций в lubridate вводится несколько сущностей:\n\nperiods — промежутки времени, которые игнорируют нерегулярности во времени, сразу прибавляя 1 к соответствующему разряду, вводятся функциями years(), months(), weeks(), days(), hours(), minutes(), seconds(), period()\nduration — промежутки времени, которые учитывают нерегулярности во времени, добавляя стандартную длительность единицы, вводятся функциями dyears(), dweeks(), ddays(), dhours(), dminutes(), dseconds(), duration()\n\n\nРассмотрим несколько сложных случаев:\n\nвисокосный год\n\n\nymd(\"2019-03-01\")+years(1)\n\n[1] \"2020-03-01\"\n\nymd(\"2019-03-01\")+dyears(1)\n\n[1] \"2020-02-29 06:00:00 UTC\"\n\n\n\nпереход на летнее время\n\n\nymd_hms(\"2020-03-07 13:00:00\", tz = \"America/New_York\") + days(1)\n\n[1] \"2020-03-08 13:00:00 EDT\"\n\nymd_hms(\"2020-03-07 13:00:00\", tz = \"America/New_York\") + ddays(1)\n\n[1] \"2020-03-08 14:00:00 EDT\"\n\n\n\nпереход на зимнее время\n\n\nymd_hms(\"2020-10-31 13:00:00\", tz = \"America/New_York\") + days(1)\n\n[1] \"2020-11-01 13:00:00 EST\"\n\nymd_hms(\"2020-10-31 13:00:00\", tz = \"America/New_York\") + ddays(1)\n\n[1] \"2020-11-01 12:00:00 EST\"\n\n\nПоследняя операция с датами, которую мы рассмотрим — округление:\n\nfloor_date() — округление в меньшую сторону\nround_date() — математическое округление\nceiling_date() — округление в большую сторону\n\n\n\nfloor_date(ymd(\"2020-01-16\"), unit = \"month\")\n\n[1] \"2020-01-01\"\n\nround_date(ymd(\"2020-01-16\"), unit = \"month\")\n\n[1] \"2020-01-01\"\n\nround_date(ymd(\"2020-01-17\"), unit = \"month\")\n\n[1] \"2020-02-01\"\n\nceiling_date(ymd(\"2020-01-16\"), unit = \"month\")\n\n[1] \"2020-02-01\"\n\nceiling_date(ymd(\"2020-01-16\"), unit = \"year\")\n\n[1] \"2021-01-01\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Работа со временем</span>"
    ]
  },
  {
    "objectID": "6_working_with_time.html#визуализация-времени-данные-левада-центра",
    "href": "6_working_with_time.html#визуализация-времени-данные-левада-центра",
    "title": "6  Работа со временем",
    "section": "6.5 Визуализация времени: данные Левада-центра",
    "text": "6.5 Визуализация времени: данные Левада-центра\nПакет tidyverse понимает переменные типа дата, и позволяет их фильтровать и визуализировать. Возьмем для примера датасет из проекта The Unwelcomed Мохамада А. Вэйкда (Mohamad A. Waked), содержащий информацию о месте и причинах смерти мигрантов и беженцев по всему миру с января 2014 года по июнь 2019 года.\n\nunwelcomed &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w6_death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv\")\nunwelcomed |&gt; \n  mutate(date = dmy(date)) |&gt; \n  ggplot(aes(date, total_death_missing, color = collapsed_cause))+\n  geom_point()+\n  scale_y_log10()+\n  labs(y = \"number of death/missing\")\n\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n\n\n\n\n\n\n\n\nunwelcomed |&gt; \n  mutate(date = dmy(date)) |&gt; \n  filter(date &lt; dmy(\"1-1-2016\")) |&gt; \n  ggplot(aes(date, total_death_missing, color = collapsed_cause))+\n  geom_point()+\n  scale_y_log10()+\n  labs(y = \"number of death/missing\")\n\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n\n\n\n\n\n\n\n\n\nОднако ко переменным со врменем не всегда относятся аккуратно. Рассмотрим график с сайта Левада-центра — российской негосударственной исследовательской организации, которая проводит социологические и маркетинговые исследования (график взят отсюда):\n\nНа первый взгляд, в этом графике нет ничего странного, однако если присмотреться к динамической версии на сайте Левада-центра, можно обнаружить, что на идущие подряд измерения расположены на одинаковом расстоянии друг от друга, например, 05.2014, 07.2014, 11.2014. Вот здесь можно скачать данные, по которым строился этот график. Вот как он выглядит, если считать временную переменную как время\n\nlevada &lt;- read_csv(\"https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w6_2019.01_levada_countries.csv\")\nlevada |&gt; \n  mutate(date = str_c(\"1-\", date),\n         date = dmy(date)) |&gt; \n  filter(towards == \"USA\") |&gt; \n  pivot_longer(names_to = \"answer\", values_to = \"number\", good:bad) |&gt; \n  ggplot(aes(date, number, color = answer))+\n  geom_line()+\n  labs(x = \"\", y = \"\", caption = \"данные Левада-центра\")+\n  scale_y_continuous(limits = c(0, 100))+\n  theme(legend.position = c(0.1, 0.9), legend.title = element_blank())\n\n\n\n\n\n\n\n\nНа графике теперь видно, насколько регулярно проводились опросы: в начале 90-ых опросы проводились реже, потом часто, потом в районе 2010 года был перерыв. График Левада-центра можно оправдать тем, что они представляют данные от замера к замеру, так что по оси x находится как бы категориальная переменная со значениями замер 05.2014, замер 07.2014, замер 11.2014 и т. д. Однако это совсем неочевидно из графика.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Работа со временем</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#использование-конвеера-пайпа",
    "href": "2_data_transformation.html#использование-конвеера-пайпа",
    "title": "2  Трансформация данных",
    "section": "2.2 Использование конвеера (пайпа)",
    "text": "2.2 Использование конвеера (пайпа)\nВ нашем коде мы часто будем использовать знаки конвеера (или пайпа): |&gt; (также можно встретить популярный ранее %&gt;%). Конвеер призван показывать последовательность действий. Сочетание клавиш для написание конвеера: Ctrl/Cmd + M.\n\nmean(sqrt(abs(sin(c(1:100, NA)))), na.rm = TRUE)\n\n[1] 0.7654264\n\nc(1:100, NA) |&gt;\n  sin() |&gt; \n  abs() |&gt; \n  sqrt() |&gt; \n  mean(na.rm = TRUE)\n\n[1] 0.7654264\n\n\nВыражения с конвеерами можно запускать частями и смотреть, что на каком этапе трансформации данных получилось. Это полезно при поиске ошибок.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функция-select",
    "href": "2_data_transformation.html#функция-select",
    "title": "2  Трансформация данных",
    "section": "2.4 Функция select()",
    "text": "2.4 Функция select()\nФункция select() позволяет выбрать из датасета некоторый набор столбцов.\n\nzhadina |&gt; \n  select(word_1, type, n)\n\n# A tibble: 26 × 3\n   word_1          type           n\n   &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина шоколадина   941\n 2 жадина-говядина шоколадина    44\n 3 жадина-говядина шоколадина   250\n 4 жадина-говядина огурец        11\n 5 жадина-говядина шоколадина  1117\n 6 жадина-говядина шоколадина    12\n 7 жадина-говядина шоколадина    29\n 8 жадина-говядина огурец       343\n 9 жадина-говядина шоколадина    10\n10 жадина-говядина другое        10\n# ℹ 16 more rows\n\n\nВнутри функции select() можно использовать функции, которые позволяют не только перечислять через запятую необходимые столбцы, но и выделять их по имени:\n\nzhadina |&gt; \n  select(starts_with(\"word\"))\n\n# A tibble: 26 × 3\n   word_1          word_2  word_3    \n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;     \n 1 жадина-говядина большая шоколадина\n 2 жадина-говядина бука    шоколадина\n 3 жадина-говядина булка   шоколадина\n 4 жадина-говядина в *опе  огурец    \n 5 жадина-говядина в *опе  шоколадина\n 6 жадина-говядина гнилая  шоколадина\n 7 жадина-говядина дома    шоколадина\n 8 жадина-говядина зеленый огурец    \n 9 жадина-говядина злая    шоколадина\n10 жадина-говядина кислая  капуста   \n# ℹ 16 more rows\n\nzhadina |&gt; \n  select(ends_with(\"1\"))\n\n# A tibble: 26 × 1\n   word_1         \n   &lt;chr&gt;          \n 1 жадина-говядина\n 2 жадина-говядина\n 3 жадина-говядина\n 4 жадина-говядина\n 5 жадина-говядина\n 6 жадина-говядина\n 7 жадина-говядина\n 8 жадина-говядина\n 9 жадина-говядина\n10 жадина-говядина\n# ℹ 16 more rows\n\nzhadina |&gt; \n  select(matches(\"ord\"))\n\n# A tibble: 26 × 3\n   word_1          word_2  word_3    \n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;     \n 1 жадина-говядина большая шоколадина\n 2 жадина-говядина бука    шоколадина\n 3 жадина-говядина булка   шоколадина\n 4 жадина-говядина в *опе  огурец    \n 5 жадина-говядина в *опе  шоколадина\n 6 жадина-говядина гнилая  шоколадина\n 7 жадина-говядина дома    шоколадина\n 8 жадина-говядина зеленый огурец    \n 9 жадина-говядина злая    шоколадина\n10 жадина-говядина кислая  капуста   \n# ℹ 16 more rows\n\n\nКроме того, внутри функции select() действует оператор двоеточие, который мы видели при создании векторов 5:10:\n\nzhadina |&gt; \n  select(word_3:n) # от колонки word_3 до колонки n\n\n# A tibble: 26 × 3\n   word_3     type           n\n   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 шоколадина шоколадина   941\n 2 шоколадина шоколадина    44\n 3 шоколадина шоколадина   250\n 4 огурец     огурец        11\n 5 шоколадина шоколадина  1117\n 6 шоколадина шоколадина    12\n 7 шоколадина шоколадина    29\n 8 огурец     огурец       343\n 9 шоколадина шоколадина    10\n10 капуста    другое        10\n# ℹ 16 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  },
  {
    "objectID": "2_data_transformation.html#функция-filter",
    "href": "2_data_transformation.html#функция-filter",
    "title": "2  Трансформация данных",
    "section": "2.5 Функция filter()",
    "text": "2.5 Функция filter()\nФункция filter() позволяет отфильтровыввать строки таблицы по одному или нескольким условиям.\n\nzhadina |&gt; \n  filter(n &gt; 100)\n\n# A tibble: 9 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина большая  шоколадина шоколадина   941\n2 жадина-говядина булка    шоколадина шоколадина   250\n3 жадина-говядина в *опе   шоколадина шоколадина  1117\n4 жадина-говядина зеленый  огурец     огурец       343\n5 жадина-говядина кусок    шоколадины шоколадина   113\n6 жадина-говядина *опа     шоколадина шоколадина   299\n7 жадина-говядина пустая   шоколадина шоколадина  3774\n8 жадина-говядина соленый  огурец     огурец     26910\n9 жадина-говядина турецкий барабан    барабан     3003\n\nzhadina |&gt; \n  filter(n &lt; 100)\n\n# A tibble: 17 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина бука     шоколадина шоколадина    44\n 2 жадина-говядина в *опе   огурец     огурец        11\n 3 жадина-говядина гнилая   шоколадина шоколадина    12\n 4 жадина-говядина дома     шоколадина шоколадина    29\n 5 жадина-говядина злая     шоколадина шоколадина    10\n 6 жадина-говядина кислая   капуста    другое        10\n 7 жадина-говядина кошка    поросятина другое        42\n 8 жадина-говядина кошка    шоколадина шоколадина    18\n 9 жадина-говядина никто ее не ест     другое        10\n10 жадина-говядина на пузе  барабан    барабан       14\n11 жадина-говядина немецкий барабан    барабан       12\n12 жадина-говядина простая  шоколадина шоколадина    59\n13 жадина-говядина соленый  барабан    барабан       11\n14 жадина-говядина соленый  помидор    другое        17\n15 жадина-говядина сухая    шоколадина шоколадина    16\n16 жадина-говядина тупая    шоколадина шоколадина    50\n17 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(n &lt;= 100) # меньше или равно\n\n# A tibble: 17 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина бука     шоколадина шоколадина    44\n 2 жадина-говядина в *опе   огурец     огурец        11\n 3 жадина-говядина гнилая   шоколадина шоколадина    12\n 4 жадина-говядина дома     шоколадина шоколадина    29\n 5 жадина-говядина злая     шоколадина шоколадина    10\n 6 жадина-говядина кислая   капуста    другое        10\n 7 жадина-говядина кошка    поросятина другое        42\n 8 жадина-говядина кошка    шоколадина шоколадина    18\n 9 жадина-говядина никто ее не ест     другое        10\n10 жадина-говядина на пузе  барабан    барабан       14\n11 жадина-говядина немецкий барабан    барабан       12\n12 жадина-говядина простая  шоколадина шоколадина    59\n13 жадина-говядина соленый  барабан    барабан       11\n14 жадина-говядина соленый  помидор    другое        17\n15 жадина-говядина сухая    шоколадина шоколадина    16\n16 жадина-говядина тупая    шоколадина шоколадина    50\n17 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(n &gt;= 100) # больше или равно\n\n# A tibble: 9 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина большая  шоколадина шоколадина   941\n2 жадина-говядина булка    шоколадина шоколадина   250\n3 жадина-говядина в *опе   шоколадина шоколадина  1117\n4 жадина-говядина зеленый  огурец     огурец       343\n5 жадина-говядина кусок    шоколадины шоколадина   113\n6 жадина-говядина *опа     шоколадина шоколадина   299\n7 жадина-говядина пустая   шоколадина шоколадина  3774\n8 жадина-говядина соленый  огурец     огурец     26910\n9 жадина-говядина турецкий барабан    барабан     3003\n\nzhadina |&gt; \n  filter(n != 10) # не равно\n\n# A tibble: 23 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  огурец     огурец        11\n 5 жадина-говядина в *опе  шоколадина шоколадина  1117\n 6 жадина-говядина гнилая  шоколадина шоколадина    12\n 7 жадина-говядина дома    шоколадина шоколадина    29\n 8 жадина-говядина зеленый огурец     огурец       343\n 9 жадина-говядина кошка   поросятина другое        42\n10 жадина-говядина кошка   шоколадина шоколадина    18\n# ℹ 13 more rows\n\nzhadina |&gt; \n  filter(n == 10) # равно (дважды знак равно)\n\n# A tibble: 3 × 5\n  word_1          word_2   word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина злая     шоколадина шоколадина    10\n2 жадина-говядина кислая   капуста    другое        10\n3 жадина-говядина никто ее не ест     другое        10\n\nzhadina |&gt; \n  filter(word_3 == \"шоколадина\")\n\n# A tibble: 13 × 5\n   word_1          word_2  word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая шоколадина шоколадина   941\n 2 жадина-говядина бука    шоколадина шоколадина    44\n 3 жадина-говядина булка   шоколадина шоколадина   250\n 4 жадина-говядина в *опе  шоколадина шоколадина  1117\n 5 жадина-говядина гнилая  шоколадина шоколадина    12\n 6 жадина-говядина дома    шоколадина шоколадина    29\n 7 жадина-говядина злая    шоколадина шоколадина    10\n 8 жадина-говядина кошка   шоколадина шоколадина    18\n 9 жадина-говядина *опа    шоколадина шоколадина   299\n10 жадина-говядина простая шоколадина шоколадина    59\n11 жадина-говядина пустая  шоколадина шоколадина  3774\n12 жадина-говядина сухая   шоколадина шоколадина    16\n13 жадина-говядина тупая   шоколадина шоколадина    50\n\nzhadina |&gt; \n  filter(word_3 != \"шоколадина\")\n\n# A tibble: 13 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина в *опе   огурец     огурец        11\n 2 жадина-говядина зеленый  огурец     огурец       343\n 3 жадина-говядина кислая   капуста    другое        10\n 4 жадина-говядина кошка    поросятина другое        42\n 5 жадина-говядина никто ее не ест     другое        10\n 6 жадина-говядина кусок    шоколадины шоколадина   113\n 7 жадина-говядина на пузе  барабан    барабан       14\n 8 жадина-говядина немецкий барабан    барабан       12\n 9 жадина-говядина соленый  барабан    барабан       11\n10 жадина-говядина соленый  огурец     огурец     26910\n11 жадина-говядина соленый  помидор    другое        17\n12 жадина-говядина турецкий барабан    барабан     3003\n13 жадина-говядина турецкий таракан    другое        13\n\nzhadina |&gt; \n  filter(nchar(word_3) == 7)\n\n# A tibble: 7 × 5\n  word_1          word_2   word_3  type        n\n  &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;\n1 жадина-говядина кислая   капуста другое     10\n2 жадина-говядина на пузе  барабан барабан    14\n3 жадина-говядина немецкий барабан барабан    12\n4 жадина-говядина соленый  барабан барабан    11\n5 жадина-говядина соленый  помидор другое     17\n6 жадина-говядина турецкий барабан барабан  3003\n7 жадина-говядина турецкий таракан другое     13\n\n\nКроме того, условия можно перечислить через запятую (аналог логического и):\n\nzhadina |&gt; \n  filter(n &gt; 15,\n         n &lt; 100)\n\n# A tibble: 8 × 5\n  word_1          word_2  word_3     type           n\n  &lt;chr&gt;           &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n1 жадина-говядина бука    шоколадина шоколадина    44\n2 жадина-говядина дома    шоколадина шоколадина    29\n3 жадина-говядина кошка   поросятина другое        42\n4 жадина-говядина кошка   шоколадина шоколадина    18\n5 жадина-говядина простая шоколадина шоколадина    59\n6 жадина-говядина соленый помидор    другое        17\n7 жадина-говядина сухая   шоколадина шоколадина    16\n8 жадина-говядина тупая   шоколадина шоколадина    50\n\n\nЛогическое “или” обозначается палочкой |:\n\nzhadina |&gt; \n  filter(n &lt; 15 | n &gt; 100)\n\n# A tibble: 18 × 5\n   word_1          word_2   word_3     type           n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt;\n 1 жадина-говядина большая  шоколадина шоколадина   941\n 2 жадина-говядина булка    шоколадина шоколадина   250\n 3 жадина-говядина в *опе   огурец     огурец        11\n 4 жадина-говядина в *опе   шоколадина шоколадина  1117\n 5 жадина-говядина гнилая   шоколадина шоколадина    12\n 6 жадина-говядина зеленый  огурец     огурец       343\n 7 жадина-говядина злая     шоколадина шоколадина    10\n 8 жадина-говядина кислая   капуста    другое        10\n 9 жадина-говядина никто ее не ест     другое        10\n10 жадина-говядина кусок    шоколадины шоколадина   113\n11 жадина-говядина на пузе  барабан    барабан       14\n12 жадина-говядина немецкий барабан    барабан       12\n13 жадина-говядина *опа     шоколадина шоколадина   299\n14 жадина-говядина пустая   шоколадина шоколадина  3774\n15 жадина-говядина соленый  барабан    барабан       11\n16 жадина-говядина соленый  огурец     огурец     26910\n17 жадина-говядина турецкий барабан    барабан     3003\n18 жадина-говядина турецкий таракан    другое        13",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Трансформация данных</span>"
    ]
  }
]