# Введение в R

## Установка R и RStudio

В данной книге используется исключительно R [@r_core_team], так что для занятий понадобятся:

- R
    - [на Windows](https://cran.r-project.org/bin/windows/base/)
    - [на Mac](https://cran.r-project.org/bin/macosx/)
    - [на Linux](https://cran.rstudio.com/bin/linux/), также можно установить из командной строки:
    
```
sudo apt-get install r-base
```

- RStudio --- IDE для R ([можно скачать здесь](https://www.rstudio.com/products/rstudio/download/))
* и некоторые пакеты на R

Часто можно увидеть или услышать, что R --- язык программирования для "статистической обработки данных". Изначально это, конечно, было правдой, но уже давно R --- это полноценный язык программирования, который при помощи своих пакетов позволяет решать огромный спектр задач. В данной книге используется следующая версия R:

```{r}
#| echo: false
sessionInfo()$R.version$version.string |> cat()
```

Некоторые люди не любят устанавливать лишние программы себе на компьютер, несколько вариантов есть и для них:

- [RStudio cloud](https://posit.co/download/rstudio-desktop/) --- полная функциональность RStudio с некоторыми ограничениями;
- [webR REPL](https://webr.r-wasm.org/latest/) --- ограниченная версия компилятора R, которая работает в вашем браузере и не требует никаких установок на компьютер
- [Jupyter](https://jupyter.org/) ноутбуки;
- [Google Colab](https://colab.research.google.com) (нужно в настройках переключить ядро);
- [VS Code](https://code.visualstudio.com/) --- другое IDE, которое также позволяет работать с R;
- в принципе, в IDE нет нужды, можно работать из терминала, после установки, нужно всего лишь набрать `R`.

## Знакомство с RStudio

`RStudio` --- основной IDE для R. После установки R и RStudio можно открыть RStudio и перед вами предстанет что-то похожее на изображение ниже:

![RStudio при первом открытии](images/01_01_rstudio_initial_view.png)
После нажатия на двойное окошко чуть левее надписи *Environment* откроется окно скрипта.

![Подокна RStudio](images/01_02_rstudio_initial_view.png)

Все следующие команды можно 

- вводить в окне консоли, и тогда для исполнения следует нажимать клавишу `Enter`.
- вводить в окне скрипта, и тогда для исполнения следует нажимать клавиши `Ctrl/Cmd + Enter` или на команду Run на панели окна скрипта. Все, что введено в окне скрипта можно редактировать как в любом текстовом редакторе, в том числе сохранять `Ctrl/Cmd + S`.

## R как калькулятор

Давайте начнем с самого простого и попробуем использовать R как простой калькулятор. `+`, `-`, `*`, `/`, `^` (степень), `()` и т. д.

```{r}
40+2
3-2
5*6
99/9
2+4*2
(2+4)*2
2^3
```

Обратите внимание на то, что разделителем целой и дробной частей является точка, кроме того, если целая часть состоит исключительно из 0, то ее можно опустить. 

```{r}
50.3 + .7
```

## Типы объектов в R

В R достаточно много разных типов данных, особенно доступных в разных пакетах, но нас будут волновать:

- числа

```{r}
5
23.1
32.000032
pi
```

- строки

```{r}
"мама"
"мама мыла раму"
"О все видавшем до края мира,
О познавшем моря, перешедшем все горы..."
```

`\n` в выдаче обозначает перенос строки.

- логические операторы

```{r}
TRUE
FALSE
```

- пропущенные значения `NA` (на самом деле этот объект может быть и строкой, и числом)

```{r}
NA
```

Все что написано после знака `#` не будет исполнятся компилятором, так что таким образом принято оставлять комментарии:

```{r}
# посчитаем сумму двух чисел
2+2

# посчитаем сумму других двух чисел
3+3
```

## Создание переменных

Для создания переменных следует задать имя переменной и использовать знак присваивания `<-` (`Alt + -`).

```{r}
my_var <- 55 + 412
```

Обратите внимание, что резульатат суммы не выводится. Он сохраняется в переменной и не будет показано, пока мы не вызовем переменную. Кроме того будут работать и другие способы присвоения, хотя эти способы и не рекомендованы в R:

```{r}
my_var = 55+12
5512+412 -> my_var
```

Для того, чтобы вызвать нужную переменную, достаточно использовать ее имя:

```{r}
my_var
my_var + 33
```

Если хочется поменять значение переменной, то нужно снова использовать присваивание:

```{r}
my_var <- my_var + 42
my_var
```

Специфицировать при присваивонии тип переменной никак не нужно:

```{r}
my_var2 <- "Эфывфы вфыв"
my_var3 <- TRUE
my_var4 <- 1212.1212124
```

В R есть ограничения на названия переменных (см. подробнее в справке `?make.names`):

- имя может содержать буквы, числа, точку (`.`) и нижнее подчеркивание (`_`);
- имя должно начинаться на букву;
- имя не может совпадать совпадать с одним из зарезервиронных имен: `if`, `else`, `repeat`, `while`, `function`, `for`, `in`, `next`, `break`, `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`, `NA`, `NA_integer_`, `NA_real_`, `NA_complex_`, `NA_character_` (см. подробнее в справке `?Reserved`); 
- мы рекомендуем использовать только латинские буквы в названии (хотя любые ASCII символы подойдут);
- мы рекомендуем не называть переменные именами других функций в R, например, `filter`, `source` и т. п.
- в разных пакетах R Вы увидите разные стратегии называния функций и переменных, но самая распространенная --- с использованием нижнего подчеркивания:
    - i_use_snake_case;
    - otherPeopleUseCamelCase;
    - some.people.use.periods;
    - главное: не перемешивать разные стили.

## Векторы

Векторы в R --- это один из базовых элементов, который позволяет создавать объекты состоящие из нескольких единиц. Самый простой вектор, который отображает последовательность чисел можно создать следующим образом:

```{r}
1:10
10:1
20:-9
```

При помощи двоеточия можно создавать последовательности чисел с шагом один. К получившимся объектам можно применять арифметические операции: они будут применяться к каждому элементу вектора:

```{r}
my_var <- 13:3

my_var*2
my_var^3
```

Если же нужно создать вектор, которой последовательностью не является, следует использовать функцию `c()` (от слова *combine*):

```{r}
fibonacci_sequence <- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144)
cyrillic_syllables <- c("сяк", "учк", "щип", "арг", "фыщ")
```
Основное правило векторов заключается в том, что элементы вектора должны быть одного типа иначе R будет сам приводить все элементы к единому формату (по-английски это называют coercion):

```{r}
c(5, 9, 11, TRUE) # TRUE превратится в 1
c("в", "золотой", "клубочек", "спрятался", 1, "дубочек") # 1 превратится в строку "1"
```

Кроме того в R есть встроенные векторы:

```{r}
letters
LETTERS
month.name
month.abb
```

## Индексация векторов

Чтобы вызвать какой-то элемент вектора, нужно написать в квадратных скобках номер, требуемого элемента:

```{r}
letters[13]
```

Индексы тоже могут быть вектором. Один и тот же элемент мможно вызвать несколько раз:

```{r}
letters[c(13, 1, 15, 13)]
```

Кроме того, в качестве индекса можно давать какую-то инструкцию. Например, так мы можем вывести все элементы вектора `v`, которые на цело делятся на три:

```{r}
v <- 100:1
v[v %% 3 == 0]
```

Эта конструкция достаточно сложная, так что давайте разберем ее поэтапно. Оператор `%%` возвращает остаток от деления:

```{r}
v %% 3
```

Оператор `==` сравнивает каждый элемент вектора с 0 (см. противоположный оператор --- `!=`) и возвращает логический вектор:

```{r}
v %% 3 == 0
```

А потом уже логический вектор `TRUE` и `FALSE` подается в качестве индекса вектору и в результате выражение возвращает тоько те элементы, которым соотвествует `TRUE`:

```{r}
v[v %% 3 == 0]
```

Возможно, внимательный пользователь уже заметил, что индексация в R идет с единицы. При вызове нулевого индекса будет результат нулевой длинны, а если в индексах есть еще другие элементы, нулевой индекс -- будет проигнорирован.

```{r}
letters[0]
letters[c(2, 0, 4)]
```

Индексирование с минусом выдаст все значения вектора за исключением выбранных:

```{r}
letters[-3] # вектор без буквы c
letters[-c(1, 4, 9)] # вектор без букв a, d и i
```

## Функции

Основные возможности R скрыты в множестве функций, которые разработчики написали и поместили в пакеты. Функции в R имеют имя (оно ставится до круглых скобок) и аргументы (они перечисляются в круглых скобках по схеме имя аргумента -- знак равно -- значение). Рассмотрим на примере функции `seq()`:

```{r}
seq(from = 1, to = 100, by = 13)
```

Данная функция имеет имя --- `seq` и три аргумента: `from`, `to` и  `by`. Эта функция порождает вектор чисел арифметической последовательности. Важно отметить, что знак равно в данном случае не является операцией присваивания. Имена аргументов у каждой функции содержатся в определенном строго заданном порядке. Имена аргументов можно опускать:

```{r}
seq(1, 100, 13)
```

Кроме того, пользователь при желании может подавать аргументы в произвольном порядке (и даже не дописывать названия аргументов), но это возможно только в том, случае, если названия аргументов опознаваемо:

```{r}
seq(from = 1, to = 100, by = 13)
seq(from = 1, by = 13, to = 100)
seq(to = 100, from = 1, by = 13)
seq(by = 13, to = 100, from = 1)
seq(to = 100, by = 13, from = 1)
seq(by = 13, to = 100, from = 1)
seq(f = 1, t = 100, b = 13)
```

Каждый аргумент функции предполагает определенный тип объектов, который подается на вход. Многие функции в R *векторизованы*, т. е. применимы к векторам. Рассмотрим на примере функции для извлечения корня `sqrt()`: 

```{r}
sqrt(4) # применение к вектору длины 1
sqrt(1:100) # применение к вектору длины 100
```

Давайте посмотрим на ошибку, которую мы получим, если подадим на вход тип данных, которые функцией не предполагается:

```{r}
#| error: true

sqrt("asdasd")
```

Важно отметить, что в реальных данных могут встретиться пропущенные значения (`NA`), что вызовает `NA` при применении некоторых функций, так что в них можно встретить аргмент `na.rm`, например:

```{r}
mean(c(1:50))
mean(c(1:50, NA))
mean(c(1:50, NA), na.rm = TRUE)
```

Очень важно, что все функции в R задокументированы, так что список аргументов, их порядок, их значения по умолчанию, примеры использования --- все это можно найти в справке, которую можно вызвать, набрав в консоли вопросительный знак и имея функции, например, `?seq`, `?mean` и т. п. 

## Датафреймы и их индексация

Датафрейм --- это один из основных объектов в R, в котором обычно импортируют и экспортируют табличные данные. Датафрейм --- это собрание векторов одинаковой длинны. Давайте создадим датафрейм:

```{r}
df <- data.frame(name = c("Анна", "Вера", "Михаил"),
                 age = c(23, 33, 11),
                 color = c("голубой", "зеленый", "желтый"))
df
```

Хоть мы и записывали разные векторы датафрейма в строчку, стандартное представление датафрейма перевернутое: каждый вектор -- это столбец. Каждый отдельный вектор датафрейма можно вызвать по имени (и индексировать как обычный вектор):

```{r}
df$color
df$name[2:3]
```

Кроме того, к элементам датафрейма можно обращаться при помощи индекса в квадратных скобках, сначала идут строки, потом столбцы.  

```{r}
df[3,3]
```

Если какой-то элемент не нужен, то его оставляют пустым, но запятую ставить обязательно:

```{r}
df[3,]
```

Еще варианты обращения к элементам датафрейма

```{r}
df[3,c(1, 3)]
df[c(1, 3), c(1, 3)]
```

Кроме того, можно вызывать необходимые столбцы по имени прямо внутри квадратных скобок:

```{r}
df[, c("age", "name")]
df <- df[, c("age", "name", "color")]
```

В R есть достаточно много встроенных датасетов, вот самые популярные:

```{r}
mtcars
iris
```

## Работа с пакетами

Все богатство R находиться в его огромной инфраструктуре пакетов, которые может разрабатывать кто-угодно: от больших компаний, до частных исследователей. Чтобы их установить, нужно использовать команду `install.packages()`. Начнем с установки центрального для курса пакета: `tidyverse`:  

```{r}
#| eval: false

install.packages("tidyverse")
```

Следует помнить, что установка пакета не влечет за собой работу всех функций пакета. Пакет еще нужно включить командой `library()`.

![](images/01_03_install_packages.png)

Проверим, что все установилось, запустим пакет.

```{r}
library(tidyverse)
```

## Чтение и запись табличных данных

Табличные данные можно хранить

```{r}
df <- read_csv("orange_circumference.csv")
df
```


```{r}
df <- read_csv("orange_circumference.csv", show_col_types = FALSE)
```


```{r}
#| eval: false

library(readxl)
df2 <- read_xlsx("orange_circumference.xlsx")

df_2save <- df[df$circumference > 100, ]

write_csv(df_2save, "orange_circumference_g100.csv")
write_tsv(df_2save, "orange_circumference_g100.tsv")
write_delim(df_2save, "orange_circumference_g100.zsv", delim = "0")

dir.create("asdasd")
write_csv(df_2save, "asdasd/orange_circumference_g100.csv")

getwd()
setwd("~/Desktop/")
```

## Как справятся с проблемами

Код не работает очень часто, очень важно внимательно читать ошибки. Если чтение не помогло, то можно скопировать ошибку в поисковик, скорее всего кто-нибудь на Stack Overflow (место, где принято задавать вопрос) или Posit Community (место для вопросов на R и Python) уже сталкивался с вашей проблемой. Кроме того, никто не может написать пакет на R, который пройдет в основной репозиторий CRAN, не задокументировав все функции пакета. В связи с этим имеет смысл искать ответы во вкладке Help в Rstudio, а также в консоли используя знак вопроса (или два, если ничего не находится) и имя функции, например, `?write_csv` или `??read_xlsx`. wd
