---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Трансформация данных

В данном разделе мы познакомимся с основами пакета `tidyverse` --- это набор пакетов, из которых мы уделим внимание следующим:

- `tibble`, для работы с тибблами, современный вариант датафрейма
- `dplyr`, для преобразования данных
- `tidyr`, для преобразование таблиц к формату опрятных данных (tidy data)

```{r}
library(tidyverse)
```

При загрузке пакета обычно появляется сообщение о версиях некоторых входящих в него пакетов и о конфликтующих функциях. Не стоит обращать на него внимание. Данные материалы не претендуют на полный охват, для дальнейшего ознакомления рекомендую третью и пятую главы из [@wickham23].

## `tibble`

Современный вариант датафрейма называется тиббл и отличается от классического тем, как он печатается в консоли и некоторыми дополнительными возможностями. Для его создания нужно в функцию `tibble()` подать именованные векторы:

```{r}
tibble(x = 1:100,
       y = 100:1,
       logical = sample(x = c("a", "b", "c"), size = 100, replace = TRUE))
```

Мы будем использовать `tibble()` для саздания таблиц, но чаще всего мы будем считывать данные при помощи функций `read_csv()`,  `read_tsv()` и прочих, которые по умолчанию преобразуют таблицу в формат `tibble`. 

## Использование конвейера (пайпа)

В нашем коде мы часто будем использовать знаки конвейера (или пайпа): `|>` (также можно встретить популярный ранее `%>%`). Чтобы вставлять новый конвейер придется сделать изменение в настройках RStudio (Tools > Global Options > вкладка Code):

![](images/02_rstudio_pipe.png)

конвейер призван показывать последовательность действий. Сочетание клавиш для написания конвейера: `Ctrl/Cmd + Shift + M` (хотя RStudio позволяет горячие клавиши переназначить).

```{r}
mean(sqrt(abs(sin(c(1:100, NA)))), na.rm = TRUE)

c(1:100, NA) |>
  sin() |> 
  abs() |> 
  sqrt() |> 
  mean(na.rm = TRUE)
```

Выражения с конвейерами можно запускать частями и смотреть, что на каком этапе трансформации данных получилось. Это полезно при поиске ошибок.

## Функции семейства `slice()`

Дальше мы посмотрим на фрагмент данных из ["Исследования  дразнилки "Жадина-говядина" издания N+1](https://nplus1.ru/material/2019/06/19/greedy), где исследовались социолингвистические аспекты, влияющие на тенденцию к тому или иному продолжению. Переменные `word_1`, `word_2` и `word_3` соотвествуют разным вариантам начала, переменная `type` описывает классификацию, которую варианту дали исследователи, а переменная `n` отвечает за количество этих вариантов в данных.

```{r}
#| message: false
zhadina <- read_csv("https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_zhadina.csv")
zhadina
```

Первые функции `tidyverse`, которые будут нас интересовать, --- это функции семейства `slice()`. Функция `slice()` позволяет фильтровать нужные строчки датасета по индексу:

```{r}
zhadina |> 
  slice(c(6, 25, 3))

zhadina |> 
  slice(6:25)
```

Стоит обратить внимание на то, что результат работы функции выводится в консоль. Чтобы сохранить результат работы, следует сделать операцию приписывания одним из следующих способов (первый наиболее распространенный):

```{r}
new_zhadina <- zhadina |> 
  slice(6:25)

zhadina |> 
  slice(6:25) ->
  new_zhadina
```

Кроме того, есть функции `slice_head()` и `slice_tail()`, которые выдают первое/последнее наблюдение. Аргумент `n` позволяет донастроить, сколько первых/последних наблюдений хочется вывести:

```{r}
zhadina |> 
  slice_head()

zhadina |> 
  slice_tail()

zhadina |> 
  slice_tail(n = 6)
```

Стоит отметить, что совпадение имени аргумента и названия столбца в нашем датасете (`n`) никак не влияет на работу функции. Также полезными могут быть функции `slice_max()` и `slice_min()`, которые выдают максимальное/минимальное значение переменной. У этих функции тоже есть аргумент `n`:

```{r}
zhadina |> 
  slice_max(n)

zhadina |> 
  slice_min(n)

zhadina |> 
  slice_max(n, n = 3)
```

Функция `slice_sample()` позволяет вывести выборку из некоторого количества строчек (аргумент `n`) или долю строчек (аргумент `prop`):

```{r}
zhadina |> 
  slice_sample(n = 10)

zhadina |> 
  slice_sample(prop = 0.3)
```

## Функция `filter()`

Функция `filter()` позволяет отфильтровывать строки таблицы по одному или нескольким условиям. 

```{r}
zhadina |> 
  filter(n > 100)

zhadina |> 
  filter(n < 100)

zhadina |> 
  filter(n <= 100) # меньше или равно

zhadina |> 
  filter(n >= 100) # больше или равно

zhadina |> 
  filter(n != 10) # не равно

zhadina |> 
  filter(n == 10) # равно (дважды знак равно)

zhadina |> 
  filter(word_3 == "шоколадина")

zhadina |> 
  filter(word_3 != "шоколадина")

zhadina |> 
  filter(nchar(word_3) == 7)
```

Кроме того, условия можно перечислить через запятую (аналог логического "и"):

```{r}
zhadina |> 
  filter(n > 15,
         n < 100)
```

Логическое "или" обозначается палочкой `|`:

```{r}
zhadina |> 
  filter(n < 15 | n > 100)
```

## Функции `count()`, `distinct()`, `arrange()`

Функция `count()` очень полезна в разведочном анализе, так как позволяет посчитать сколько какое значение переменной или группы переменных встретилось в датасете. Аргумент `sort` позволяет дополнительно отсортировать результат от большего к меньшему.

```{r}
zhadina |> 
  count(word_3)

zhadina |> 
  count(word_3, sort = TRUE)

zhadina |> 
  count(word_1, word_2, sort = TRUE)
```

Функция `distinct()` позволяет вывести уникальное значение переменной или все уникальные комбинации значений нескольких переменных, встретившихся в датасете:

```{r}
zhadina |> 
  distinct(word_3)

zhadina |> 
  distinct(word_1, word_2)
```

Функция `arrange()` позволяет отсортировать одну или несколько переменных от меньшего к большему (если нужно наоборот --- используйте функцию `desc()`). Числовые переменные сортируются по значениям, а строковые по алфавиту (с учетом особенностей локали, см. @sec-sorting):

```{r}
zhadina |> 
  count(word_3) |> 
  arrange(n)

zhadina |> 
  count(word_3) |> 
  arrange(desc(n))

zhadina |> 
  count(word_3) |> 
  arrange(-n)

zhadina |> 
  count(word_3) |> 
  arrange(word_3)
```

## Функция `select()`

Функция `select()` позволяет выбрать из датасета некоторый набор столбцов.

```{r}
zhadina |> 
  select(word_1, type, n)
```

Внутри функции `select()` можно использовать функции, которые позволяют не только перечислять через запятую необходимые столбцы, но и выделять их по имени:

```{r}
zhadina |> 
  select(starts_with("word"))

zhadina |> 
  select(ends_with("1"))

zhadina |> 
  select(matches("ord"))
```

Кроме того, внутри функции `select()` действует оператор двоеточие, который мы видели при создании векторов `5:10`:

```{r}
zhadina |> 
  select(word_3:n) # от колонки word_3 до колонки n
```


## Функция `mutate()`

Функция `mutate()` позволяет создавать и изменять уже имеющиеся переменные:

```{r}
zhadina |> 
  mutate(nchar = nchar(word_3),
         nchar2 = nchar(word_3)*2)

zhadina |> 
  mutate(n = n^3)
```

## Функция `relocate()`

Функция `relocate()` позволяет перемещать переменные в таблице (по умолчанию в начало):

```{r}
zhadina |> 
  relocate(type)
```

Если хочется перемещать в какое-то другое место, то можно использовать аргументы `.after` и `.before`:

```{r}
zhadina |> 
  relocate(n, .after =  word_3)

zhadina |> 
  relocate(n, .before =  type)
```

## Функция `group_by() |> summarise()` и `group_by() |> mutate()`

Все предыдущие операции работали со строками и столбцами таблиц. В этом разделе мы познакомимся с операцией группировки, которая позволяет разделять таблицу на группы и агрегировать информацию по этим группам. Функция `group_by()` разделяет на группы, но саму структуру и содержание таблицы не меняет, однако при печати выводится сообщение об имени группирующей переменной и числа групп:

```{r}
zhadina |> 
  group_by(type)
```

После группировки можно использовать функцию `summarise()` (или ее американский вариант `summarize()`), которая возвращает по одному значению на каждую группу. Например, посчитаем среднее количество встречаемости для каждого типа:

```{r}
zhadina |> 
  group_by(type) |> 
  summarise(mean_by_type = mean(n))
```

Функций саммаризации может быть несколько:

```{r}
zhadina |> 
  group_by(type) |> 
  summarise(mean_by_type = mean(n),
            median_by_type = median(n))
```

Кроме того, важно отметить, что группировка может происходить не по одной переменной, а по нескольким.

```{r}
zhadina |> 
  group_by(type, word_3) |> 
  summarise(mean_by_type = mean(n),
            median_by_type = median(n))
```

Важно также отметить, что в функции `summarise()` с недавних пор добавили аргумент `.by`, который является заменой функции `group_by()`:

```{r}
zhadina |> 
  summarise(mean_by_type = mean(n),
            median_by_type = median(n),
            .by = c(type, word_3))
```

Кроме того, функцию `group_by()` или аргумент `.by` можно использовать в связке с функцией `mutate()`. В таком случае саммаризирующий результат будет выведен не единожды для каждой группы, а присоединен к исходной таблице в виде новой переменной. 

```{r}
zhadina |> 
  group_by(type) |> 
  mutate(mean_by_type = mean(n),
         median_by_type = median(n))

zhadina |> 
  mutate(mean_by_type = mean(n),
         median_by_type = median(n),
         .by = type)
```

Не так часто, но все же бывает, что в большом длинном конвейере, который совмещает в себе много действий, группировка может мешать, так что ее можно снять функцией `ungroup()`:

```{r}
zhadina |> 
  group_by(type) |> 
  mutate(mean_by_type = mean(n)) |> 
  ungroup()
```

## Функция `across()`

Функция `across()` позволяет применять одно и то же изменение к группе колонок, которые выбираются набором функций, сходных с операциями для функции `select()`. Важно отметить, что трансформация обычно описывается функцией, и имя функции обычно пишут без круглых скобок.

```{r}
zhadina |> 
  mutate(across(starts_with("word"), toupper))

zhadina |> 
  mutate(across(where(is.character), toupper))
```

Функция может так же работать в связке с функцией `group_by() |> summarize()` и `group_by() |> mutate()`:

```{r}
set.seed(42)
zhadina |> 
  mutate(new_numeric_value = rnorm(26)) |> 
  group_by(type) |> 
  summarise(across(where(is.double), mean))

set.seed(42)
zhadina |> 
  mutate(new_numeric_value = rnorm(26)) |> 
  group_by(type) |> 
  summarise(n = mean(n),
            new_numeric_value = mean(new_numeric_value))

zhadina |> 
  mutate(new_numeric_value = rnorm(26)) |> 
  group_by(type) |> 
  mutate(across(where(is.double), mean))
```

## Функции семейства `pivot_...()`

Основная концепция пакет `tidyverse` строится вокруг понятия "опрятный формат" (tidy data). Это понятие означает приведение табличных данных к такому формату, в котором:

- каждая переменная имеет собственный столбец;
- каждое наблюдение имеет собственную строку;
- каждое значение имеет свою собственную ячейку.

Такое представление данных делает любые трансформации и визуализацию делом нескольких строк.

Однако данный подход не дает четких инструкций по поводу того, что делать с наблюдениями похожего типа, которые сделаны по поводу одной единицы. Рассмотрим на примере [данных](https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_india_languages.csv) количества носителей разных языков Индии:

```{r}
india_langauges_wide <- read_csv("https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_india_languages.csv")
india_langauges_wide
```

Сейчас данные в так называемом **широком** формате. Хинди в датасете встречается единожды, но значения сколько носителей выучили его как первый/второй/третий/все вместе записаны в виде отдельных столбцов.

```{r}
india_langauges_wide |> 
  pivot_longer(names_to = "L", values_to = "value", n_L1_sp:n_all_sp)
```

Теперь данные представлены в длинном формате, который удобен для визуализации и каких-то трансформаций. Хинди встречается в датасете четырежды, однако информация про то, какая группа носителей имеется в виду записана в переменную `L`. Более того, столбец `n_all_sp` изначально был лишним, так как эта информация уже содержится как сумма всех остальных столбцов. Мы можем отфильтровать значения `n_all_sp` и получить их снова:

```{r}
india_langauges_wide |> 
  pivot_longer(names_to = "L", values_to = "value", starts_with("n_")) |> 
  filter(L != "n_all_sp") |> 
  group_by(L) |> 
  summarise(sum = sum(value),
            mean = mean(value))
```

Функция `pivot_wider()` позволяет вновь перевести данные в широкий формат, который удобен для представления данных людям:

```{r}
india_langauges_wide |> 
  pivot_longer(names_to = "L", values_to = "value", starts_with("n_")) |> 
  pivot_wider(names_from = "L", values_from = "value")
```

## Функции семейства `bind_...()`

Функции `bind_rows()` и `bind_cols()` позволяют соединять несколько таблиц. Функция `bind_rows()` присоединяет таблицу снизу, при этом она должна иметь столько же переменных и тип переменных должен совпадать с основной таблицей. 

```{r}
zhadina_new <- tibble(word_1 = "жадина-говядина",
                      word_2 = "пупецкий",
                      word_3 = "барабан",
                      type = "барабан",
                      n = 0)

zhadina |> 
  bind_rows(zhadina_new)
```

Функция `bind_cols()` присоединяет таблицу справа, при этом она должна иметь столько же строчек, сколько есть в с основной таблице: 

```{r}
zhadina_additional_columns <- tibble(new_var1 = rnorm(26),
                                     new_var2 = letters)

zhadina |> 
  bind_cols(zhadina_additional_columns)
```

## Функции семейства `..._join()` {#sec-joins}

Иногда возникает ситуация, когда нужно соединить две таблицы на основании одного или нескольких общих столбцов. Так бывает, если нужно что-то включить или исключить из анализа. Примером включения может послужить случай, когда для построения карты хочется присоединить расшифровку аббревиатур, или для анализа нужны еще какие-то данные, например, размер популяции. Примером исключения могут послужить случаи, когда при анализе текстов возникает необходимость удаления служебных слов. Эти задачи решают функции семейства `..._join()`.

Синтаксис функций выглядит так (`A` и `B` --- датафреймы):

```{r}
#| eval: false

A |> 
  ..._join(B)
```

Вместо многоточия может стоять одна из следующих функций:

- `inner_join()` --- возвращает только те наблюдения в А, которым есть соответствие в B
- `full_join()` --- возвращает все наблюдения из А и из B
- `left_join()` --- возвращает все наблюдения из А, а если им нет соответствия в B, то появляется `NA`. Наблюдения из B, которым нет соответствия в А, исключаются.
- `right_join()` --- возвращает все наблюдения из B, а если им нет соответствия в A, то появляется `NA`. Наблюдения из A, которым нет соответствия в B, исключаются.
- `anti_join()` --- возвращает все наблюдения из А, которым нет соответствия в B.
- `semi_join()` --- возвращает все наблюдения из А, которым есть соответствия в B, но при этом игнорирует дополнительные столбцы из B.

Все эти объединения можно проиллюстрировать при помощи диаграмм Венна: 

```{r}
#| echo: false

library(venn)

inner <- venn("AB", ggplot = TRUE)
full <- venn("A+B", ggplot = TRUE)
left <- venn("A+AB", ggplot = TRUE)
right <- venn("B+AB", ggplot = TRUE)
anti <- venn("A~B", ggplot = TRUE)
cowplot::plot_grid(full, inner, left, right, anti, 
                   labels = c("full", "inner,semi", "left", "right", "anti"))
```

В качестве примера создадим новую таблицу на основе датасета продолжений Жадины-говядины:

```{r}
zhadina |> 
  count(type) |>  
  rename(our_new_var1 = n) |> 
  mutate(our_new_var2 = c("совсем редкое", 
                          "редкое", 
                          "второй по популярности",
                          "самый частый тип")) ->
  type_new_var

type_new_var
```


```{r}
zhadina |> 
  left_join(type_new_var)
```

Мы видим, что таблицы соединились, а также появилось сообщение о том, что соединение произошло по переменной `type`. Если мы исключим одно наблюдение из нашей таблицы `type_new_var` и соединим, то на месте пропусков появятся `NA`:

```{r}
type_new_var |> 
  slice(-1) ->
  type_new_var2

zhadina |> 
  left_join(type_new_var2)
```

Если же мы присоединим к таблице `type_new_var` строчку, которой нет в нашем исходном датасете продолжений Жадины-говядины, мы получи разный результат при присоединении разными функциями. При присоединении функцией `left_join()` новой строчки не будет (26 строчек), а если мы будем присоединять при помощи `full_join()`, то она будет (27 строчек).

```{r}
tibble(type = "карниз", 
       our_new_var1 = 0, 
       our_new_var2 = "такого не бывает") |> 
  bind_rows(type_new_var)->
  type_new_var3

zhadina |> 
  left_join(type_new_var3) 

zhadina |> 
  full_join(type_new_var3)
```

Если мы хотим исключить наблюдения с типом шоколадина, то мы можем использовать функцию `anti_join` (я бы в такой задаче использовал простой фильтр, но мы на курсе еще встретим случаи, когда быстрее написать `anti_joint()`). 

```{r}
zhadina |> 
  anti_join(tibble(type = "шоколадина"))
```

Последнее, что важно обсудить в данном разделе --- что если переменные в разных таблицах по разному называются? В таком случае можно не переименовывать переменные, а эксплицитно указать изменения в аргументе `by`: 

```{r}
type_new_var3 |> 
  rename(new_type = type) ->
  type_new_var4
type_new_var4
```

Как видно, в переменной `type_new_var4` больше нет переменной `type`.

```{r}
zhadina |> 
  left_join(type_new_var4, by = c("type" = "new_type"))
```

