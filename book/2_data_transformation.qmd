---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Трансформация данных

В данном разделе мы познакомимся с основами пакета `tidyverse` --- это набор пакетов, из которых мы уделим внимание следующим:

- `ggplot2`, для визуализации
- `tibble`, для работы с тибблами, современный вариант датафрейма
- `tidyr`, для преобразование таблиц к формату опрятных данных
- `readr`, для чтения файлов в R
- `dplyr`, для преобразованиия данных

```{r}
library(tidyverse)
```

При загрузке пакета обычно появляется сообщение о версиях некоторых входящих в него пакетах и о конфликтующих функциях. Не стоит обращать на него внимание.

## `tibble`

Современный вариант датафрейма называется тиббл и отличается от классического тем, как он печатается в консоли и некоторыми дополнительными возможностями. Для его создания нужно в функцию `tibble()` подать именованные векторы:

```{r}
tibble(x = 1:100,
       y = 100:1,
       logical = sample(x = c("a", "b", "c"), size = 100, replace = TRUE))
```

Мы будем использовать `tibble()` для саздание таблиц, но чаще всего мы будем считывать данные при помощи функций `read_csv()`,  `read_tsv()` и прочих, которые по умолчанию преобразуют таблицу в формат `tibble`. 

## Использование конвеера (пайпа)

В нашем коде мы часто будем использовать знаки конвеера (или пайпа): `|>` (также можно встретить популярный ранее `%>%`). Конвеер призван показывать последовательность действий. Сочетание клавиш для написание конвеера: `Ctrl/Cmd + M`.

```{r}
mean(sqrt(abs(sin(c(1:100, NA)))), na.rm = TRUE)

c(1:100, NA) |>
  sin() |> 
  abs() |> 
  sqrt() |> 
  mean(na.rm = TRUE)
```

Выражения с конвеерами можно запускать частями и смотреть, что на каком этапе трансформации данных получилось. Это полезно при поиске ошибок.

## Функции семейства `slice()`

Дальше мы посмотрим на фрагмент данных из [исследования издания N+1](https://nplus1.ru/material/2019/06/19/greedy) дразнилки "Жадина-говядина", где исследовались социолингвистические аспекты влияющие на тенденцию к тому или иному продолжению. Переменные `word_1`, `word_2` и `word_3` соотвествуют разным вариантам начала, переменная `type` описывает классификацию, которую варианту дали исследователи, а переменная `n` отвечает за количество этих вариантов в данных.

```{r}
#| message: false
zhadina <- read_csv("https://raw.githubusercontent.com/agricolamz/daR4hs/main/data/w2_zhadina.csv")
zhadina
```

Первые функции `tidyverse`, которая будет нас интересовать, --- это функции семейства `slice()`. Функция `slice()` позволяет фильтровать нужные строчки датасета по индексу:

```{r}
zhadina |> 
  slice(c(5, 25, 3))

zhadina |> 
  slice(5:25)

new_zhadina <- zhadina |> 
  slice(5:25)

zhadina |> 
  slice(5:25) ->
  new_zhadina

zhadina |> 
  slice_head()

zhadina |> 
  slice_tail()

zhadina |> 
  slice_max(n)

zhadina |> 
  slice_min(n)

zhadina |> 
  slice_sample(n = 10)

zhadina |> 
  slice_sample(prop = 0.3)
```



## Функции семейства `filter()`

## Функции `count()`, `distinct()`, `arrange()`

## Функция `mutate()`

## Функция `group_by() |> summarise()` и `group_by() |> mutate()`

## Функция `across()`

## Функции семейства `pivot_...()`

## Функции семейства `bind_...()`

## Функции семейства `..._join()` {#sec-joins}
